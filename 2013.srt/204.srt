
1
00:00:00.506 --> 00:00:09.466
[ Silence ]

2
00:00:09.966 --> 00:00:10.886
>> Good afternoon.

3
00:00:12.656 --> 00:00:14.016
My name is David Chan.

4
00:00:14.086 --> 00:00:16.476
Today, we're going to talk
a bit about multitasking.

5
00:00:16.766 --> 00:00:19.186
As you saw yesterday, we
have some great new APIs

6
00:00:19.186 --> 00:00:22.076
for you today, and we're
going to just dive right in.

7
00:00:23.916 --> 00:00:27.426
So first, we want to just do a
quick review of the multitasking

8
00:00:27.426 --> 00:00:29.236
that we have in iOS 6.

9
00:00:29.766 --> 00:00:32.336
We have a few changes here that
we want to just to note right

10
00:00:32.336 --> 00:00:34.946
at the top and then
we're going to dive right

11
00:00:34.946 --> 00:00:37.246
into the new APIs
that we have for you.

12
00:00:37.896 --> 00:00:40.206
We're really excited to see
what you guys think about it

13
00:00:40.686 --> 00:00:42.996
and what you'll do inside
of your applications.

14
00:00:43.786 --> 00:00:46.646
And then next, we're
going to talk a little bit

15
00:00:46.646 --> 00:00:48.576
about what it means to
run in the background.

16
00:00:48.976 --> 00:00:51.726
For those of you who
haven't adapted any

17
00:00:52.096 --> 00:00:57.286
of the more significant
multitasking APIs in the past,

18
00:00:57.366 --> 00:01:01.216
these are a few tips and things
that you should be considering

19
00:00:57.366 --> 00:01:01.216
these are a few tips and things
that you should be considering

20
00:01:01.216 --> 00:01:02.786
as you're implementing it.

21
00:01:03.596 --> 00:01:06.606
Details are incredibly important
to make a great application

22
00:01:07.026 --> 00:01:08.886
and this is where
you're going to learn

23
00:01:08.886 --> 00:01:12.406
about what you need
to do for those.

24
00:01:12.606 --> 00:01:18.176
So, in iOS 6, we have a
number of great APIs for you

25
00:01:18.696 --> 00:01:21.906
to for example playing
audio into the background

26
00:01:21.956 --> 00:01:26.116
if you're listening to music,
for your application to be woken

27
00:01:26.116 --> 00:01:30.096
up and notified when the user
changes location, if they enter

28
00:01:30.096 --> 00:01:32.156
in a region that
they're interested in.

29
00:01:32.916 --> 00:01:35.876
And of course, in iOS 5,
we introduced Newsstand

30
00:01:36.276 --> 00:01:39.986
which allows newspaper
and magazine applications

31
00:01:39.986 --> 00:01:43.616
to keep their content
up to date.

32
00:01:43.616 --> 00:01:46.646
So, here are a few changes
that we've made to some

33
00:01:46.646 --> 00:01:48.986
of the existing multitasking
APIs.

34
00:01:50.336 --> 00:01:54.686
The UI application background
task API is really great.

35
00:01:54.686 --> 00:01:58.296
It's certainly very useful
to continue operation

36
00:01:58.296 --> 00:02:00.256
after users have left
your application.

37
00:01:58.296 --> 00:02:00.256
after users have left
your application.

38
00:02:00.696 --> 00:02:03.876
And a number of applications
use this for encoding video

39
00:02:03.876 --> 00:02:07.476
or transferring files,
uploading or downloading

40
00:02:07.476 --> 00:02:09.376
and completing database
operations

41
00:02:09.376 --> 00:02:13.206
or just generally finishing up
whatever the user was doing.

42
00:02:13.866 --> 00:02:19.636
And so from a power standpoint,
it kind of looked like this.

43
00:02:20.456 --> 00:02:22.296
When the application
enters the background,

44
00:02:22.356 --> 00:02:26.526
obviously the phone stays awake
to keep that task running,

45
00:02:27.916 --> 00:02:29.876
even when the user
locks her phone.

46
00:02:30.096 --> 00:02:32.526
So, when you lock your phone
and you put it in your pocket,

47
00:02:32.526 --> 00:02:33.816
you kind of expect
it to go to sleep.

48
00:02:34.526 --> 00:02:38.896
But in iOS 6, that background
task would keep the phone awake

49
00:02:39.296 --> 00:02:42.466
and then it would only go to
sleep after that task has ended.

50
00:02:43.796 --> 00:02:47.506
In iOS 7, we've changed
this slightly

51
00:02:47.506 --> 00:02:49.096
to improve battery life.

52
00:02:50.076 --> 00:02:53.296
So, we have where the
application enters the

53
00:02:53.296 --> 00:02:56.316
background, where it locks and
you'll see that the phone goes

54
00:02:56.316 --> 00:02:57.626
to sleep shortly afterwards.

55
00:02:58.406 --> 00:03:02.416
And that anytime that the
device is awake to, for example,

56
00:02:58.406 --> 00:03:02.416
And that anytime that the
device is awake to, for example,

57
00:03:02.886 --> 00:03:07.196
check mail, your application
will get a chance to run

58
00:03:07.196 --> 00:03:11.466
at that point too, so you get
these opportunistic slices

59
00:03:11.466 --> 00:03:12.926
of time to run.

60
00:03:13.056 --> 00:03:15.426
And you'll see that you still
get about the same amount

61
00:03:15.426 --> 00:03:17.026
of time to run your task.

62
00:03:17.056 --> 00:03:19.556
It's just split up
over that period.

63
00:03:20.556 --> 00:03:26.456
So, if you're an application
that uses the background tasks

64
00:03:26.456 --> 00:03:30.076
to transfer files, in iOS 7,
we're going to encourage you

65
00:03:30.076 --> 00:03:34.246
to use the NSURLSession API
and we're going to discuss what

66
00:03:34.246 --> 00:03:36.726
that looks like and how to
use that in a little bit.

67
00:03:36.726 --> 00:03:40.056
And of course, if you're
going to support iOS 6 as well

68
00:03:40.186 --> 00:03:43.496
as iOS 7, all we ask is
that you check to see

69
00:03:43.496 --> 00:03:47.136
if that class exists and use
the new enqueuing behavior

70
00:03:47.576 --> 00:03:48.556
but of course, continuing

71
00:03:48.556 --> 00:03:51.836
to use your old stuff
for iOS 6 as well.

72
00:03:53.126 --> 00:03:54.376
So, just to summarize,

73
00:03:55.466 --> 00:03:57.936
applications will no
longer keep the device awake

74
00:03:58.286 --> 00:03:59.516
when you're running these tasks.

75
00:04:00.276 --> 00:04:03.136
You'll still get several minutes
of runtime just as before,

76
00:04:03.446 --> 00:04:05.266
it's just not guaranteed
to be contiguous.

77
00:04:05.826 --> 00:04:10.726
So, next stop is
the App Switcher.

78
00:04:11.266 --> 00:04:13.446
So, I hope you guys
noticed yesterday,

79
00:04:13.446 --> 00:04:15.646
we have a great new
App Switcher.

80
00:04:15.936 --> 00:04:20.036
It prominently features
snapshots, so users can go

81
00:04:20.036 --> 00:04:23.196
through and find what they're
looking for just by recognition.

82
00:04:24.016 --> 00:04:27.056
So, the really important
thing to note about this is

83
00:04:27.106 --> 00:04:29.206
that your snapshots
that got taken

84
00:04:29.206 --> 00:04:30.486
after your application goes

85
00:04:30.486 --> 00:04:35.316
into the background is even
more important, and it's really,

86
00:04:35.316 --> 00:04:38.236
really important now that
you go back to the same place

87
00:04:38.236 --> 00:04:40.436
that the user was
at when they left.

88
00:04:41.116 --> 00:04:45.146
And if you haven't seen it
before, I encourage you to go

89
00:04:45.146 --> 00:04:48.536
to the State Restoration talk
that will be on Thursday.

90
00:04:48.536 --> 00:04:50.886
And you'll be able to see how

91
00:04:50.886 --> 00:04:52.636
to use State Restoration
to do that.

92
00:04:52.636 --> 00:04:53.816
It's a really simple API.

93
00:04:53.816 --> 00:04:55.046
It's very powerful.

94
00:04:55.396 --> 00:04:57.726
You'll be able to use that
to make sure that when

95
00:04:57.726 --> 00:05:01.056
that user taps that snapshot and
it flies in, it goes right back

96
00:04:57.726 --> 00:05:01.056
that user taps that snapshot and
it flies in, it goes right back

97
00:05:01.056 --> 00:05:02.506
into the same place
that they left it.

98
00:05:04.056 --> 00:05:08.586
Also, users will be able to
swipe up to remove applications,

99
00:05:08.726 --> 00:05:13.786
and so just as before in iOS 6,
that will stop the application

100
00:05:13.786 --> 00:05:16.836
from running but now in
iOS 7, it will also stop

101
00:05:16.836 --> 00:05:18.436
that application from
running in the background.

102
00:05:18.986 --> 00:05:21.156
And we've made this consistent
across a number of APIs,

103
00:05:21.156 --> 00:05:24.496
but you guys should be
aware that that is what's--

104
00:05:25.566 --> 00:05:31.436
that will be what's happening
when the application is removed.

105
00:05:31.556 --> 00:05:34.106
So, we applied these to
location services as well,

106
00:05:34.316 --> 00:05:36.156
so with respect to the
App Switcher state,

107
00:05:36.586 --> 00:05:39.246
so your application
for region monitoring

108
00:05:39.246 --> 00:05:42.196
or significant location changes
won't launch in the background

109
00:05:42.196 --> 00:05:43.606
if the users remove
that application.

110
00:05:44.206 --> 00:05:47.236
In addition, users will be
able to configure whether

111
00:05:47.236 --> 00:05:48.796
or not they want that
application to run

112
00:05:48.796 --> 00:05:52.856
in the background with the new
Background App Refresh Settings

113
00:05:52.856 --> 00:05:53.976
under General.

114
00:05:57.536 --> 00:05:58.136
Newsstand.

115
00:05:58.766 --> 00:06:01.246
So quick note about
Newsstand, we've only updated it

116
00:05:58.766 --> 00:06:01.246
So quick note about
Newsstand, we've only updated it

117
00:06:01.926 --> 00:06:03.286
to support these two things,

118
00:06:03.286 --> 00:06:04.736
Settings as well as
the App Switcher.

119
00:06:05.896 --> 00:06:09.236
You'll see a lot of really great
APIs here that might be tempting

120
00:06:09.236 --> 00:06:11.506
to use if you're a
Newsstand developer.

121
00:06:12.356 --> 00:06:16.186
Suffice it to say, we
encourage you to stick

122
00:06:16.186 --> 00:06:19.956
with the Newsstand API for your
Newsstand behavior and that

123
00:06:20.126 --> 00:06:21.846
for new features,
you'll certainly want

124
00:06:21.846 --> 00:06:23.066
to consider using our new stuff.

125
00:06:23.616 --> 00:06:29.786
OK, so with that, let's dive in.

126
00:06:29.906 --> 00:06:34.006
First, multitasking API
is background app fetch.

127
00:06:35.276 --> 00:06:39.306
And what this is, is
it's a periodic way

128
00:06:39.306 --> 00:06:42.226
for your application to get
launched into the background

129
00:06:42.616 --> 00:06:45.316
to update its content.

130
00:06:45.386 --> 00:06:49.626
It's based on when the user
actually users your application

131
00:06:50.156 --> 00:06:55.566
so that your fetch opportunities
can be as fresh as possible.

132
00:06:55.916 --> 00:06:58.626
And we'll go into a little bit
about what that means and how

133
00:06:58.626 --> 00:07:01.026
that works so that you guys
can get an understanding of how

134
00:06:58.626 --> 00:07:01.026
that works so that you guys
can get an understanding of how

135
00:07:01.026 --> 00:07:01.896
to build your features.

136
00:07:02.356 --> 00:07:05.846
Next stop is notifications.

137
00:07:07.186 --> 00:07:08.576
This is really a great API.

138
00:07:10.306 --> 00:07:12.256
We've had lots of
request for this

139
00:07:12.336 --> 00:07:13.926
and I think you guys
are going to love this.

140
00:07:14.936 --> 00:07:18.166
This basically just gives
your application a chance

141
00:07:18.166 --> 00:07:21.336
to launch whenever you send
it a push notification crafted

142
00:07:21.336 --> 00:07:24.786
in a certain way,
it can actually wake

143
00:07:24.786 --> 00:07:26.636
up your application
in the background

144
00:07:26.636 --> 00:07:28.196
with a silent push notification.

145
00:07:28.626 --> 00:07:30.896
So that if there's
something immediate that needs

146
00:07:30.896 --> 00:07:32.966
to happen inside of the
application but doesn't need

147
00:07:32.966 --> 00:07:35.466
to bother the user,
you can do that too.

148
00:07:35.466 --> 00:07:37.236
It's really great.

149
00:07:37.416 --> 00:07:40.496
And lastly is a Background
Transfer Service,

150
00:07:41.166 --> 00:07:44.736
so this will allow you
to enqueue large uploads

151
00:07:44.736 --> 00:07:48.056
and downloads for iOS to
continue in the background

152
00:07:48.106 --> 00:07:51.776
after the user leaves your
application and can continue

153
00:07:51.776 --> 00:07:54.566
across reboots and just
handles all of that for you.

154
00:07:54.716 --> 00:07:55.226
It's really great.

155
00:07:56.686 --> 00:07:58.246
So with that, let's
start talking

156
00:07:58.246 --> 00:08:01.196
about background app refresh.

157
00:07:58.246 --> 00:08:01.196
about background app refresh.

158
00:08:01.296 --> 00:08:03.606
So, let's say you've got
the next great social

159
00:08:03.606 --> 00:08:04.636
networking application.

160
00:08:06.796 --> 00:08:09.886
Now, this might sound
typical to all of you,

161
00:08:09.886 --> 00:08:11.096
or familiar to all of you.

162
00:08:11.606 --> 00:08:13.076
When your app becomes
front most,

163
00:08:13.076 --> 00:08:14.826
you typically refresh
your feed right then,

164
00:08:14.856 --> 00:08:16.776
which means that
for a few seconds,

165
00:08:16.896 --> 00:08:18.446
your users are stuck looking

166
00:08:18.446 --> 00:08:21.896
at what they saw last
time and not what's new.

167
00:08:22.146 --> 00:08:24.006
And obviously, they've
gone to your application

168
00:08:24.006 --> 00:08:26.536
to see what's going
on with your--

169
00:08:26.656 --> 00:08:29.706
you know, with their
friends and family.

170
00:08:31.426 --> 00:08:37.145
So, now in iOS 7, you can update
your content before the user

171
00:08:37.145 --> 00:08:38.265
returns to your application.

172
00:08:38.836 --> 00:08:41.645
So, just like you resume
mail and has new mail there,

173
00:08:41.645 --> 00:08:44.376
then you can get that
same experience in iOS 7.

174
00:08:45.336 --> 00:08:48.496
So, that new interesting
content is just waiting there

175
00:08:48.496 --> 00:08:51.986
for the users to go and see.

176
00:08:52.236 --> 00:08:55.406
So, let's dig into the API.

177
00:08:55.406 --> 00:08:58.196
It's really simple, but it's a
common pattern that we're going

178
00:08:58.196 --> 00:08:59.086
to use throughout the top.

179
00:08:59.086 --> 00:09:01.956
So, I want you to pay
attention to how this works.

180
00:08:59.086 --> 00:09:01.956
So, I want you to pay
attention to how this works.

181
00:09:03.916 --> 00:09:07.036
The first thing you do is
either in the Info.plist

182
00:09:07.036 --> 00:09:10.616
or in the new Xcode feature
capability's PNG, you're going

183
00:09:10.616 --> 00:09:13.906
to enable Background
Fetch by adding this key

184
00:09:13.906 --> 00:09:16.096
to UI background modes.

185
00:09:16.806 --> 00:09:20.336
The second thing you do is you
set this Minimum Background

186
00:09:20.336 --> 00:09:23.366
Fetch interval and that
will allow your application

187
00:09:23.366 --> 00:09:25.186
to enable these fetches
to start with.

188
00:09:26.036 --> 00:09:29.406
And we'll go over what
these values are and what

189
00:09:29.616 --> 00:09:33.466
that actually means in
practice in just a moment.

190
00:09:34.076 --> 00:09:36.266
Finally, once your
application does get launched

191
00:09:36.266 --> 00:09:39.286
in the background, it'll go
through this typical pattern

192
00:09:39.356 --> 00:09:42.426
where it did finish launching,
gets called, and then obviously

193
00:09:42.426 --> 00:09:44.076
if your application
was already running

194
00:09:44.076 --> 00:09:45.776
and it was simply
suspended in the background,

195
00:09:46.786 --> 00:09:49.586
your application will be
resumed and perform fetch

196
00:09:49.686 --> 00:09:51.236
with completion handle
will be called.

197
00:09:51.236 --> 00:09:52.896
So, this is our new
delegate callback

198
00:09:52.896 --> 00:09:54.086
in UI application delegate.

199
00:09:54.806 --> 00:09:57.396
All you do is you implement
that, you get passed

200
00:09:57.396 --> 00:10:00.846
in a completion handler
and from that point on,

201
00:09:57.396 --> 00:10:00.846
in a completion handler
and from that point on,

202
00:10:01.366 --> 00:10:03.986
you're allowed a certain
amount of time in order

203
00:10:03.986 --> 00:10:06.156
to kick off any network
request you need to do

204
00:10:06.476 --> 00:10:10.826
to retrieve new content
and update your UI.

205
00:10:11.046 --> 00:10:14.246
And then after you've done
all of that and you've gotten

206
00:10:14.246 --> 00:10:16.086
that brand new stuff,
you're going

207
00:10:16.086 --> 00:10:17.746
to call the completion
handler that was called--

208
00:10:17.796 --> 00:10:20.176
that was passed in and
that's really important.

209
00:10:20.306 --> 00:10:25.036
That's where your snapshot
gets taken and will go right

210
00:10:25.036 --> 00:10:28.716
into that app switcher UI, so
that if the user is passing

211
00:10:28.716 --> 00:10:30.976
by your application-- the app
switcher, they can see, "Hey,

212
00:10:31.016 --> 00:10:32.246
look, there's brand
new content there.

213
00:10:32.666 --> 00:10:34.046
That's a cool new picture,
I want to see that."

214
00:10:35.686 --> 00:10:38.176
In addition, it also saves
the state restoration archive

215
00:10:38.176 --> 00:10:41.876
so that, of course, when you
tap that, the user goes right

216
00:10:41.876 --> 00:10:43.206
into your application even

217
00:10:43.206 --> 00:10:48.916
if it may have exited
in the background.

218
00:10:48.916 --> 00:10:51.056
So, let's talk about the
minimum fetch interval.

219
00:10:51.846 --> 00:10:54.866
So with that same social
networking app, right,

220
00:10:55.646 --> 00:10:57.826
it's like any other application,
you have a user account

221
00:10:57.826 --> 00:10:58.736
that you have to log in with.

222
00:10:59.346 --> 00:11:02.886
And so when the user first
installs it, it starts signed

223
00:10:59.346 --> 00:11:02.886
And so when the user first
installs it, it starts signed

224
00:11:02.886 --> 00:11:05.226
out which means that
there's no content available.

225
00:11:06.036 --> 00:11:09.746
And so the default value of the
minimum fetch interval is never.

226
00:11:10.296 --> 00:11:13.246
Once the user signs in, however,

227
00:11:14.716 --> 00:11:16.476
the content will
then be available.

228
00:11:16.766 --> 00:11:20.186
So you can set that
fetch interval to minimum

229
00:11:20.386 --> 00:11:24.206
and that means that the system
will use a reasonable default

230
00:11:24.276 --> 00:11:28.466
in order to find out when your
application should be launched

231
00:11:28.466 --> 00:11:28.886
to update.

232
00:11:29.646 --> 00:11:31.676
And of course, the cycle
completes, if the user happens

233
00:11:31.676 --> 00:11:33.796
to log out, you want to
set that back to never.

234
00:11:34.996 --> 00:11:38.036
So never and minimum are two
of the values that you can use,

235
00:11:38.396 --> 00:11:41.056
but of course you can set
a custom value expressed

236
00:11:41.056 --> 00:11:41.946
in seconds.

237
00:11:41.946 --> 00:11:45.996
So let's take a look
at what that actually--

238
00:11:46.356 --> 00:11:47.466
how that actually works.

239
00:11:47.786 --> 00:11:50.286
So let's say that I-- app
icon there represents some app

240
00:11:50.286 --> 00:11:52.646
activity like the user
using your application

241
00:11:53.136 --> 00:11:54.456
or a previous fetch.

242
00:11:55.006 --> 00:11:58.466
For a limited amount
of time afterwards,

243
00:11:58.566 --> 00:11:59.646
fetching will be disabled.

244
00:11:59.646 --> 00:12:02.966
So if you set this to let's
say an hour, for the next hour,

245
00:11:59.646 --> 00:12:02.966
So if you set this to let's
say an hour, for the next hour,

246
00:12:03.356 --> 00:12:05.356
the system will not
wake up your application

247
00:12:05.356 --> 00:12:06.386
in order to go and fetch.

248
00:12:07.666 --> 00:12:09.536
But that for any
time after that,

249
00:12:10.046 --> 00:12:11.566
fetching will be
allowed at any time.

250
00:12:11.956 --> 00:12:14.836
So if you zoom out a little
bit, what that looks like is

251
00:12:14.896 --> 00:12:16.416
that there's no repeating
interval.

252
00:12:16.416 --> 00:12:18.156
It just means that
there's a period of time

253
00:12:18.156 --> 00:12:21.876
after your app launches where
the system won't wake it up.

254
00:12:22.516 --> 00:12:24.756
Now, you might ask, "Why
would you want to do that?

255
00:12:24.756 --> 00:12:27.766
Of course, I want to be
updated all the time."

256
00:12:27.986 --> 00:12:30.066
So I'll give you an example.

257
00:12:30.676 --> 00:12:33.426
Let's say you have an
application that reads data

258
00:12:33.426 --> 00:12:35.236
from a number of
personal weather stations

259
00:12:35.616 --> 00:12:37.076
and that's really
expensive to do,

260
00:12:37.076 --> 00:12:39.296
so you only do it once an hour.

261
00:12:39.556 --> 00:12:43.916
You know ahead of time that
your content only updates once

262
00:12:43.916 --> 00:12:44.276
an hour.

263
00:12:44.276 --> 00:12:46.856
So if you were being woken up
let's say every 15 minutes,

264
00:12:47.206 --> 00:12:49.956
that would be a waste of
the user's battery life

265
00:12:49.956 --> 00:12:52.196
and it would be a waste
of your server resources.

266
00:12:52.616 --> 00:12:54.146
So you can set this
value to that.

267
00:12:54.576 --> 00:12:56.256
But if you don't have
constraints like that,

268
00:12:56.356 --> 00:12:58.846
we highly encourage you to
use the default minimum.

269
00:12:59.306 --> 00:13:01.376
We think that will give you
a really great experience

270
00:12:59.306 --> 00:13:01.376
We think that will give you
a really great experience

271
00:13:01.376 --> 00:13:04.316
and give your users
the right thing.

272
00:13:04.516 --> 00:13:08.336
So, with that I'd like to invite
up on stage Brittany Hughes

273
00:13:08.336 --> 00:13:11.166
from the SpringBoard team
and she'll show us how

274
00:13:11.166 --> 00:13:14.726
to update your application
with these APIs

275
00:13:14.926 --> 00:13:16.816
and how easy it is
to do an Xcode.

276
00:13:17.316 --> 00:13:22.996
[Applause]

277
00:13:23.496 --> 00:13:25.326
>> Hi. My name is Brittany
and I'm going to show you how

278
00:13:25.326 --> 00:13:27.506
to update your app to fetch
new content in the background.

279
00:13:28.536 --> 00:13:32.316
OK, I think I have the next
great social networking app.

280
00:13:32.596 --> 00:13:35.896
I've been working on an app that
is a social network for clowns

281
00:13:35.896 --> 00:13:37.456
and clown enthusiasts.

282
00:13:37.566 --> 00:13:38.566
I call it Clowntown.

283
00:13:38.626 --> 00:13:41.076
So, let's start by giving
you a little tour of my app.

284
00:13:42.516 --> 00:13:46.666
[ Pause ]

285
00:13:47.166 --> 00:13:48.606
OK, here we go.

286
00:13:49.476 --> 00:13:50.946
You can see it's
a very simple app.

287
00:13:50.946 --> 00:13:53.956
It just has a lot of posts
from my clown friends.

288
00:13:54.576 --> 00:13:56.876
I can pull the refresh
to get new posts

289
00:13:57.926 --> 00:13:59.936
and when I just pulled
the refresh,

290
00:14:00.166 --> 00:14:01.606
we just got two new posts.

291
00:14:01.606 --> 00:14:04.426
They're marked in blue and
if you look really closely

292
00:14:04.426 --> 00:14:06.926
down here on the corner of
a post, there's a timestamp.

293
00:14:07.466 --> 00:14:09.726
That means these posts
were downloaded at 2:20.

294
00:14:10.366 --> 00:14:14.306
So unfortunately for my
users, the only way for them

295
00:14:14.306 --> 00:14:16.426
to see new posts from
their clown friends is

296
00:14:16.426 --> 00:14:17.196
to pull the refresh.

297
00:14:17.976 --> 00:14:21.016
Wouldn't it be great if my
app was already up to date

298
00:14:21.016 --> 00:14:21.906
when the user launched it?

299
00:14:22.916 --> 00:14:24.766
Well now in iOS 7,
we can do that.

300
00:14:24.766 --> 00:14:25.446
Let me show you how.

301
00:14:25.976 --> 00:14:29.516
The first thing we
need to do is we need

302
00:14:29.516 --> 00:14:31.026
to add the new UI
background mode.

303
00:14:31.856 --> 00:14:33.616
Xcode 5 has made it much easier

304
00:14:33.616 --> 00:14:35.316
to manage your UI
background modes.

305
00:14:36.216 --> 00:14:38.306
All you have to do is
click on your project

306
00:14:38.306 --> 00:14:39.886
over here on the left.

307
00:14:39.886 --> 00:14:42.076
And then on the Capabilities
tab,

308
00:14:42.826 --> 00:14:44.836
down here there's a
background mode section.

309
00:14:45.236 --> 00:14:48.616
If I zoom in here, you
can see here is the list

310
00:14:48.616 --> 00:14:53.746
of background modes, so I'm just
going to check Background Fetch

311
00:14:53.746 --> 00:14:58.156
and now it's added to my apps
Info.plist The next thing I need

312
00:14:58.156 --> 00:15:01.326
to do is I need to set my
apps minimum fetch interval.

313
00:14:58.156 --> 00:15:01.326
to do is I need to set my
apps minimum fetch interval.

314
00:15:02.056 --> 00:15:05.426
This is super important because
the default interval is never,

315
00:15:05.616 --> 00:15:07.746
that means my app will
never be given a chance

316
00:15:07.826 --> 00:15:08.706
to run in the background.

317
00:15:09.336 --> 00:15:14.866
I'm going to set my apps
minimum fetch interval

318
00:15:14.866 --> 00:15:18.036
to the minimum interval which
means that iOS will decide

319
00:15:18.036 --> 00:15:19.936
when it's best for my app
to run in the background.

320
00:15:20.356 --> 00:15:24.406
The next thing I
need to do is I need

321
00:15:24.406 --> 00:15:26.836
to implement the new UI
application delegate callback.

322
00:15:28.376 --> 00:15:30.756
Application performs fetch
with completion handler.

323
00:15:31.886 --> 00:15:34.596
In this method, I need
to go fetch my new posts.

324
00:15:35.396 --> 00:15:38.556
I need to update my apps
UI to show the new posts,

325
00:15:38.976 --> 00:15:41.536
and then I need to call the
completion handler to signal

326
00:15:41.536 --> 00:15:43.626
to iOS that I'm finished
with my refresh.

327
00:15:44.966 --> 00:15:46.516
Let's go check out
my View Controller

328
00:15:46.516 --> 00:15:48.466
to see what options I have.

329
00:15:50.426 --> 00:15:54.176
OK, it looks like I have
conveniently refreshed

330
00:15:54.176 --> 00:15:55.126
with completion handler.

331
00:15:56.076 --> 00:15:56.656
Let's use that.

332
00:15:58.246 --> 00:16:00.186
It looks like this
method takes in a block

333
00:15:58.246 --> 00:16:00.186
It looks like this
method takes in a block

334
00:16:00.186 --> 00:16:01.606
than when the refresh
is finished,

335
00:16:01.886 --> 00:16:03.596
will give me back a bool whether

336
00:16:03.596 --> 00:16:07.326
or not we downloaded new
post in that refresh.

337
00:16:07.556 --> 00:16:08.596
Let's add that over here

338
00:16:08.916 --> 00:16:11.346
in my UI application
delegate callback.

339
00:16:13.326 --> 00:16:17.576
Now inside this block,
what I need to do is I need

340
00:16:17.576 --> 00:16:20.236
to call the UI application
delegates completion handler.

341
00:16:21.006 --> 00:16:23.916
The UI application delegates
completion handler can take a

342
00:16:23.916 --> 00:16:25.116
couple of different arguments.

343
00:16:25.756 --> 00:16:28.926
So, if we did receive
new posts, then I'm going

344
00:16:28.926 --> 00:16:30.246
to call the completion handler

345
00:16:30.246 --> 00:16:32.566
with UI Background
Fetch result new data.

346
00:16:33.886 --> 00:16:35.956
If there weren't any new
posts, then I'm going

347
00:16:35.956 --> 00:16:37.116
to call the completion handler

348
00:16:37.116 --> 00:16:39.136
with UI Background
Fetch result no data.

349
00:16:39.876 --> 00:16:43.736
OK, let's go check out
and see what refresh

350
00:16:43.766 --> 00:16:45.476
with completion handler
actually does.

351
00:16:50.426 --> 00:16:53.186
OK, it looks like it takes
that completion handler

352
00:16:53.186 --> 00:16:54.626
and assigns it to a property.

353
00:16:55.476 --> 00:16:57.476
This was probably
a good idea before

354
00:16:57.476 --> 00:17:00.066
when there was only one
code path that was coming

355
00:16:57.476 --> 00:17:00.066
when there was only one
code path that was coming

356
00:17:00.066 --> 00:17:01.406
through here, but now
that we just added

357
00:17:01.406 --> 00:17:03.766
that second code path, it's
not a great idea anymore.

358
00:17:04.486 --> 00:17:07.266
The reason why this isn't a good
idea is because it's possible

359
00:17:07.266 --> 00:17:09.665
for us to come through
this method one time

360
00:17:09.665 --> 00:17:12.596
with a completion handler,
stash it away in our property

361
00:17:13.116 --> 00:17:16.046
and then before that refresh
is finished, we'll come in here

362
00:17:16.046 --> 00:17:17.435
with a different
completion handler,

363
00:17:18.086 --> 00:17:20.675
assign it to the property which
will overwrite the first one.

364
00:17:20.675 --> 00:17:23.146
That means the first completion
handler will never get called.

365
00:17:24.346 --> 00:17:25.915
One of the most important things

366
00:17:25.986 --> 00:17:28.286
about the UI application
delegate callback is

367
00:17:28.286 --> 00:17:29.746
that we call the
completion handler.

368
00:17:30.156 --> 00:17:33.136
Like I said a minute ago,
that's the signal to the system

369
00:17:33.136 --> 00:17:35.346
that we're done with everything,
we're ready to be snapshotted.

370
00:17:35.926 --> 00:17:38.886
If I don't call the completion
handler, bad things will happen.

371
00:17:40.326 --> 00:17:43.536
So, instead of signing it to
a property, let's just get rid

372
00:17:43.536 --> 00:17:46.696
of that and let's pass the
completion handler all the way

373
00:17:46.696 --> 00:17:47.586
through the refresh.

374
00:17:47.586 --> 00:17:49.996
So I'm going to delete that
line, I'm going to get rid

375
00:17:49.996 --> 00:17:55.066
of my property and then
I'll just change this method

376
00:17:55.066 --> 00:17:57.796
to fetch new posts with
completion handler.

377
00:17:58.396 --> 00:18:03.346
And then that means I need
to update the signature

378
00:17:58.396 --> 00:18:03.346
And then that means I need
to update the signature

379
00:18:04.066 --> 00:18:07.036
to fetch new posts with
completion handler.

380
00:18:07.036 --> 00:18:09.376
And then inside this method,

381
00:18:09.376 --> 00:18:12.536
it's look like we were
referencing the completion

382
00:18:12.536 --> 00:18:14.466
handler property that
we just get rid of.

383
00:18:14.926 --> 00:18:18.506
So instead, let's just reference
the completion handler argument.

384
00:18:22.086 --> 00:18:26.856
OK, looks like everything's
going good so far.

385
00:18:26.856 --> 00:18:28.896
Let me run my app and make
sure I didn't break anything.

386
00:18:33.616 --> 00:18:35.426
OK, here we are,
looks good so far.

387
00:18:36.046 --> 00:18:38.166
If I pull the refresh,
all right,

388
00:18:39.516 --> 00:18:41.976
we've got three new posts,
they're marked in blue

389
00:18:41.976 --> 00:18:47.946
and their timestamp is 2:24
p.m. Now, I need to test

390
00:18:47.946 --> 00:18:50.716
that my app can actually fetch
new content in the background.

391
00:18:51.306 --> 00:18:54.066
There are two very important
scenarios you need to test here.

392
00:18:54.426 --> 00:18:56.776
The first scenario is
having your app launched

393
00:18:56.966 --> 00:18:58.556
in the background to
fetch new content.

394
00:18:59.236 --> 00:19:01.456
The second scenario is
having your app resumed

395
00:18:59.236 --> 00:19:01.456
The second scenario is
having your app resumed

396
00:19:01.456 --> 00:19:02.956
in the background to
fetch new content.

397
00:19:03.816 --> 00:19:05.316
Let's test the resume
case first.

398
00:19:05.366 --> 00:19:10.416
I recommend testing the resume
case by creating a new scheme.

399
00:19:10.416 --> 00:19:12.676
So what I'm going to do is
I'm going to come up here

400
00:19:12.676 --> 00:19:15.186
to my scheme list and I'm
going to hit Manage Schemes.

401
00:19:16.546 --> 00:19:18.336
And I just have one the default,

402
00:19:18.336 --> 00:19:22.026
so I'm just going
to duplicate that.

403
00:19:22.236 --> 00:19:27.006
Let's call it Clowntown
Background Fetch with an R.

404
00:19:27.886 --> 00:19:33.806
And if I zoom in here, in
the Run section of the scheme

405
00:19:33.806 --> 00:19:36.336
under the Options tab,
there's a checkbox down here

406
00:19:36.336 --> 00:19:38.316
that is Launch Due to a
Background Fetch Event.

407
00:19:38.316 --> 00:19:39.446
So I'm just going to check that,

408
00:19:40.766 --> 00:19:44.836
and zoom out and
then hit OK, OK.

409
00:19:45.396 --> 00:19:48.866
Going to sneakily
clear this, OK.

410
00:19:49.216 --> 00:19:51.066
And now I'm going to run my app.

411
00:19:53.116 --> 00:19:55.526
What you'll notice here is
that the simulator launched

412
00:19:55.526 --> 00:19:57.776
and my app is running but
it's not in the foreground.

413
00:19:58.296 --> 00:19:59.436
That's because it was launched

414
00:19:59.436 --> 00:20:01.556
into the background
to fetch new content.

415
00:19:59.436 --> 00:20:01.556
into the background
to fetch new content.

416
00:20:02.596 --> 00:20:04.636
If I look down here in
the Syslog for my app,

417
00:20:05.136 --> 00:20:09.846
it says that we fetched one new
post and then saved a snapshot.

418
00:20:09.946 --> 00:20:12.446
Let's resume my app and
see what it looks like.

419
00:20:13.526 --> 00:20:16.576
OK great, we have our one
new post, it's marked in blue

420
00:20:16.576 --> 00:20:18.836
and the timestamp is 2:26 p.m.

421
00:20:18.836 --> 00:20:20.746
That was just a couple
of seconds ago.

422
00:20:20.746 --> 00:20:22.356
So the launch case worked.

423
00:20:22.356 --> 00:20:26.046
Now we need to test
the resume case.

424
00:20:30.976 --> 00:20:34.726
Xcode 5 has added
a new menu item

425
00:20:34.726 --> 00:20:37.546
in the Debug menu called
Simulate Background Fetch

426
00:20:38.146 --> 00:20:39.296
that will test the resume case.

427
00:20:39.296 --> 00:20:43.326
So I'm just going to click that
and if I come back over here

428
00:20:43.326 --> 00:20:45.216
at the simulator, it's
still running my apps not

429
00:20:45.216 --> 00:20:47.916
in the foreground because it
was resumed in the background.

430
00:20:48.736 --> 00:20:50.306
And if I check down
here on the Syslog,

431
00:20:50.306 --> 00:20:53.036
it looks like we
fetched another new post

432
00:20:53.166 --> 00:20:54.416
and saved another snapshot.

433
00:20:55.786 --> 00:21:00.016
So let me resume my app and
see what it looks like now.

434
00:20:55.786 --> 00:21:00.016
So let me resume my app and
see what it looks like now.

435
00:21:00.256 --> 00:21:02.346
OK great, we have one
new post from Mr. Happy,

436
00:21:02.796 --> 00:21:06.576
it's the blue post and
its timestamp is 2:26:52

437
00:21:06.576 --> 00:21:08.986
which is just a couple
of seconds ago.

438
00:21:10.266 --> 00:21:13.186
So we just verified that my app
could be launched and resumed

439
00:21:13.186 --> 00:21:14.686
in the background to
fetch new content.

440
00:21:14.686 --> 00:21:17.356
And now it's possible for
my app to be up to date

441
00:21:17.356 --> 00:21:19.146
when the user launches my app.

442
00:21:19.696 --> 00:21:21.576
You've seen how easy it
is to update your app

443
00:21:22.146 --> 00:21:23.456
to fetch new content
in the background.

444
00:21:23.646 --> 00:21:24.366
It's not that hard.

445
00:21:25.276 --> 00:21:25.886
Back to you Dave.

446
00:21:27.516 --> 00:21:33.436
[ Applause ]

447
00:21:33.936 --> 00:21:34.386
>> Thanks Brittany.

448
00:21:35.696 --> 00:21:37.766
So what did we learn?

449
00:21:38.506 --> 00:21:39.946
It's really, really easy

450
00:21:40.056 --> 00:21:41.976
to update your application
with the new APIs.

451
00:21:43.046 --> 00:21:45.096
We've made it intentionally
very simple.

452
00:21:45.576 --> 00:21:47.716
We think that it should be
really easy for you guys

453
00:21:47.716 --> 00:21:48.846
to get started even today.

454
00:21:50.466 --> 00:21:53.006
But two main points that
Brittany made, make sure to pass

455
00:21:53.006 --> 00:21:56.066
that completion handler
all the way through so

456
00:21:56.066 --> 00:21:58.946
that every perform
fetch is bookended

457
00:21:58.946 --> 00:22:00.316
with calling the
completion handler

458
00:21:58.946 --> 00:22:00.316
with calling the
completion handler

459
00:22:01.166 --> 00:22:03.656
and calling the completion
handler with the proper status

460
00:22:03.656 --> 00:22:06.236
of whether or not there's
new data, there's no data

461
00:22:06.636 --> 00:22:08.336
or failed will give you--

462
00:22:08.336 --> 00:22:11.676
will give us the
system more information

463
00:22:11.736 --> 00:22:15.436
about how your application
is working.

464
00:22:16.266 --> 00:22:20.046
So next, I wanted to pull
the curtain back a little bit

465
00:22:20.356 --> 00:22:24.996
so that you guys can get a sense
of how Background Fetch works

466
00:22:24.996 --> 00:22:28.836
under the-- behind
the curtains so that--

467
00:22:29.066 --> 00:22:31.686
so that you can design your
features in the right way.

468
00:22:32.736 --> 00:22:34.716
So the first thing that
you need to know is

469
00:22:34.776 --> 00:22:39.096
that this system iOS
schedules these fetches.

470
00:22:40.006 --> 00:22:41.626
It's important that
the system do this

471
00:22:41.626 --> 00:22:43.946
so that these opportunities
can be coalesced

472
00:22:43.946 --> 00:22:45.036
across applications.

473
00:22:45.366 --> 00:22:48.186
That means that multiple
applications get an opportunity

474
00:22:48.186 --> 00:22:52.456
fetch at the same time so
that we can optimize power,

475
00:22:52.906 --> 00:22:53.996
that's really important.

476
00:22:54.346 --> 00:22:57.476
You know, these phones
have great batteries

477
00:22:57.886 --> 00:23:00.796
but you do too many of these
things at the same time and--

478
00:22:57.886 --> 00:23:00.796
but you do too many of these
things at the same time and--

479
00:23:00.796 --> 00:23:03.256
or you do too many of these
things over the course

480
00:23:03.256 --> 00:23:06.586
of the day and that can
really wear it down.

481
00:23:07.016 --> 00:23:09.816
The second thing to note
is that the system looks

482
00:23:09.816 --> 00:23:14.486
at how users actually use their
device on the device in order

483
00:23:14.486 --> 00:23:17.566
to see when they're
typically using it.

484
00:23:17.986 --> 00:23:20.556
So that means it does a bit of
prediction in order to figure

485
00:23:20.556 --> 00:23:22.776
out what the right
time to use that--

486
00:23:23.216 --> 00:23:24.866
what the right time to
update that application.

487
00:23:27.106 --> 00:23:28.776
The other thing that it
does is it's sensitive

488
00:23:28.806 --> 00:23:30.066
to energy in daily users.

489
00:23:30.166 --> 00:23:33.656
That means that it can look
at how much data is being used

490
00:23:33.656 --> 00:23:35.926
and how much energy
is being used in order

491
00:23:35.926 --> 00:23:37.426
to manage these fetches
correctly

492
00:23:37.516 --> 00:23:41.446
so that we don't have users
with poor battery life

493
00:23:41.446 --> 00:23:46.816
and excessive data plans.

494
00:23:46.816 --> 00:23:50.496
And as we've mentioned before,
this is completely indifferent

495
00:23:50.496 --> 00:23:51.916
to your actual app
running state.

496
00:23:51.916 --> 00:23:54.366
If you happen to be
running, you'll get resumed.

497
00:23:55.326 --> 00:23:58.666
If your application is no longer
running, you'll get launched.

498
00:23:58.936 --> 00:24:02.376
So let me give you a
small example about--

499
00:23:58.936 --> 00:24:02.376
So let me give you a
small example about--

500
00:24:03.026 --> 00:24:06.576
of what I mean by-- when I
say adapts to user activity.

501
00:24:09.256 --> 00:24:12.726
So let's say the user
uses their device

502
00:24:12.726 --> 00:24:15.576
in this particular pattern
on the first day and uses it

503
00:24:15.576 --> 00:24:19.026
in a slightly different way
on the second day and so on.

504
00:24:20.616 --> 00:24:24.366
The device can observe this
pattern so it can really figure

505
00:24:24.366 --> 00:24:27.786
out that yes, the user uses
this INN app in the morning.

506
00:24:28.606 --> 00:24:29.876
And they use it around
lunch time

507
00:24:30.476 --> 00:24:31.666
and then they use
it in the evening.

508
00:24:31.666 --> 00:24:33.906
And that's a really
simple thing to observe

509
00:24:34.256 --> 00:24:36.816
because then it allows us to
actually make this prediction

510
00:24:36.816 --> 00:24:38.196
about when those apps get used.

511
00:24:38.846 --> 00:24:42.906
And the best time to update
an application's info is just

512
00:24:42.906 --> 00:24:44.656
before the user launches it.

513
00:24:45.506 --> 00:24:48.746
So that the data is as
fresh and up to date

514
00:24:48.746 --> 00:24:50.856
as possible before
they get into it.

515
00:24:51.906 --> 00:24:56.656
So it allows us to
make this prediction.

516
00:24:56.706 --> 00:24:58.736
So three main points
that you should remember.

517
00:24:59.536 --> 00:25:02.486
It learns these patterns
based on actual device usage.

518
00:24:59.536 --> 00:25:02.486
It learns these patterns
based on actual device usage.

519
00:25:03.516 --> 00:25:07.306
It coalesces, fetches across the
applications at the same time.

520
00:25:08.066 --> 00:25:11.366
And this system allows us

521
00:25:11.366 --> 00:25:14.336
to avoid frequent fetching
during periods of inactivity.

522
00:25:14.726 --> 00:25:17.816
So of course, it would be
inefficient both for the device,

523
00:25:18.116 --> 00:25:21.926
as well as your servers, if
we have the system fetching,

524
00:25:22.146 --> 00:25:24.616
you know, every 15 minutes
or in the middle of the night

525
00:25:24.676 --> 00:25:28.426
when the user is asleep.

526
00:25:28.546 --> 00:25:30.726
So that's Background Fetch.

527
00:25:31.336 --> 00:25:33.916
Now, we think this is going
to be incredibly useful

528
00:25:33.916 --> 00:25:36.086
for many different
kinds of applications,

529
00:25:37.076 --> 00:25:39.256
we thought about
social networking feeds,

530
00:25:39.366 --> 00:25:43.616
news and entertainment
applications, blog aggregators,

531
00:25:43.996 --> 00:25:45.596
weather apps, finance apps.

532
00:25:46.316 --> 00:25:48.556
And we think that you can use
this in conjunction with one

533
00:25:48.556 --> 00:25:50.736
of the other APIs that we're
going to be talking about soon,

534
00:25:51.006 --> 00:25:53.006
call background transfers
in order

535
00:25:53.006 --> 00:25:56.466
to download even bigger
things like photos or videos

536
00:25:56.766 --> 00:25:58.816
to allow you to get
an experience

537
00:25:58.816 --> 00:26:00.706
where the user can pop
up in your application

538
00:25:58.816 --> 00:26:00.706
where the user can pop
up in your application

539
00:26:01.056 --> 00:26:02.936
and instantly start
viewing, you know,

540
00:26:03.196 --> 00:26:05.076
large beautiful photos
or videos.

541
00:26:09.336 --> 00:26:12.486
So next, let's talk about
Remote Notifications.

542
00:26:13.026 --> 00:26:19.396
So if any of you have a kind of
messaging functionality inside

543
00:26:19.396 --> 00:26:22.216
of your application, I'm sure
you're familiar with this flow.

544
00:26:22.286 --> 00:26:28.666
If I send a message to somebody
over my new application here,

545
00:26:30.376 --> 00:26:34.016
what happens is my server send
a push to the Apple servers

546
00:26:34.016 --> 00:26:35.386
and that sends a
push to the device

547
00:26:35.926 --> 00:26:38.536
and that causes a
notification banner to show

548
00:26:38.536 --> 00:26:39.286
up on the lock screen.

549
00:26:41.686 --> 00:26:45.196
When the user goes and slides
to view that notification,

550
00:26:45.586 --> 00:26:48.016
only then is your
application launched or resumed

551
00:26:48.676 --> 00:26:51.276
and then that's when you go
and retrieve the full message

552
00:26:51.806 --> 00:26:54.336
so that it's ready to view.

553
00:26:54.916 --> 00:26:57.726
Now, this can leave
users with a bit of lag

554
00:26:57.836 --> 00:27:02.236
where they see either the old
message or an old transcript

555
00:26:57.836 --> 00:27:02.236
where they see either the old
message or an old transcript

556
00:27:02.236 --> 00:27:03.546
that they were looking
at before.

557
00:27:04.426 --> 00:27:07.296
And then only after a few
seconds does it actually update

558
00:27:07.506 --> 00:27:09.566
to show them their message.

559
00:27:10.126 --> 00:27:13.126
So we flipped this around.

560
00:27:13.976 --> 00:27:18.996
In iOS 7, you can actually get
woken up before the user sees

561
00:27:18.996 --> 00:27:20.036
that banner notification.

562
00:27:20.356 --> 00:27:22.946
So you can immediately
retrieve that message

563
00:27:23.376 --> 00:27:26.126
and then make it ready
for viewing so that

564
00:27:26.126 --> 00:27:28.516
when the user just swipes
to view on the lock screen,

565
00:27:29.006 --> 00:27:30.506
they can see that
message right away

566
00:27:30.536 --> 00:27:32.876
and we think this
is really powerful.

567
00:27:33.516 --> 00:27:41.526
[ Applause ]

568
00:27:42.026 --> 00:27:46.916
In addition, you can omit that
alert line and that'll allow you

569
00:27:46.916 --> 00:27:49.356
to actually send a
silent notification.

570
00:27:50.126 --> 00:27:51.656
And this gets delivered
in the background.

571
00:27:51.656 --> 00:27:53.856
Again, if your app wasn't
running, we'd launch it.

572
00:27:54.196 --> 00:27:55.286
If it is running, we resume it.

573
00:27:56.506 --> 00:27:58.516
And you can go and retrieve
whatever content you need

574
00:27:58.516 --> 00:27:59.176
to at this point.

575
00:27:59.846 --> 00:28:02.656
Now, this is incredibly
powerful.

576
00:27:59.846 --> 00:28:02.656
Now, this is incredibly
powerful.

577
00:28:02.736 --> 00:28:05.776
We think there's a lot of
applications that we'll be able

578
00:28:05.776 --> 00:28:07.966
to take advantage of
this and do really,

579
00:28:07.966 --> 00:28:10.206
really great auto
behavior with it.

580
00:28:10.976 --> 00:28:13.876
There are a couple
things to note.

581
00:28:14.116 --> 00:28:17.976
There's a new protocol that
we're introducing this year

582
00:28:19.196 --> 00:28:21.536
that is optional right now.

583
00:28:21.536 --> 00:28:24.526
That also was intended
to support silent pushes.

584
00:28:25.246 --> 00:28:29.716
And you should go to the push
notifications lab on Wednesday

585
00:28:29.716 --> 00:28:32.276
to learn more about it.

586
00:28:32.276 --> 00:28:34.606
We think many providers
will get a kick

587
00:28:34.606 --> 00:28:36.556
out of what the new
protocol can do.

588
00:28:36.746 --> 00:28:42.106
But for you guys, all you need
to know is that you just need

589
00:28:42.106 --> 00:28:44.026
to provide this content
available flag here

590
00:28:44.306 --> 00:28:47.266
and you can set silent
notifications that gets

591
00:28:47.266 --> 00:28:48.016
to your app up to date.

592
00:28:49.356 --> 00:28:50.286
So let's take a look about the--

593
00:28:50.286 --> 00:28:52.216
at the API in a little
bit more detail.

594
00:28:52.216 --> 00:28:55.096
So this should be
a familiar pattern.

595
00:28:55.426 --> 00:28:57.996
You just set this
Remote Notification key

596
00:28:57.996 --> 00:28:59.006
in the UI background modes

597
00:28:59.056 --> 00:29:01.866
or use the X code
feature capabilities menu

598
00:28:59.056 --> 00:29:01.866
or use the X code
feature capabilities menu

599
00:29:01.866 --> 00:29:04.996
to enable this.

600
00:29:05.206 --> 00:29:10.656
You set content-available 1
in your APS payload and then

601
00:29:10.846 --> 00:29:13.126
when your app is launched in
the background or resumed,

602
00:29:14.006 --> 00:29:16.036
you will get a,
didReceiveRemoteNotification

603
00:29:16.496 --> 00:29:17.436
with a completion handler.

604
00:29:18.426 --> 00:29:21.086
So that will allow you to go
and retrieve that new message

605
00:29:21.086 --> 00:29:22.296
or whatever you need to do.

606
00:29:23.766 --> 00:29:25.756
And then call the completion
handler when you're done.

607
00:29:27.306 --> 00:29:30.456
So again, in order to do a
silent push, all you need

608
00:29:30.456 --> 00:29:38.476
to do is omit that alert or
sound entry in the APS payload.

609
00:29:38.616 --> 00:29:41.896
Important thing to realize about
silent notifications though is

610
00:29:42.146 --> 00:29:43.146
that the rate limited.

611
00:29:44.086 --> 00:29:47.186
With normal notifications,
we fully expect users

612
00:29:47.186 --> 00:29:48.186
to be able to manage that.

613
00:29:48.296 --> 00:29:49.566
If you're annoying your user,

614
00:29:49.856 --> 00:29:51.866
they will clearly do
something about it.

615
00:29:52.536 --> 00:29:54.906
But with silent notifications,
obviously,

616
00:29:54.906 --> 00:29:56.746
if the user doesn't have
any indication of them,

617
00:29:57.126 --> 00:29:58.406
they can't manage
that on their own.

618
00:29:59.346 --> 00:30:04.956
So iOS and our push servers will
manage a rate limit for you.

619
00:29:59.346 --> 00:30:04.956
So iOS and our push servers will
manage a rate limit for you.

620
00:30:05.926 --> 00:30:08.376
And the thing you need
to get out of this is

621
00:30:08.376 --> 00:30:11.396
that we're not asking you

622
00:30:11.396 --> 00:30:16.726
to hold back your silent
push notifications.

623
00:30:17.236 --> 00:30:19.416
We want you to send
them as frequently

624
00:30:19.416 --> 00:30:20.706
as your application dictates.

625
00:30:22.156 --> 00:30:23.476
And the thing you
need to realize is

626
00:30:23.526 --> 00:30:25.536
that we've done the work
for you to make sure

627
00:30:25.536 --> 00:30:29.756
that the device can protect
itself and that it can make sure

628
00:30:29.756 --> 00:30:30.986
that it doesn't run out of power

629
00:30:30.986 --> 00:30:33.116
because it's using too
many push notifications.

630
00:30:34.106 --> 00:30:37.416
So, I just want to let you know
how this works so that you can--

631
00:30:37.576 --> 00:30:39.206
as you're going ahead
and testing this

632
00:30:39.456 --> 00:30:43.196
that you're not surprised by the
way the pushes are rate limited.

633
00:30:44.516 --> 00:30:48.356
So when the push rate is
completely acceptable and,

634
00:30:48.356 --> 00:30:51.706
you know, let's say you're
sending only a couple an hour,

635
00:30:51.706 --> 00:30:53.736
something like that, both normal

636
00:30:53.736 --> 00:30:56.006
and silent push notifications
are delivered immediately.

637
00:30:56.106 --> 00:30:57.946
You have that same quality
service that we have today,

638
00:30:58.266 --> 00:31:00.516
it just sends straight
through and of course,

639
00:30:58.266 --> 00:31:00.516
it just sends straight
through and of course,

640
00:31:00.886 --> 00:31:01.776
they don't wake up the device.

641
00:31:02.496 --> 00:31:04.326
Or rather they don't
wake the screen up.

642
00:31:05.336 --> 00:31:07.106
When that push rate is too high,

643
00:31:07.526 --> 00:31:09.216
silent pushes can
then get stored

644
00:31:09.216 --> 00:31:11.356
for later delivery
on our servers.

645
00:31:11.696 --> 00:31:13.976
And for those of
you who are familiar

646
00:31:13.976 --> 00:31:15.356
with the way pushes work today,

647
00:31:15.866 --> 00:31:18.546
we still have the same
storage guarantee, we store one

648
00:31:18.546 --> 00:31:21.056
on the server, and if there's
another silent notification

649
00:31:21.056 --> 00:31:22.856
that comes in when the push
rate is still too high,

650
00:31:23.256 --> 00:31:26.776
that will get stored
in the server.

651
00:31:26.776 --> 00:31:30.776
Then, if there's any
other communication

652
00:31:30.776 --> 00:31:33.696
between the Apple push
service and the device,

653
00:31:34.326 --> 00:31:39.456
we'll actually put that silent
notification on the back of that

654
00:31:39.456 --> 00:31:42.186
and actually piggyback that
along, send along to the device.

655
00:31:42.606 --> 00:31:44.426
So we're not halting
your pushes.

656
00:31:44.706 --> 00:31:46.816
All we're doing is delaying
it by just a little bit

657
00:31:46.876 --> 00:31:49.696
until when it's a good
time for the device

658
00:31:49.796 --> 00:31:51.566
to receive it based on power.

659
00:31:53.036 --> 00:31:55.636
So again, there's
nothing special

660
00:31:55.636 --> 00:31:56.616
that you need to do here.

661
00:31:56.996 --> 00:32:00.306
All you need to do is
realize that the device

662
00:31:56.996 --> 00:32:00.306
All you need to do is
realize that the device

663
00:32:00.356 --> 00:32:02.516
and the servers will take
care of the rate for you,

664
00:32:02.896 --> 00:32:03.696
that you can just send it

665
00:32:03.696 --> 00:32:07.306
when it's appropriate
for your application.

666
00:32:07.756 --> 00:32:10.896
So here're some really great
examples that we came up with.

667
00:32:11.256 --> 00:32:13.416
Obviously, like we
had in the example,

668
00:32:13.416 --> 00:32:16.656
instant messaging is a
perfect example for this.

669
00:32:16.656 --> 00:32:19.526
We think picture messaging
is especially important here

670
00:32:19.886 --> 00:32:22.446
because oftentimes, when
you get that message,

671
00:32:22.786 --> 00:32:25.386
the application needs to then
download that whole photo.

672
00:32:25.776 --> 00:32:27.836
So now, you can download
it in the background

673
00:32:28.266 --> 00:32:31.156
and that picture is completely
ready to go once users use that.

674
00:32:31.346 --> 00:32:33.546
We think this is
really, really awesome.

675
00:32:34.046 --> 00:32:35.806
This is really great for email.

676
00:32:36.206 --> 00:32:38.296
So if you're already
sending push notifications

677
00:32:39.106 --> 00:32:41.526
as email notifications,
right, you can then go

678
00:32:41.526 --> 00:32:43.296
and fetch the entire mailbox.

679
00:32:45.026 --> 00:32:46.696
We think silent notification
is being used

680
00:32:46.696 --> 00:32:47.996
for completely different things.

681
00:32:48.306 --> 00:32:51.746
If you have episodic content,

682
00:32:51.746 --> 00:32:54.216
you can get those downloaded
using the Background

683
00:32:54.216 --> 00:32:54.916
Transfer Service.

684
00:32:55.226 --> 00:32:59.616
There are applications out
there that implement this kind

685
00:32:59.616 --> 00:33:02.956
of read some stories later
kind of functionality.

686
00:32:59.616 --> 00:33:02.956
of read some stories later
kind of functionality.

687
00:33:03.256 --> 00:33:06.366
And some applications
have actually gone so far

688
00:33:06.366 --> 00:33:09.396
as to implement a
fetching behavior

689
00:33:09.626 --> 00:33:11.736
on the back of region
monitoring.

690
00:33:12.066 --> 00:33:15.386
So that when you go home or you
leave work, you can actually go

691
00:33:15.386 --> 00:33:16.496
and download content then.

692
00:33:17.396 --> 00:33:19.196
We think that this is
a much better model.

693
00:33:20.186 --> 00:33:23.016
All you do in that case is
when the user add something

694
00:33:23.016 --> 00:33:25.686
to that list, selling the silent
notification to the device

695
00:33:25.986 --> 00:33:28.766
because A, the user
doesn't need to be notified

696
00:33:28.766 --> 00:33:30.136
that they added something
to that list.

697
00:33:30.486 --> 00:33:31.336
So that should be silent.

698
00:33:31.816 --> 00:33:33.886
And then the application
can download that content

699
00:33:34.336 --> 00:33:35.486
that they want to read offline.

700
00:33:35.946 --> 00:33:37.806
So we think this is
actually really awesome

701
00:33:37.806 --> 00:33:40.376
and it will work really well.

702
00:33:40.476 --> 00:33:45.136
For Purchase Syncing, so if
you have a library of magazines

703
00:33:45.136 --> 00:33:47.866
or comic books or something,
and the user buys something

704
00:33:47.866 --> 00:33:50.856
on your website, this can be a
great way to send a notification

705
00:33:50.856 --> 00:33:54.026
to the device so that it can
go download that new content

706
00:33:54.026 --> 00:33:55.236
so it's available offline.

707
00:33:55.236 --> 00:33:58.946
Or if you have a File
Syncing application

708
00:33:58.946 --> 00:34:00.196
with documents, same thing.

709
00:33:58.946 --> 00:34:00.196
with documents, same thing.

710
00:34:00.726 --> 00:34:04.776
Just send that notification
when it's ready, and then go.

711
00:34:05.016 --> 00:34:06.416
So let's talk a little bit

712
00:34:06.416 --> 00:34:10.416
about how silent
notifications can work

713
00:34:10.416 --> 00:34:14.366
with background transfers to
provide a brand new feature,

714
00:34:15.056 --> 00:34:17.556
auto downloading in
a TV application.

715
00:34:18.255 --> 00:34:22.106
So let's say some TV network
has an application out there

716
00:34:22.106 --> 00:34:24.846
that allows you to do
offline content viewing.

717
00:34:25.386 --> 00:34:28.815
And they want to offer
a system where, hey,

718
00:34:28.815 --> 00:34:31.076
every week when that
new episode of the show

719
00:34:31.436 --> 00:34:35.196
that the user's favorited is
ready that it can download

720
00:34:35.196 --> 00:34:37.766
onto the device so that
they can view it at anytime.

721
00:34:39.166 --> 00:34:41.295
So the user asks
for new episodes

722
00:34:41.295 --> 00:34:42.536
to be downloaded
when it's available.

723
00:34:43.136 --> 00:34:45.436
When that episode is available,

724
00:34:46.556 --> 00:34:49.525
the content provider can
just send a silent push

725
00:34:49.525 --> 00:34:51.076
to the devices that have
signed up for the stuff.

726
00:34:52.366 --> 00:34:54.295
And so the app going to
wake up and can check

727
00:34:54.295 --> 00:34:56.866
for any newly available
episodes and queue them

728
00:34:56.866 --> 00:34:58.366
into the Background
Transfer Service

729
00:34:58.666 --> 00:35:00.966
so the application can go
back to sleep at this point

730
00:34:58.666 --> 00:35:00.966
so the application can go
back to sleep at this point

731
00:35:01.556 --> 00:35:04.116
and then once it's completed,
the application just wakes up,

732
00:35:04.116 --> 00:35:09.526
updates the UI and then post a
local notification letting the

733
00:35:09.526 --> 00:35:12.616
user know that it
has new content.

734
00:35:17.696 --> 00:35:20.976
So the same thing would kind of
go for File Syncing application.

735
00:35:20.976 --> 00:35:23.286
If you, let's say,
favorite a particular file

736
00:35:23.286 --> 00:35:24.846
and then you want it
updated all the time,

737
00:35:25.396 --> 00:35:27.656
whether that file changes,
let's say, if they're editing

738
00:35:27.656 --> 00:35:30.486
on their desktop, that service
can send a silent push right

739
00:35:30.486 --> 00:35:32.576
away and because it's rate
limited already, you don't need

740
00:35:32.576 --> 00:35:35.246
to do anything to make sure
that's going at the right speed.

741
00:35:36.666 --> 00:35:39.396
So once that app
wakes up, it can check

742
00:35:39.396 --> 00:35:43.216
for any newly available files
and enqueue those file diffs

743
00:35:43.306 --> 00:35:45.486
into the transfer
service and then the UI--

744
00:35:45.486 --> 00:35:50.706
I'm sorry, the application will
then wake up and update its UI.

745
00:35:51.276 --> 00:35:53.146
So receive push notifications

746
00:35:53.146 --> 00:35:54.456
at the background,
we think this is big.

747
00:35:55.236 --> 00:35:58.286
Silent pushers are rate
limited and that's intended

748
00:35:58.286 --> 00:36:02.706
to help save you
effort and time.

749
00:35:58.286 --> 00:36:02.706
to help save you
effort and time.

750
00:36:02.906 --> 00:36:05.826
So here were the two APIs that
we've talked about so far.

751
00:36:06.266 --> 00:36:10.246
And when you're sitting down
and looking to enhance one

752
00:36:10.246 --> 00:36:13.926
of your features with this,
we want you to kind of keep

753
00:36:13.926 --> 00:36:16.376
in consideration why you
would pick one or the other.

754
00:36:17.656 --> 00:36:18.796
You would typically use fetch

755
00:36:19.076 --> 00:36:21.676
when the content is
really interesting

756
00:36:21.676 --> 00:36:22.856
but not quite critical.

757
00:36:22.856 --> 00:36:23.936
It's not really important

758
00:36:23.936 --> 00:36:25.456
to let the user know
about it right away.

759
00:36:26.336 --> 00:36:27.636
Whereas Remote Notifications

760
00:36:27.636 --> 00:36:29.116
that would be a lot more
immediate, you know,

761
00:36:29.116 --> 00:36:31.986
it's a message from their
friend or it needs as much time

762
00:36:31.986 --> 00:36:34.076
as possible in order
to download.

763
00:36:34.666 --> 00:36:40.726
If the content was available all
the time very, very frequently,

764
00:36:41.136 --> 00:36:45.646
it can be really burdensome on
power as well as your servers

765
00:36:45.996 --> 00:36:50.806
to notify all the applications
about it whenever that happens.

766
00:36:51.196 --> 00:36:52.976
So we think that that's
a much better use case

767
00:36:52.976 --> 00:36:53.826
for Background Fetch.

768
00:36:53.826 --> 00:36:56.436
So for example, I
don't know about you

769
00:36:56.436 --> 00:36:58.376
but my social networking
feeds always look

770
00:36:58.376 --> 00:37:01.746
like they're updating
every single second.

771
00:36:58.376 --> 00:37:01.746
like they're updating
every single second.

772
00:37:02.566 --> 00:37:07.406
And for Remote Notifications,
it's fine if it's very frequent

773
00:37:07.406 --> 00:37:10.536
but maybe that's more sporadic
so if I'm working on a document

774
00:37:10.536 --> 00:37:13.696
on my PC and it's supposed
to sync to my phone,

775
00:37:14.206 --> 00:37:17.186
that would be sporadic but maybe
kind of frequent for that period

776
00:37:17.186 --> 00:37:18.956
of time, where Remote
Notifications would be the

777
00:37:18.956 --> 00:37:22.046
appropriate thing to use there.

778
00:37:22.256 --> 00:37:29.016
OK, so let's dive into the
Background Transfer Service.

779
00:37:29.016 --> 00:37:34.496
So in iOS 6, using the UI
application background test API,

780
00:37:35.436 --> 00:37:38.876
applications can transfer files
while in the foreground or even

781
00:37:38.876 --> 00:37:40.616
for a few minutes when
the application returns

782
00:37:40.616 --> 00:37:41.226
to the background.

783
00:37:41.766 --> 00:37:44.186
But that's limited sort
of arbitrarily by time.

784
00:37:44.446 --> 00:37:46.436
You only get a few minutes
to download or upload

785
00:37:46.826 --> 00:37:50.216
and that can cause weird user
experience where, you know,

786
00:37:50.216 --> 00:37:51.696
maybe your video
didn't finish uploading.

787
00:37:53.066 --> 00:37:54.676
So in addition, you
couldn't kind

788
00:37:54.676 --> 00:37:58.116
of effectively download the
content or upload large assets.

789
00:37:59.116 --> 00:38:01.466
In iOS 7, we've changed this.

790
00:37:59.116 --> 00:38:01.466
In iOS 7, we've changed this.

791
00:38:01.846 --> 00:38:04.496
We're providing a service that
allows you to enqueue downloads

792
00:38:04.496 --> 00:38:07.396
and uploads that are managed
by the OS that continue even

793
00:38:07.396 --> 00:38:10.786
after your application
exits or the device reboots.

794
00:38:11.256 --> 00:38:12.546
It's not restricted by time.

795
00:38:12.746 --> 00:38:16.216
We intend this for you
to enqueue large things.

796
00:38:17.576 --> 00:38:20.216
You can enqueue it anytime,
either from the foreground.

797
00:38:20.376 --> 00:38:23.836
Let's say if the user decided
to upload a video or download,

798
00:38:24.186 --> 00:38:27.846
let's say an episodic content,
or from the background.

799
00:38:27.846 --> 00:38:29.906
So if you get woken up
for a Background Fetch

800
00:38:29.906 --> 00:38:32.416
or for Remote Notifications,
that's a great time

801
00:38:32.756 --> 00:38:36.246
to enqueue a transfer into
Background Transfer Service.

802
00:38:37.616 --> 00:38:39.886
And of course, your
application is woken

803
00:38:39.886 --> 00:38:43.316
up to handle authentication
errors or completion.

804
00:38:43.476 --> 00:38:45.476
So once it's done,
you can update your UI

805
00:38:45.716 --> 00:38:47.806
and make sure the user
sees it very prominently,

806
00:38:47.806 --> 00:38:49.816
that they have a new
piece of content.

807
00:38:51.846 --> 00:38:57.466
So let's just take a
quick look at the API.

808
00:38:57.616 --> 00:39:03.256
So we are introducing a new
class called NSURLSession today.

809
00:38:57.616 --> 00:39:03.256
So we are introducing a new
class called NSURLSession today.

810
00:39:03.606 --> 00:39:05.356
It's part of the
CFNetwork framework

811
00:39:05.816 --> 00:39:09.486
and I highly encourage you
to go to the What's New

812
00:39:09.486 --> 00:39:12.336
in Foundation Networking
talk as well

813
00:39:12.336 --> 00:39:14.776
as the foundation networking
lab and we'll have links

814
00:39:14.776 --> 00:39:15.446
at the end of the talk.

815
00:39:16.586 --> 00:39:18.256
So you create this NSURLSession,

816
00:39:18.306 --> 00:39:21.756
you configure it using a
background session configuration

817
00:39:21.756 --> 00:39:25.366
and then all you do is you
enqueue these NSURLSessionTasks

818
00:39:25.736 --> 00:39:28.346
that are associated with
an existing NSURLRequest.

819
00:39:28.636 --> 00:39:30.576
So any of the NSURLRequests
that you're doing right now,

820
00:39:30.576 --> 00:39:32.576
all you do is you attach
them to the session task

821
00:39:32.896 --> 00:39:34.266
and enqueue them
into the service.

822
00:39:34.706 --> 00:39:37.836
And this can be download
tasks or upload tasks

823
00:39:38.336 --> 00:39:39.536
and those just continue.

824
00:39:40.056 --> 00:39:44.836
And then once you're-- once
that transfer is complete,

825
00:39:45.846 --> 00:39:48.006
if you're in the background,
if you're not running

826
00:39:48.006 --> 00:39:50.626
or you have been suspended, your
application will get launched

827
00:39:50.626 --> 00:39:52.786
into background, you'll
get did finish launching

828
00:39:52.966 --> 00:39:55.756
and then you'll get this new
callback called handle events

829
00:39:55.756 --> 00:39:58.436
for background URL session
with a completion handler.

830
00:39:59.396 --> 00:40:01.076
And what this allows
you to do is reconnect

831
00:39:59.396 --> 00:40:01.076
And what this allows
you to do is reconnect

832
00:40:01.076 --> 00:40:03.886
to your NSURLSession by
providing a unique identifier.

833
00:40:04.306 --> 00:40:06.646
And that will allow you
to handle that new content

834
00:40:07.026 --> 00:40:10.426
so you can, for example,
you know, update your UI

835
00:40:10.426 --> 00:40:11.916
to prominently show
that there's--

836
00:40:11.996 --> 00:40:14.996
your upload is completed or
that your download is done.

837
00:40:15.986 --> 00:40:19.316
And then, of course, you want
to call the completion handler

838
00:40:19.316 --> 00:40:22.236
to make sure that the
system can go back to sleep

839
00:40:22.286 --> 00:40:26.716
and your snapshot gets taken.

840
00:40:28.366 --> 00:40:32.806
So within the transfer
service, we have this notion

841
00:40:32.806 --> 00:40:34.326
of a discretionary transfer.

842
00:40:35.086 --> 00:40:38.896
And discretionary transfers
help preserve battery life

843
00:40:38.896 --> 00:40:39.766
and data usage.

844
00:40:39.996 --> 00:40:42.496
And the way they do that is
that they're power managed

845
00:40:43.106 --> 00:40:44.846
and they also only go for Wi-Fi.

846
00:40:45.716 --> 00:40:48.866
So if you enqueue a
transfer from the background,

847
00:40:49.076 --> 00:40:50.996
these transfers will
always be discretionary.

848
00:40:51.686 --> 00:40:53.446
And if you're enqueuing
something let's say

849
00:40:53.446 --> 00:40:56.346
from the foreground, that
transfer can optionally request

850
00:40:56.346 --> 00:40:57.316
for it to be discretionary.

851
00:40:57.536 --> 00:40:59.956
So for example, if it's
something that is not--

852
00:41:01.016 --> 00:41:02.966
let's say, it needs to
happen at some point

853
00:41:02.966 --> 00:41:04.776
but the user didn't
say specifically,

854
00:41:04.776 --> 00:41:06.746
"I want this downloaded,"
that would be something

855
00:41:06.746 --> 00:41:08.276
that you would enqueue
as discretionary.

856
00:41:08.886 --> 00:41:12.486
So here're some examples.

857
00:41:12.876 --> 00:41:15.326
So this would be incredibly
useful for uploading photos

858
00:41:15.326 --> 00:41:16.636
and videos like we said before.

859
00:41:17.316 --> 00:41:20.776
Used in combination with some of
the existing multitasking modes,

860
00:41:21.056 --> 00:41:23.796
so for example, if you have
significant location change,

861
00:41:24.206 --> 00:41:27.136
and your user, for example,
flies to San Francisco,

862
00:41:27.526 --> 00:41:31.216
they can download, let's say,
new Map Packs and new tiles

863
00:41:31.216 --> 00:41:33.916
for the area in order to
automatically make sure

864
00:41:33.916 --> 00:41:35.796
that their navigation
application continues

865
00:41:35.796 --> 00:41:36.456
to work really well.

866
00:41:36.916 --> 00:41:41.196
This will help keep your app
up to date by downloading

867
00:41:41.196 --> 00:41:43.066
in the background number
of different things.

868
00:41:43.066 --> 00:41:47.156
Maybe even, you know,
podcast or game content.

869
00:41:47.536 --> 00:41:48.886
We think this will
be really great

870
00:41:48.886 --> 00:41:51.846
and users will get
a kick out of this.

871
00:41:52.066 --> 00:41:55.826
OK, so these are our three
new multitasking modes.

872
00:41:56.386 --> 00:41:57.556
We think they're
really excellent.

873
00:41:57.556 --> 00:42:00.276
We think that they add
a lot to the ecosystem

874
00:41:57.556 --> 00:42:00.276
We think that they add
a lot to the ecosystem

875
00:42:00.596 --> 00:42:06.466
and we really can't wait to
see what you guys do with it.

876
00:42:07.996 --> 00:42:09.286
So details.

877
00:42:09.836 --> 00:42:12.216
We have the viewed details that
we want to discuss with you

878
00:42:12.596 --> 00:42:15.896
to make sure that as you're
architecting your applications

879
00:42:15.896 --> 00:42:17.536
to take advantages of
these new opportunities

880
00:42:17.836 --> 00:42:20.336
that you do the right
things in order to kind

881
00:42:20.336 --> 00:42:21.806
of function well in the system.

882
00:42:23.056 --> 00:42:25.506
The first thing to realize is
that you get a limited amount

883
00:42:25.506 --> 00:42:26.596
of time to run to
the background.

884
00:42:27.196 --> 00:42:30.376
This wouldn't be very power
efficient if you were able

885
00:42:30.456 --> 00:42:32.006
to run for, let's
say 10 minutes.

886
00:42:32.426 --> 00:42:34.696
You're given about less than
a minute to finish your update

887
00:42:35.196 --> 00:42:36.936
and your fetch is in
parallel with other apps,

888
00:42:37.266 --> 00:42:38.856
which means that you
want to make sure

889
00:42:38.856 --> 00:42:41.896
that your CPU profile is
as minimal as possible

890
00:42:41.896 --> 00:42:42.806
and you're doing these updates.

891
00:42:43.306 --> 00:42:45.776
Obviously, since this is
designed for networking,

892
00:42:46.136 --> 00:42:47.666
we expect many of
your applications

893
00:42:47.666 --> 00:42:49.016
to use very little CPU time

894
00:42:49.296 --> 00:42:51.306
because you're just transferring
data for the most part.

895
00:42:51.956 --> 00:42:55.326
But you want to make sure to
use time profile and instruments

896
00:42:55.326 --> 00:42:56.966
to make sure that you
are using as much as--

897
00:42:57.126 --> 00:43:01.136
as little CPU time as possible
and that there's nothing obvious

898
00:42:57.126 --> 00:43:01.136
as little CPU time as possible
and that there's nothing obvious

899
00:43:01.166 --> 00:43:04.116
that you can get rid off.

900
00:43:04.216 --> 00:43:07.126
So, it's really important
that you also complete as soon

901
00:43:07.126 --> 00:43:09.846
as possible because if
you've been woken up,

902
00:43:10.416 --> 00:43:12.846
the device is going to
stay awake for as much time

903
00:43:12.846 --> 00:43:16.116
as it gave you until you
tell it to say, "I'm done,

904
00:43:16.116 --> 00:43:17.366
I can let the system
go to sleep."

905
00:43:17.366 --> 00:43:19.376
So it's important to
complete as soon as possible,

906
00:43:19.726 --> 00:43:22.326
call the completion handler,
let the device sleep.

907
00:43:24.616 --> 00:43:26.786
So the background task API.

908
00:43:27.706 --> 00:43:30.386
When it's called from
the Background Fetch AP--

909
00:43:30.716 --> 00:43:33.156
delegate or the Remote
Notification delegate

910
00:43:34.316 --> 00:43:36.036
or the background
transfer completion,

911
00:43:36.566 --> 00:43:39.776
your task will only be
given seconds to run

912
00:43:39.776 --> 00:43:41.076
to the background
rather than minutes.

913
00:43:41.986 --> 00:43:44.726
We realize that many of you
use the background task API

914
00:43:44.996 --> 00:43:48.996
to close database connections
or close file handlers

915
00:43:48.996 --> 00:43:50.486
or other system resources.

916
00:43:50.836 --> 00:43:53.456
And we want to let you continue
doing that but this is not a way

917
00:43:53.456 --> 00:43:56.106
for your application to run
for minutes and minutes on it.

918
00:43:58.116 --> 00:43:59.096
The next detail.

919
00:43:59.776 --> 00:44:01.296
So like I said before,
your snapshot

920
00:43:59.776 --> 00:44:01.296
So like I said before,
your snapshot

921
00:44:01.296 --> 00:44:03.776
and your state restoration
is saved

922
00:44:03.776 --> 00:44:05.136
after calling the
completion handler.

923
00:44:05.676 --> 00:44:07.506
You want to make sure it
configure your view hierarchy

924
00:44:07.506 --> 00:44:09.126
to hide sensitive
information like,

925
00:44:09.126 --> 00:44:10.326
let's say the user's passwords

926
00:44:10.326 --> 00:44:12.626
of your say password
management application.

927
00:44:13.446 --> 00:44:15.336
And like I said before,
you really want

928
00:44:15.336 --> 00:44:18.096
to use save restoration
to transition seamlessly

929
00:44:18.096 --> 00:44:19.866
from that cool snapshot

930
00:44:19.866 --> 00:44:22.746
of the app switcher
back to the application.

931
00:44:23.246 --> 00:44:28.216
Next up is a bit of privacy.

932
00:44:30.226 --> 00:44:33.046
We've always encouraged
you to use data protection

933
00:44:33.046 --> 00:44:34.546
when handling sensitive
user data.

934
00:44:35.006 --> 00:44:36.916
This is incredibly
important for privacy.

935
00:44:37.276 --> 00:44:41.486
We think that users come to
iOS and user applications

936
00:44:41.526 --> 00:44:46.136
because it's a secure way
of using their device.

937
00:44:46.466 --> 00:44:49.396
And so a lot of you
should be familiar

938
00:44:49.396 --> 00:44:51.666
with this NSFileProtection API.

939
00:44:53.106 --> 00:44:54.416
Just to explain just
a little bit.

940
00:44:54.776 --> 00:44:59.476
Of course, there is a Data
Protection lab that you can go

941
00:44:59.476 --> 00:45:01.176
to and we'll have a link
at the end of the session,

942
00:44:59.476 --> 00:45:01.176
to and we'll have a link
at the end of the session,

943
00:45:02.426 --> 00:45:04.576
but let's explain
this for a second.

944
00:45:04.676 --> 00:45:06.996
So we've got
NSFileProtectionComplete.

945
00:45:07.446 --> 00:45:10.886
What that means is that
whenever the device is unlocked

946
00:45:11.046 --> 00:45:13.966
and actively being used,
these files are available.

947
00:45:13.966 --> 00:45:15.586
You can use them as normal.

948
00:45:15.586 --> 00:45:20.486
But when the device is locked,
those files are inaccessible.

949
00:45:21.506 --> 00:45:25.156
And of course, the low
means that these files

950
00:45:25.256 --> 00:45:27.166
and keychain items
are available always.

951
00:45:27.166 --> 00:45:30.496
So even after the
first boot, you know,

952
00:45:30.496 --> 00:45:31.806
when the device is
locked, et cetera.

953
00:45:32.476 --> 00:45:35.146
And we highly encourage
you to not use the lowest

954
00:45:35.566 --> 00:45:37.896
but use the highest or one
of the ones in between.

955
00:45:38.136 --> 00:45:40.806
And we'll go over what
this mean in just a second.

956
00:45:40.886 --> 00:45:44.336
But for completeness, here
are the rest of the APIs

957
00:45:44.336 --> 00:45:47.046
that you should be
looking at but of course,

958
00:45:47.046 --> 00:45:49.336
that'll be on the slides
that you'll get afterwards

959
00:45:49.736 --> 00:45:52.646
and you can look at it there.

960
00:45:52.856 --> 00:45:55.336
So, why should you
care about this

961
00:45:55.336 --> 00:45:56.456
if you're doing the right thing?

962
00:45:57.086 --> 00:45:59.496
If you're doing the right
thing, your keychain items

963
00:45:59.496 --> 00:46:02.916
and credential, so let's say,
users-- usernames and passwords

964
00:45:59.496 --> 00:46:02.916
and credential, so let's say,
users-- usernames and passwords

965
00:46:02.916 --> 00:46:06.366
and log-in tokens
or cookies should be

966
00:46:06.366 --> 00:46:09.226
in the keychain item
as a sec item.

967
00:46:09.766 --> 00:46:13.526
And that should be the
maximum protection.

968
00:46:13.526 --> 00:46:14.526
That's actually the default.

969
00:46:15.346 --> 00:46:17.276
Your database, SQLite database

970
00:46:17.276 --> 00:46:20.066
or coordinated database should
also be using the complete

971
00:46:20.066 --> 00:46:22.116
protection so that
it's not available

972
00:46:22.116 --> 00:46:23.596
when the device is locked.

973
00:46:25.016 --> 00:46:28.176
Now, we've just told you
about all these great ways

974
00:46:28.176 --> 00:46:31.486
that you can wake up and run
in the background and some

975
00:46:31.486 --> 00:46:33.566
of those times, the device
is going to be locked.

976
00:46:33.566 --> 00:46:34.396
It's going to be in their pocket

977
00:46:34.396 --> 00:46:35.966
when they receive
a new text message

978
00:46:36.326 --> 00:46:39.326
or if they get an
opportunity to launch.

979
00:46:39.906 --> 00:46:42.406
So that means that you
need to kind of make

980
00:46:42.406 --> 00:46:43.666
that a little bit more partial.

981
00:46:44.366 --> 00:46:50.046
You want to be able to
have access to connect

982
00:46:50.046 --> 00:46:52.946
to your service,
but what we're going

983
00:46:52.946 --> 00:46:57.426
to do here is set these keychain
items to be partially protected

984
00:46:57.616 --> 00:46:59.496
and specifically, we're
going to use the mode

985
00:46:59.536 --> 00:47:02.636
where the data is available
after the very first unlock.

986
00:46:59.536 --> 00:47:02.636
where the data is available
after the very first unlock.

987
00:47:04.336 --> 00:47:07.806
So what we encourage you to
do is to actually create--

988
00:47:08.506 --> 00:47:10.946
is not to actually
reduce the protection

989
00:47:11.046 --> 00:47:15.236
of that main credential
but to create a kind

990
00:47:15.236 --> 00:47:18.356
of derivative credential
that has limited access.

991
00:47:18.616 --> 00:47:20.426
So you might make it Read-Only

992
00:47:20.876 --> 00:47:24.706
or you might make it expire
within, let's say, a week or so,

993
00:47:25.296 --> 00:47:29.086
so that if that were to get
out, then there wouldn't be,

994
00:47:29.086 --> 00:47:30.846
you know, harmful consequences.

995
00:47:30.846 --> 00:47:36.686
So what do you do with the
data that you then download?

996
00:47:36.686 --> 00:47:39.136
So you have that credential,
you connect your server,

997
00:47:39.476 --> 00:47:41.226
you're able to download
some new information.

998
00:47:42.406 --> 00:47:44.866
What you wanted use is the
background mode that allows you

999
00:47:44.866 --> 00:47:50.466
to have this data accessible
while the file handle is open.

1000
00:47:50.466 --> 00:47:51.616
And you can go back
and refer to the--

1001
00:47:51.616 --> 00:47:53.096
read the previous
slides afterwards,

1002
00:47:53.446 --> 00:47:57.166
but all it does is allows you
to download new data, save it,

1003
00:47:57.376 --> 00:48:01.096
and as soon as you close
it, it can be secured.

1004
00:47:57.376 --> 00:48:01.096
and as soon as you close
it, it can be secured.

1005
00:48:02.956 --> 00:48:06.376
And then once that main
database is accessible

1006
00:48:06.376 --> 00:48:08.376
when the device is unlocked,
you're going to merge

1007
00:48:08.376 --> 00:48:11.466
that new data into your database
when that's appropriate.

1008
00:48:12.736 --> 00:48:14.476
So there's a fairly
common pattern.

1009
00:48:14.926 --> 00:48:17.726
You can definitely go to
the data protection lab

1010
00:48:17.726 --> 00:48:21.186
and get more details about how
to do this, but we encourage you

1011
00:48:21.186 --> 00:48:22.586
to do this instead
of, let's say,

1012
00:48:22.586 --> 00:48:29.626
just downgrading the protection
on your end credentials.

1013
00:48:29.626 --> 00:48:33.626
OK, so next is battery life
and cellular data usage.

1014
00:48:34.526 --> 00:48:38.826
So, even though the system
protects the device and the user

1015
00:48:38.826 --> 00:48:41.436
against excessive cellular data
usage and power efficient--

1016
00:48:41.486 --> 00:48:46.556
and power usage, you can do
a lot to be a good citizen

1017
00:48:46.626 --> 00:48:48.686
and make sure that on
the user's devices,

1018
00:48:49.016 --> 00:48:51.536
they get as many opportunities
as possible in order

1019
00:48:51.536 --> 00:48:52.546
to have other applications

1020
00:48:52.546 --> 00:48:54.816
and your own application
get launched more often.

1021
00:48:55.906 --> 00:48:58.846
Very specifically, the
more efficient you are,

1022
00:48:59.776 --> 00:49:01.796
the more opportunities
there will be for your app

1023
00:48:59.776 --> 00:49:01.796
the more opportunities
there will be for your app

1024
00:49:01.796 --> 00:49:03.536
and other apps to get launched.

1025
00:49:05.246 --> 00:49:06.536
So what can you do?

1026
00:49:07.496 --> 00:49:09.296
Well, just minimize
cellular data usage.

1027
00:49:09.296 --> 00:49:11.416
That's absolutely the
best thing you can do.

1028
00:49:12.136 --> 00:49:14.726
So we encourage you, before
calling the completion handler

1029
00:49:14.726 --> 00:49:17.956
to only really download what's
necessary to update your UI.

1030
00:49:18.026 --> 00:49:20.246
So download thumbnails
instead of full images.

1031
00:49:20.576 --> 00:49:22.566
But then enqueue
those full images

1032
00:49:22.566 --> 00:49:25.686
into a background transfer so
that the system can manage that.

1033
00:49:26.796 --> 00:49:30.906
For power efficiency, we
encourage you to enqueue

1034
00:49:30.906 --> 00:49:34.336
as many transfers as possible in
parallel that allows the radios

1035
00:49:34.366 --> 00:49:36.196
to go back to sleep as
quickly as possible.

1036
00:49:36.896 --> 00:49:41.396
So in addition, that also means
that if you have to be using,

1037
00:49:41.396 --> 00:49:46.076
let' say, Core Motion or one of
the other hardware-specific APIs

1038
00:49:46.476 --> 00:49:49.926
in order to, you know, provide
some kind of user interaction,

1039
00:49:49.926 --> 00:49:51.016
let's say you have a game

1040
00:49:51.016 --> 00:49:54.636
that involves moving your
phone around, we encourage you

1041
00:49:54.636 --> 00:49:56.636
to make sure that that's get
turned off while you're running

1042
00:49:56.636 --> 00:49:59.896
in the background so that
you're not impacting power.

1043
00:50:00.446 --> 00:50:01.716
And then of course,
like I said before,

1044
00:50:01.716 --> 00:50:03.416
call the completion handler
as soon as you're done.

1045
00:50:03.766 --> 00:50:07.316
That allows the system
to go back to sleep.

1046
00:50:07.316 --> 00:50:10.066
OK, so a quick reminder as well.

1047
00:50:11.066 --> 00:50:13.286
If the user removes your
application from app switcher,

1048
00:50:13.286 --> 00:50:14.816
your application
will no longer run

1049
00:50:14.816 --> 00:50:16.556
until it's then relaunched
by the user.

1050
00:50:17.026 --> 00:50:21.596
So if your-- you know, you get
feedback from users of saying,

1051
00:50:21.596 --> 00:50:23.826
"Hey, I removed it and then
I was expecting update."

1052
00:50:24.236 --> 00:50:28.476
This why. And the same
is true for settings.

1053
00:50:28.476 --> 00:50:31.416
If the user turns you off,
obviously, you won't get

1054
00:50:31.536 --> 00:50:33.886
up any background opportunities.

1055
00:50:34.626 --> 00:50:38.606
We'll be introducing API soon
to inspect new settings--

1056
00:50:38.866 --> 00:50:41.206
sorry, new API that will
allow you to inspect settings

1057
00:50:41.646 --> 00:50:44.746
so that you can say, "Hey,
am I going to actually run

1058
00:50:44.746 --> 00:50:46.446
in the background after
this," so you can make sure

1059
00:50:46.446 --> 00:50:49.086
that if you're promising some
functionality to the user,

1060
00:50:49.086 --> 00:50:54.536
that you can warn them, that
it's not going to be there.

1061
00:50:54.536 --> 00:50:57.546
And of course, like
Newsstand and Location,

1062
00:50:58.076 --> 00:50:59.456
they'll appear here as well.

1063
00:50:59.966 --> 00:51:02.616
So that the user can go
through and, you know,

1064
00:50:59.966 --> 00:51:02.616
So that the user can go
through and, you know,

1065
00:51:02.616 --> 00:51:05.506
turn off particular applications

1066
00:51:05.576 --> 00:51:10.276
or turn off Background Fetch
overall if they want to.

1067
00:51:10.516 --> 00:51:17.296
So this is multitasking in iOS 6
and we've added Background Fetch

1068
00:51:17.346 --> 00:51:20.376
which allows you to
periodically get new content.

1069
00:51:21.916 --> 00:51:25.406
We added Remote Notifications so
that your application can launch

1070
00:51:25.406 --> 00:51:28.236
and be updated, in-response
from push notification.

1071
00:51:29.516 --> 00:51:31.686
And finally, we have a
Background Transfer Service

1072
00:51:31.976 --> 00:51:35.196
that allows you to enqueue
large uploads and downloads

1073
00:51:35.536 --> 00:51:38.306
to be finished later and then
woken up in the background.

1074
00:51:39.666 --> 00:51:42.126
For more information,
you're welcome

1075
00:51:42.126 --> 00:51:46.406
to contact our evangelist and
look at the programming guide

1076
00:51:46.406 --> 00:51:49.446
as well as access
to developer forms.

1077
00:51:50.406 --> 00:51:52.686
We have a lot of
related sessions to this.

1078
00:51:53.606 --> 00:51:56.296
We highly encourage you
to go the What's New

1079
00:51:56.296 --> 00:51:58.376
in Foundation Networking
session.

1080
00:51:58.736 --> 00:52:01.546
The keychain session
will let you learn more

1081
00:51:58.736 --> 00:52:01.546
The keychain session
will let you learn more

1082
00:52:01.546 --> 00:52:03.606
about the data protection
pattern that I showed here.

1083
00:52:04.256 --> 00:52:06.996
I highly encourage you
to go to the What's New

1084
00:52:06.996 --> 00:52:08.056
in Core Location talk.

1085
00:52:08.126 --> 00:52:10.706
They have a lot of great
new things and you want

1086
00:52:10.706 --> 00:52:14.376
to check it out, as well as
the State Restoration talk.

1087
00:52:14.526 --> 00:52:17.306
You'll learn about how
do you state restoration

1088
00:52:17.306 --> 00:52:19.356
in your application,
how you can make sure

1089
00:52:19.356 --> 00:52:21.906
that your application
is up to date

1090
00:52:21.906 --> 00:52:25.636
when the user taps
on that app switcher.

1091
00:52:25.806 --> 00:52:27.756
With that, thank you.

1092
00:52:28.516 --> 00:52:34.600
[ Applause ]
