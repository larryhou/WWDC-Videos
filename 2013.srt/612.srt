
1
00:00:00.506 --> 00:00:09.576
[ Silence ]

2
00:00:10.076 --> 00:00:12.736
>> Hello and welcome
to the advanced editing

3
00:00:12.736 --> 00:00:13.986
with AV foundation session.

4
00:00:14.646 --> 00:00:17.116
My name's Scott Johnston
on the AV Foundation Team.

5
00:00:17.616 --> 00:00:25.146
[ Applause ]

6
00:00:25.646 --> 00:00:27.626
So today we have two
main topics for you.

7
00:00:28.446 --> 00:00:32.066
Introducing custom video
compositing, and secondly,

8
00:00:32.226 --> 00:00:34.226
a really useful debugging
technique

9
00:00:34.346 --> 00:00:35.846
for debugging compositions.

10
00:00:36.286 --> 00:00:38.766
So let's start with
custom video compositing.

11
00:00:41.266 --> 00:00:43.036
First of all, we're going
to take a few moments just

12
00:00:43.036 --> 00:00:46.026
to review the existing AV
Foundation Architecture.

13
00:00:49.116 --> 00:00:53.806
AV Foundation has been
available for a few years now.

14
00:00:54.266 --> 00:00:56.746
Ever since iOS 4 and Lion.

15
00:00:57.886 --> 00:01:00.926
It's used in a wide variety
of video editing applications

16
00:00:57.886 --> 00:01:00.926
It's used in a wide variety
of video editing applications

17
00:01:00.926 --> 00:01:04.366
in the app store
including those from Apple.

18
00:01:04.495 --> 00:01:08.116
It provides core and
key fundamental tools

19
00:01:08.606 --> 00:01:11.526
to create cuts only
temporal compositions,

20
00:01:12.336 --> 00:01:15.276
video mixing compositions,
and of course audio mixing.

21
00:01:21.416 --> 00:01:24.136
In Mountain Lion and iOS
6, it's quite possible

22
00:01:24.136 --> 00:01:28.066
to create a wide variety
of visual effects.

23
00:01:30.216 --> 00:01:35.176
Dissolves, scaling,
transformation effects,

24
00:01:35.446 --> 00:01:43.636
layering, picture in picture
effects, wipes, and slides.

25
00:01:43.636 --> 00:01:54.906
And now, new for
Mavericks and iOS 7,

26
00:01:55.396 --> 00:01:57.276
we'd like to give you
guys the opportunity

27
00:01:57.276 --> 00:02:00.386
to place your code inside
the video composition

28
00:01:57.276 --> 00:02:00.386
to place your code inside
the video composition

29
00:02:00.386 --> 00:02:01.206
render pipeline.

30
00:02:01.826 --> 00:02:10.686
So giving you direct access
to the pixels with the CPU

31
00:02:10.686 --> 00:02:17.746
and the GPU to colorize,
warp, texture map.

32
00:02:18.706 --> 00:02:21.836
Achieve a much wider
variety of complex effects.

33
00:02:25.926 --> 00:02:29.756
And we'll see more of the
sea otters later [laughter].

34
00:02:30.716 --> 00:02:32.396
So custom video compositor.

35
00:02:33.726 --> 00:02:35.356
But what is a video compositor?

36
00:02:36.446 --> 00:02:39.626
Well, it's basically a
chunk of video mixing code.

37
00:02:40.556 --> 00:02:44.756
Which takes zero or more
source frames blending

38
00:02:45.196 --> 00:02:50.186
or modifying the pixels to
deliver a single output frame.

39
00:02:50.516 --> 00:02:54.876
We'll find the existing
built-in compositor inside the

40
00:02:54.876 --> 00:02:55.986
composition architecture.

41
00:02:58.316 --> 00:03:01.566
So looking inside
compositions as a whole,

42
00:02:58.316 --> 00:03:01.566
So looking inside
compositions as a whole,

43
00:03:01.986 --> 00:03:04.176
we first see the AVComposition,

44
00:03:04.936 --> 00:03:07.306
which is our temporal
cuts-only edit.

45
00:03:07.976 --> 00:03:14.956
We place time ranges of
source assets in tracks.

46
00:03:15.676 --> 00:03:17.466
Here we have two
tracks, A and B,

47
00:03:18.276 --> 00:03:21.986
and in this example we're going
to be dissolving from track A

48
00:03:21.986 --> 00:03:23.866
to B and back to A again.

49
00:03:23.866 --> 00:03:27.826
In order to achieve
the dissolve,

50
00:03:28.576 --> 00:03:32.786
we have the AVVideoComposition,

51
00:03:32.786 --> 00:03:38.296
which stores the video mixing
parameters and time ranges.

52
00:03:38.296 --> 00:03:48.466
So let's take a closer look at
the video composition itself.

53
00:03:48.466 --> 00:03:51.876
Now for these time ranges
in the video composition,

54
00:03:52.206 --> 00:03:53.536
they're instruction objects,

55
00:03:54.716 --> 00:03:56.736
which store the mixing
parameters.

56
00:04:00.696 --> 00:04:02.976
But some instructions
are simpler than others.

57
00:04:02.976 --> 00:04:04.906
For example, one source track.

58
00:04:05.446 --> 00:04:07.856
Another can take more than one.

59
00:04:07.856 --> 00:04:16.125
And looking at the first
simple segment there,

60
00:04:16.125 --> 00:04:17.206
that first instruction.

61
00:04:17.805 --> 00:04:22.106
It's effectively just passing
through frames from track A

62
00:04:22.106 --> 00:04:27.276
through the compositor
rendering the first segment.

63
00:04:27.746 --> 00:04:29.046
Now the more interesting
segment is

64
00:04:29.076 --> 00:04:30.916
where the initial
dissolve happens,

65
00:04:30.916 --> 00:04:35.096
where we take two frames,
and using the parameters

66
00:04:35.096 --> 00:04:37.936
from the instruction to tell
the compositor to blend them.

67
00:04:38.886 --> 00:04:44.986
And with them, we render
the rest of the edit.

68
00:04:44.986 --> 00:04:46.466
Focusing even more
on the compositor,

69
00:04:47.096 --> 00:04:53.146
we have multiple source
frames and a single frame out.

70
00:04:55.256 --> 00:04:57.846
Along with the source frames,
we have the instruction object

71
00:04:57.996 --> 00:04:59.196
with the mixing parameters.

72
00:04:59.736 --> 00:05:04.326
In this case, a dissolve
which we encode

73
00:04:59.736 --> 00:05:04.326
In this case, a dissolve
which we encode

74
00:05:04.326 --> 00:05:05.966
as a property in
the instruction.

75
00:05:05.966 --> 00:05:09.716
In this case, in ramp
from one down to zero.

76
00:05:10.296 --> 00:05:15.686
At this point, we're
at the compositor,

77
00:05:15.686 --> 00:05:18.396
so let's introduce the new
custom compositing API.

78
00:05:19.236 --> 00:05:25.326
The built-in compositor is
green, you can now replace that

79
00:05:26.646 --> 00:05:30.546
and do your own stuff
in Mavericks and iOS 7.

80
00:05:32.476 --> 00:05:36.096
In addition, you can implement
your own instruction to gather

81
00:05:36.096 --> 00:05:39.396
up and carry your own
set of mixing parameters.

82
00:05:39.956 --> 00:05:45.506
It's bundled up with the source
frames in the request object.

83
00:05:46.026 --> 00:05:52.596
So you'll be implementing the
new protocol AVVideoCompositing,

84
00:05:53.116 --> 00:05:56.836
which receives the new object,

85
00:05:56.836 --> 00:06:00.306
AVAsynchronousVideoComposition
request.

86
00:05:56.836 --> 00:06:00.306
AVAsynchronousVideoComposition
request.

87
00:06:00.876 --> 00:06:06.846
And, in addition, you'll
be implementing the

88
00:06:07.116 --> 00:06:09.966
AVVideoCompositionInstruction.

89
00:06:10.506 --> 00:06:16.546
Now looking at the
methods involved here,

90
00:06:17.856 --> 00:06:19.196
you'll be receiving your request

91
00:06:19.536 --> 00:06:21.756
when you implement
startVideo CompositionRequest.

92
00:06:22.326 --> 00:06:26.006
And then deliver the
frame once you've rendered

93
00:06:26.826 --> 00:06:28.396
with finishWith
ComposedVideoFrame.

94
00:06:28.396 --> 00:06:32.986
Now in the event of an error,
you can call finishWithError

95
00:06:33.046 --> 00:06:35.666
or acknowledge a
cancelled request.

96
00:06:36.286 --> 00:06:44.066
Okay, so what about the
format of the source frames?

97
00:06:44.066 --> 00:06:45.886
How are the pixels arranged?

98
00:06:45.886 --> 00:06:50.276
Well you've probably
looked in our header files

99
00:06:50.276 --> 00:06:52.136
and seen a wide variety
of formats.

100
00:06:52.706 --> 00:06:57.406
You'll probably only see a
small subset here, but generally

101
00:06:58.106 --> 00:07:09.876
when we're decoding H.264 video,
you'll receive YUV 8-bit 420.

102
00:06:58.106 --> 00:07:09.876
when we're decoding H.264 video,
you'll receive YUV 8-bit 420.

103
00:07:10.026 --> 00:07:13.596
But that could vary and
your code may not be able

104
00:07:13.596 --> 00:07:14.716
to render into YUV.

105
00:07:15.016 --> 00:07:17.176
So you can express the exact
format that you require

106
00:07:17.886 --> 00:07:20.086
by implementing source
pixel buffer attributes.

107
00:07:20.666 --> 00:07:25.806
Now here you can provide
an array of formats

108
00:07:25.806 --> 00:07:27.416
that you would like to receive.

109
00:07:28.406 --> 00:07:33.196
In this case, our example
requires 32-bit BGRA,

110
00:07:34.266 --> 00:07:37.216
and by doing so the
system will, on the fly,

111
00:07:37.216 --> 00:07:45.396
convert the source
frames into that format.

112
00:07:45.616 --> 00:07:47.986
Similarly for the
output pixel format,

113
00:07:49.356 --> 00:07:50.996
you implement
requiredPixelBuffer

114
00:07:50.996 --> 00:07:52.426
AttributesForRenderContext.

115
00:07:55.386 --> 00:08:05.276
And we're requiring
32-bit BGRA here.

116
00:07:55.386 --> 00:08:05.276
And we're requiring
32-bit BGRA here.

117
00:08:05.356 --> 00:08:08.956
Now in order to get hold of a
new empty frame to render into,

118
00:08:09.386 --> 00:08:10.956
we go back to the
request object,

119
00:08:11.806 --> 00:08:16.166
ask it for the render context,
which contains information

120
00:08:16.556 --> 00:08:20.186
about the aspect ratio and the
size that we're rendering to,

121
00:08:20.706 --> 00:08:25.696
and also the required
pixel format.

122
00:08:25.906 --> 00:08:27.396
So we ask it for a
new pixel buffer.

123
00:08:27.606 --> 00:08:29.316
Now this comes from
a managed pool.

124
00:08:29.826 --> 00:08:39.346
So the frame is allocated, we
can then render in to their,

125
00:08:39.346 --> 00:08:43.275
in this case our dissolve and
send the output on its way.

126
00:08:43.275 --> 00:08:49.156
Now let's jump into Xcode
and we'll have a demo.

127
00:08:49.286 --> 00:08:54.186
Okay, so, in Xcode, here we are
with the Hello World equivalent

128
00:08:54.186 --> 00:08:56.006
of a custom compositor.

129
00:08:56.746 --> 00:09:01.176
So, here we're implementing
our AVVideoCompositing protocol

130
00:08:56.746 --> 00:09:01.176
So, here we're implementing
our AVVideoCompositing protocol

131
00:09:02.256 --> 00:09:08.616
and those three methods that
we called out in the slides.

132
00:09:09.206 --> 00:09:14.866
So again, we're requiring
BGRA and it's simply a case

133
00:09:14.866 --> 00:09:16.516
of putting in that value.

134
00:09:16.516 --> 00:09:20.866
Now remember it's an array, so
we can, if we do support YUV

135
00:09:20.866 --> 00:09:26.066
in some flavor, we
can drop it in there.

136
00:09:26.126 --> 00:09:29.146
Similarly for the output,
in this case it's identical.

137
00:09:29.766 --> 00:09:36.656
Now the action happens
inside the rendering function

138
00:09:36.656 --> 00:09:41.546
startVideo CompositionRequest
receiving our request object.

139
00:09:42.596 --> 00:09:43.566
Let's open this guy.

140
00:09:45.186 --> 00:09:49.996
Okay, so, the first
thing we do here is -

141
00:09:49.996 --> 00:09:52.736
it's slightly hard coded
just for simplicity -

142
00:09:53.766 --> 00:09:56.826
but we fish out the
source frames

143
00:09:56.826 --> 00:09:59.726
from the passed in
request object.

144
00:10:00.616 --> 00:10:03.056
Now you'll get these as
Core Video pixel buffers,

145
00:10:03.316 --> 00:10:07.936
and we'll try our hardest

146
00:10:07.936 --> 00:10:09.736
to make sure they're
IOSurface backed,

147
00:10:09.736 --> 00:10:11.966
so they're going
to be on the GPU.

148
00:10:12.436 --> 00:10:16.966
The next thing we do
is we allocate a fresh,

149
00:10:16.966 --> 00:10:20.526
new pixel buffer to render into
so, as we saw in the slides,

150
00:10:20.526 --> 00:10:23.216
we ask the request object
for the render context

151
00:10:24.476 --> 00:10:25.756
and allocate a new pixel buffer.

152
00:10:26.086 --> 00:10:31.406
Then we do the rendering and
deliver the output frame.

153
00:10:31.726 --> 00:10:35.366
So before we look at what's
inside that little render block,

154
00:10:35.556 --> 00:10:39.436
let's run up and
see what this does.

155
00:10:39.996 --> 00:10:43.256
Okay here we are
with a deer again.

156
00:10:43.516 --> 00:10:46.866
Okay so this app, a simple
app, and it's really simple

157
00:10:46.866 --> 00:10:50.766
because we've managed to use
the new AVPlayerView from AVKit,

158
00:10:51.546 --> 00:10:55.116
which gives you a nice, simple
player view with a scrubber

159
00:10:55.766 --> 00:10:57.226
and various other goodies.

160
00:10:57.946 --> 00:11:00.816
So let's play and
we'll see what happens.

161
00:10:57.946 --> 00:11:00.816
So let's play and
we'll see what happens.

162
00:11:01.496 --> 00:11:03.596
Okay so we've got a
really simple wipe,

163
00:11:03.596 --> 00:11:05.246
with that white line
coming down.

164
00:11:06.086 --> 00:11:08.186
Let's play it again
if you missed it.

165
00:11:08.836 --> 00:11:11.526
Okay so there's nothing
particularly exciting,

166
00:11:11.526 --> 00:11:17.456
but the main thing is this will
illustrate how we can get hold

167
00:11:17.456 --> 00:11:20.876
of those pixels, in
this case which is CPU,

168
00:11:21.586 --> 00:11:25.276
so the pixel buffers you can
lock to the base address.

169
00:11:25.336 --> 00:11:33.056
At which point, you can then
ask for the usual things

170
00:11:33.056 --> 00:11:36.636
like the bytes-per-row
and the base address,

171
00:11:36.636 --> 00:11:39.846
and at which point we can then
start splatting the pixels.

172
00:11:39.846 --> 00:11:43.286
Now, you'll see this rather ugly
- and don't do this at home -

173
00:11:43.286 --> 00:11:44.736
memcpy and memset stuff.

174
00:11:45.326 --> 00:11:52.676
Just purely for simplicity
here, but I'll close that.

175
00:11:52.676 --> 00:11:56.616
Now, up here, when we
play that transition,

176
00:11:56.616 --> 00:11:59.606
obviously we're doing some
sort of animation and on

177
00:11:59.606 --> 00:12:02.576
to calculate the vertical
position of the white band.

178
00:11:59.606 --> 00:12:02.576
to calculate the vertical
position of the white band.

179
00:12:03.496 --> 00:12:08.056
We have to basically interpolate
across our time range to work

180
00:12:08.056 --> 00:12:12.206
out exactly at what
point we are,

181
00:12:12.206 --> 00:12:14.366
we use a thing called
tweening here,

182
00:12:14.366 --> 00:12:16.976
we calculate this tween factor.

183
00:12:17.166 --> 00:12:20.496
Now we're going to come back to
this in the slides in a moment,

184
00:12:20.926 --> 00:12:23.656
but basically there's some basic
arithmetic going on in here

185
00:12:24.346 --> 00:12:28.726
and it's all to do with
the time range associated

186
00:12:28.786 --> 00:12:32.166
with the current video
composition instruction.

187
00:12:32.616 --> 00:12:34.256
We'll come back to
that in a sec.

188
00:12:34.926 --> 00:12:37.266
But this isn't a
particularly exciting example

189
00:12:37.266 --> 00:12:38.506
of a compositor, so
let's have a look

190
00:12:38.506 --> 00:12:41.416
at something using
the GPU, using OpenGL.

191
00:12:42.226 --> 00:12:43.566
So let's run this guy again.

192
00:12:43.566 --> 00:12:49.066
And this time we're going
to change the composition,

193
00:12:49.066 --> 00:12:51.586
and I've got some pre-prepared
ones fortunately, so,

194
00:12:52.736 --> 00:12:56.126
let's switch to this guy.

195
00:12:56.126 --> 00:12:58.516
Okay, so, let's play
it this time.

196
00:12:58.666 --> 00:13:01.236
Coming in quite fast, and
there's our otters again.

197
00:12:58.666 --> 00:13:01.236
Coming in quite fast, and
there's our otters again.

198
00:13:01.816 --> 00:13:03.646
I'll play that again.

199
00:13:04.386 --> 00:13:08.196
It goes through quite quickly,
but we can do something

200
00:13:08.196 --> 00:13:13.896
about that, we can change the
[pause] video mixing parameters

201
00:13:14.216 --> 00:13:16.216
that we've placed
in our composition,

202
00:13:17.366 --> 00:13:24.416
and I can reveal some controls
wired directly to properties

203
00:13:24.416 --> 00:13:26.996
in our instruction, in our
custom instruction here.

204
00:13:26.996 --> 00:13:30.336
In this case, stiffening
and damping.

205
00:13:31.116 --> 00:13:35.826
Now these are going to influence
the way we're calculating

206
00:13:35.826 --> 00:13:36.446
the physics.

207
00:13:36.646 --> 00:13:37.846
In this case we're mapping,

208
00:13:37.846 --> 00:13:41.036
texture mapping the
video onto a mash.

209
00:13:41.646 --> 00:13:46.926
And then applying some
physics to the vertices.

210
00:13:46.926 --> 00:13:49.306
So let's see if we can slow
this down a little bit, so,

211
00:13:49.766 --> 00:13:54.216
[pause] let's play
that through again.

212
00:13:54.216 --> 00:13:56.336
Okay, it's a little
bit different.

213
00:13:56.856 --> 00:14:02.716
You can see the, as it comes in,
it's a strange, hypnotic effect.

214
00:13:56.856 --> 00:14:02.716
You can see the, as it comes in,
it's a strange, hypnotic effect.

215
00:14:02.966 --> 00:14:06.866
But this we can play
with it even more

216
00:14:08.076 --> 00:14:09.206
by playing with the damping.

217
00:14:10.566 --> 00:14:13.176
Woops. Okay.

218
00:14:13.456 --> 00:14:29.356
Of course that was all planned.

219
00:14:32.196 --> 00:14:34.386
Okay so, we've set up
the stiffness and damping

220
00:14:34.386 --> 00:14:37.156
to be a little bit
wilder this time.

221
00:14:38.316 --> 00:14:44.416
Yeah. [Pause] Okay, so
anyway, that's an example

222
00:14:44.416 --> 00:14:46.556
of the OpenGL doing
something useful.

223
00:14:47.606 --> 00:14:52.566
Let's switch back to the slides.

224
00:14:54.006 --> 00:14:55.426
Okay we mentioned
tweening there,

225
00:14:55.426 --> 00:14:56.546
which is an interpolation.

226
00:14:56.546 --> 00:15:00.246
So let's have a quick
overview of that

227
00:14:56.546 --> 00:15:00.246
So let's have a quick
overview of that

228
00:15:00.246 --> 00:15:03.316
in case you're not familiar
with how that works.

229
00:15:03.986 --> 00:15:06.946
Now we'll focus in on
the second segment,

230
00:15:06.946 --> 00:15:09.586
which does the dissolve
in this example.

231
00:15:10.336 --> 00:15:22.426
Okay our instruction
contains our opacity ramp

232
00:15:23.376 --> 00:15:25.186
from 100 percent
down to 0 percent.

233
00:15:25.736 --> 00:15:30.306
Of course the interesting
properties in there,

234
00:15:30.306 --> 00:15:33.386
as well as the opacity
ramp is the time range

235
00:15:33.576 --> 00:15:36.286
and our first example
is arbitrarily starting

236
00:15:36.286 --> 00:15:41.336
at 5 seconds with a duration
of ten-thirtieths of a second.

237
00:15:41.946 --> 00:15:47.106
Now in the first frame we've
only elapsed a few seconds in.

238
00:15:48.576 --> 00:15:50.976
At which point, the passed
capacity should be 100 percent.

239
00:15:50.976 --> 00:15:56.016
Now we calculate
this tween factor

240
00:15:56.606 --> 00:16:01.586
by dividing the elapsed
time by the duration.

241
00:15:56.606 --> 00:16:01.586
by dividing the elapsed
time by the duration.

242
00:16:01.586 --> 00:16:04.866
In which case we calculate
zero, which leads right

243
00:16:04.866 --> 00:16:06.716
to the beginning of
the opacity ramp.

244
00:16:06.716 --> 00:16:08.876
Now things get a
bit more interesting

245
00:16:08.876 --> 00:16:10.536
when we move forward one frame.

246
00:16:11.626 --> 00:16:13.486
We've elapsed one-thirtieth
of a second in.

247
00:16:14.886 --> 00:16:19.126
The tween factor is now
calculated to be 0.1,

248
00:16:19.126 --> 00:16:23.386
which means we're a tenth of the
way through the opacity ramp.

249
00:16:24.776 --> 00:16:28.206
By multiplying the opacity
by the tween factor,

250
00:16:28.206 --> 00:16:32.426
we can then arrive at the
desired opacity for this kind

251
00:16:32.476 --> 00:16:34.186
of point in time
with 90 percent.

252
00:16:34.796 --> 00:16:38.716
We do the same calculation

253
00:16:38.716 --> 00:16:41.626
for each frame all the
way through to the end.

254
00:16:42.956 --> 00:16:44.786
Arriving with a tween
factor of 1,

255
00:16:44.786 --> 00:16:47.666
which means we'll get the
exact destination opacity

256
00:16:48.376 --> 00:16:49.276
of 0 percent.

257
00:16:56.336 --> 00:16:59.836
Okay, so there's some
performance considerations.

258
00:17:00.426 --> 00:17:07.996
[Pause] But before we get to the
performance, there's a caveat.

259
00:17:09.106 --> 00:17:13.656
When your app on
iOS is backgrounded,

260
00:17:13.656 --> 00:17:15.906
OpenGL won't be available.

261
00:17:15.906 --> 00:17:19.016
So you'll have to
have a CPU equivalent.

262
00:17:19.106 --> 00:17:29.976
Of course you can use the
CPU in foreground too.

263
00:17:30.856 --> 00:17:34.436
So, the three booleans inside
the new composition instruction.

264
00:17:34.966 --> 00:17:37.886
It's important to look at these

265
00:17:37.886 --> 00:17:44.416
because there are
performance wins to be had.

266
00:17:44.416 --> 00:17:46.326
First up, passthroughTrackID.

267
00:17:50.656 --> 00:17:52.356
So some segments are, sorry,

268
00:17:52.356 --> 00:17:56.316
some instructions are
simpler than others.

269
00:17:57.636 --> 00:18:01.336
Some just take one source and
don't modify the frame at all,

270
00:17:57.636 --> 00:18:01.336
Some just take one source and
don't modify the frame at all,

271
00:18:01.336 --> 00:18:03.796
they simply pass through
frames from track A.

272
00:18:03.796 --> 00:18:08.376
In this example, this gets
you to the first segment.

273
00:18:08.466 --> 00:18:11.646
Simply passing through
frames on track A.

274
00:18:12.166 --> 00:18:14.776
[Pause] If we're not modifying
the frame, then we might

275
00:18:14.776 --> 00:18:16.686
as well bypass the
compositor completely.

276
00:18:17.306 --> 00:18:21.056
Now this is a power win.

277
00:18:27.626 --> 00:18:30.276
Next up is
requiredSourceTrackIDs.

278
00:18:30.276 --> 00:18:35.006
So let's say that first
instruction is actually

279
00:18:35.006 --> 00:18:38.816
modifying those single
source frames coming through.

280
00:18:39.186 --> 00:18:41.666
This say it's doing some
colorization effect.

281
00:18:42.476 --> 00:18:45.896
In which case we do
require frames from track A

282
00:18:45.896 --> 00:18:47.696
and we do want the
compositor to be called.

283
00:18:48.376 --> 00:18:50.376
So we set required
source track IDs

284
00:18:50.376 --> 00:18:53.736
to be track A, that
single track.

285
00:18:54.266 --> 00:19:00.246
Now what we don't want
to do is just leave it

286
00:18:54.266 --> 00:19:00.246
Now what we don't want
to do is just leave it

287
00:19:00.566 --> 00:19:03.666
to be the default value of
nil, because that's equivalent,

288
00:19:04.126 --> 00:19:06.696
that says, deliver me
frames from all the tracks,

289
00:19:06.696 --> 00:19:09.586
and it's going to
be wasted effort.

290
00:19:15.296 --> 00:19:17.176
So containsTweening.

291
00:19:17.896 --> 00:19:20.066
This is about our
animation again.

292
00:19:20.066 --> 00:19:23.446
Now consider this composition.

293
00:19:23.446 --> 00:19:28.596
We have a moving
picture-in-picture effect.

294
00:19:29.156 --> 00:19:31.786
But all the source frames
coming at us are the same.

295
00:19:32.286 --> 00:19:36.176
Perhaps we've time extended
the source so we got a run

296
00:19:36.176 --> 00:19:38.846
of identical frames coming
through the compositor,

297
00:19:38.906 --> 00:19:40.386
but we're still doing animations

298
00:19:40.386 --> 00:19:42.796
so every output frame
is going to be unique.

299
00:19:43.536 --> 00:19:50.356
Because of that we set,
containsTweening to be yes.

300
00:19:50.396 --> 00:19:53.446
[Pause] But if we leave
containsTweening as yes,

301
00:19:54.876 --> 00:19:56.846
and then we stop doing
animation for some reason,

302
00:19:56.846 --> 00:19:58.756
so we have a static
picture-in-picture effect.

303
00:19:59.766 --> 00:20:03.366
The picture-in-picture is at
the top right for every frame.

304
00:19:59.766 --> 00:20:03.366
The picture-in-picture is at
the top right for every frame.

305
00:20:03.886 --> 00:20:05.446
The same source frames
every time.

306
00:20:06.756 --> 00:20:09.486
We're just re-rendering
identical output.

307
00:20:11.236 --> 00:20:13.756
So by being careful to
set contains to be no

308
00:20:13.756 --> 00:20:15.226
when you have no animation.

309
00:20:15.766 --> 00:20:22.566
Then after the initial frame,
the system is at liberty

310
00:20:22.566 --> 00:20:28.766
to optimize away those renders
and reuse the identical output.

311
00:20:33.236 --> 00:20:37.946
And then we look at the
pixel buffer formats.

312
00:20:37.946 --> 00:20:41.736
There's another performance
win to be had here.

313
00:20:41.956 --> 00:20:45.506
I think, as I said maybe
earlier, if we can work

314
00:20:46.166 --> 00:20:47.756
in a wider variety of formats,

315
00:20:49.076 --> 00:20:52.356
in particular YUV 420
then do so, because then

316
00:20:52.686 --> 00:20:55.826
that will avoid, generally
avoid a conversion hit

317
00:20:56.046 --> 00:20:57.366
on this source frames coming in.

318
00:20:57.906 --> 00:21:05.626
With output it's less critical
since the display, for example,

319
00:20:57.906 --> 00:21:05.626
With output it's less critical
since the display, for example,

320
00:21:05.626 --> 00:21:08.376
can accept multiple
formats, like BGRA and YUV.

321
00:21:08.376 --> 00:21:11.966
There will be no conversion.

322
00:21:16.536 --> 00:21:25.516
Okay, so we have some
sample code, AVCustomEdit.

323
00:21:26.276 --> 00:21:30.206
In there you'll find
some OpenGL examples.

324
00:21:35.296 --> 00:21:43.076
Okay, the second topic is
debugging compositions.

325
00:21:43.386 --> 00:21:55.486
Debugging compositions,
well, it's quite possible

326
00:21:55.816 --> 00:22:01.696
to construct elaborate
and complex compositions

327
00:21:55.816 --> 00:22:01.696
to construct elaborate
and complex compositions

328
00:22:01.826 --> 00:22:09.396
with entirely legal values while
producing unexpected results.

329
00:22:10.796 --> 00:22:12.276
Sometimes that's
just a black frame.

330
00:22:12.636 --> 00:22:18.986
I like to think of this a bit
like building an OpenGL scene,

331
00:22:19.366 --> 00:22:23.286
but inadvertently pointing
the camera view vector

332
00:22:23.286 --> 00:22:24.186
in the wrong direction.

333
00:22:25.456 --> 00:22:28.266
In all these cases, again,
there's a black frame.

334
00:22:28.356 --> 00:22:29.786
How do you debug that?

335
00:22:29.786 --> 00:22:30.526
What's the best way?

336
00:22:30.816 --> 00:22:34.766
Well we found internally
something really useful.

337
00:22:35.726 --> 00:22:39.306
Let's just consider
the types of problems

338
00:22:39.846 --> 00:22:40.566
that you may encounter[Pause].

339
00:22:41.316 --> 00:22:45.956
First of all, and probably
one of the worst ones,

340
00:22:45.956 --> 00:22:50.006
is leaving gaps between
the segments

341
00:22:50.006 --> 00:22:51.306
in the video composition.

342
00:22:51.876 --> 00:22:55.376
It will almost certainly
result in black frames

343
00:22:55.376 --> 00:22:58.106
or just hanging onto
the last frame.

344
00:23:02.156 --> 00:23:06.256
And then just getting that
alignment in the tracks wrong.

345
00:23:06.256 --> 00:23:08.236
Maybe it's a rounding
error when working

346
00:23:08.346 --> 00:23:11.686
with CMTime or something.

347
00:23:12.456 --> 00:23:19.376
Or misalignment between the
video composition time ranges

348
00:23:19.376 --> 00:23:23.196
and the AVComposition
track segments.

349
00:23:23.836 --> 00:23:29.416
Or a mistake in one of the
ramps, too long for example.

350
00:23:29.446 --> 00:23:37.726
Or an error in the
transformation matrix

351
00:23:37.726 --> 00:23:40.116
and spinning off your layers

352
00:23:40.286 --> 00:23:43.836
into the ether beyond the
boundaries of the output frame.

353
00:23:44.926 --> 00:23:49.436
[Pause] As I've said we've
found something really useful

354
00:23:49.436 --> 00:23:53.126
internally and that is to
visualize the composition.

355
00:23:53.926 --> 00:23:56.566
Rather than looking at the
code, you look at the picture.

356
00:23:57.386 --> 00:24:00.406
So let's switch back
to the demo machine.

357
00:23:57.386 --> 00:24:00.406
So let's switch back
to the demo machine.

358
00:24:01.176 --> 00:24:03.536
I think I see that, yeah, okay.

359
00:24:04.416 --> 00:24:07.006
Alright so if I run,
little lagging here,

360
00:24:07.116 --> 00:24:09.856
hopefully it doesn't crash.

361
00:24:10.706 --> 00:24:16.296
Okay, so, we're looking
at our simple wipe again.

362
00:24:16.946 --> 00:24:21.176
Now let's see, this is
AVCompositionDebugView.

363
00:24:22.066 --> 00:24:24.056
This is going to be sample code.

364
00:24:25.626 --> 00:24:26.856
I can display it like this.

365
00:24:27.676 --> 00:24:34.086
And what were looking at here,
get it big enough here, okay,

366
00:24:34.086 --> 00:24:36.336
so, what we're seeing
here in green

367
00:24:36.386 --> 00:24:41.956
and dark blue are
AVComposition tracks,

368
00:24:42.506 --> 00:24:47.506
and green is the video tracks,
dark blue is the audio tracks.

369
00:24:47.506 --> 00:24:51.576
And remember this is
the cuts only part.

370
00:24:52.396 --> 00:25:00.176
So our source media starts
here for video track 2

371
00:24:52.396 --> 00:25:00.176
So our source media starts
here for video track 2

372
00:25:00.176 --> 00:25:02.396
and there for video track 1.

373
00:25:03.126 --> 00:25:07.026
And then down here's
the video mixing part,

374
00:25:07.026 --> 00:25:10.896
is the AVVideoComposition
containing our instructions,

375
00:25:11.496 --> 00:25:16.106
in this case this
instruction's made use

376
00:25:16.106 --> 00:25:19.576
of that passthroughTackID
so we can label it as such.

377
00:25:20.296 --> 00:25:26.006
And then into the
custom instruction.

378
00:25:26.976 --> 00:25:28.726
And then at the bottom
is the audio mix.

379
00:25:28.726 --> 00:25:33.476
Now you see the yellow
volume ramp there.

380
00:25:33.476 --> 00:25:36.216
So, this looks like it
could be quite useful.

381
00:25:36.566 --> 00:25:38.546
So let's put it to the test.

382
00:25:38.546 --> 00:25:43.526
Let's give it a composition
that's broken in some way.

383
00:25:43.746 --> 00:25:47.116
So let's switch to our
pre-prepared compositions.

384
00:25:47.376 --> 00:25:51.826
Alright, I wasn't going to
show you the debug viewer yet.

385
00:25:51.826 --> 00:25:52.716
Let's play this guy.

386
00:25:52.716 --> 00:25:57.756
It's going to dissolve
into the deer,

387
00:25:58.286 --> 00:25:59.886
there's something
visually wrong there,

388
00:25:59.886 --> 00:26:02.306
let's just play that
slowly through.

389
00:25:59.886 --> 00:26:02.306
let's just play that
slowly through.

390
00:26:03.416 --> 00:26:07.256
If we dissolve away from the
boat, the deer comes through

391
00:26:07.256 --> 00:26:09.786
and it jumps straight
through that is not right.

392
00:26:10.086 --> 00:26:11.326
Okay, so we've got
something wrong here.

393
00:26:11.516 --> 00:26:14.806
Rather look at the code,

394
00:26:15.046 --> 00:26:17.786
we'll see if we can
spot it with this guy.

395
00:26:17.786 --> 00:26:23.096
Okay, you can probably spot that
straight away and you can see

396
00:26:23.096 --> 00:26:26.576
that for video instruction,
the dissolve,

397
00:26:26.576 --> 00:26:32.046
we can see the opacity ramp
descending all the way here.

398
00:26:32.666 --> 00:26:37.106
So the video instruction
starts here and ends there,

399
00:26:37.106 --> 00:26:40.126
so that's supposed to be
our dissolve, which is going

400
00:26:40.126 --> 00:26:44.056
to take two source video tracks.

401
00:26:45.236 --> 00:26:50.126
One, that starts here, it
does last for the duration,

402
00:26:50.126 --> 00:26:54.306
but this guy is too short.

403
00:26:55.996 --> 00:26:56.086
[Pause] So.

404
00:26:56.336 --> 00:27:03.376
And I just happen to know
where that problem is.

405
00:26:56.336 --> 00:27:03.376
And I just happen to know
where that problem is.

406
00:27:03.376 --> 00:27:08.866
And your bugs won't
be this easy.

407
00:27:08.866 --> 00:27:15.956
I tried to obfuscate
that, but [laughing].

408
00:27:16.176 --> 00:27:16.516
[Pause] Okay.

409
00:27:17.706 --> 00:27:21.316
Switch to the, hopefully
now fixed, composition.

410
00:27:21.926 --> 00:27:26.846
And there we see the
first video track.

411
00:27:27.046 --> 00:27:27.646
It looks good.

412
00:27:29.016 --> 00:27:30.046
Now we get the dissolve.

413
00:27:30.686 --> 00:27:36.176
Awesome. But there are worse
ways for the composition

414
00:27:36.176 --> 00:27:38.026
to be broken than that.

415
00:27:39.076 --> 00:27:40.716
In fact, let me just
run that again.

416
00:27:42.956 --> 00:27:45.426
Okay so let's have
a look at the,

417
00:27:46.256 --> 00:27:47.576
the gap in the video
instruction.

418
00:27:48.716 --> 00:27:51.716
Black. Not good.

419
00:27:51.716 --> 00:27:54.496
We'll have a look there.

420
00:27:55.186 --> 00:27:58.636
And here, now, we can spot
this guy straight away.

421
00:27:59.256 --> 00:28:03.666
Down here we have a gap between
the dissolve instructions

422
00:27:59.256 --> 00:28:03.666
Down here we have a gap between
the dissolve instructions

423
00:28:04.616 --> 00:28:07.726
and the last instruction,
which isn't good.

424
00:28:08.196 --> 00:28:12.206
So, that should be nice and easy
to fix just like the last one.

425
00:28:13.726 --> 00:28:14.436
Now this guy here.

426
00:28:14.789 --> 00:28:16.789
[Laughing]

427
00:28:17.142 --> 00:28:19.142
[ Silence ]

428
00:28:19.496 --> 00:28:26.336
Now the sea otters.

429
00:28:26.836 --> 00:28:32.516
[ Silence ]

430
00:28:33.016 --> 00:28:37.606
And there we go,
job done, fixed.

431
00:28:38.926 --> 00:28:46.596
Okay. Okay so that's
AVCompositionDebugViewer,

432
00:28:46.596 --> 00:28:50.106
which is a sample for
Mavericks and iOS 7.

433
00:28:51.816 --> 00:28:54.036
Now we've made it simple so
that it's particularly easy

434
00:28:54.036 --> 00:28:58.326
for you guys to drop it
into your app and modify it.

435
00:28:58.326 --> 00:29:00.316
Extend it to draw your
own video instructions.

436
00:28:58.326 --> 00:29:00.316
Extend it to draw your
own video instructions.

437
00:29:01.066 --> 00:29:05.296
Now remember, it's just a
noninteractive view, okay.

438
00:29:05.746 --> 00:29:10.806
Now it's going to help you
spot those overlaps and gaps

439
00:29:10.806 --> 00:29:12.266
as we saw, you know,
in the tracks,

440
00:29:12.266 --> 00:29:13.976
the video instructions,
and the audio.

441
00:29:15.026 --> 00:29:21.946
But don't forget the validation
API that we have in there,

442
00:29:22.376 --> 00:29:25.966
the AVVideoComposition
ValidationHandling protocol.

443
00:29:26.276 --> 00:29:30.296
So you want to implement that
and then you'll get callbacks

444
00:29:30.296 --> 00:29:33.026
to see when we encounter
something a bit untoward

445
00:29:33.026 --> 00:29:33.906
in your composition.

446
00:29:33.906 --> 00:29:44.266
So what have you
looked at today?

447
00:29:44.266 --> 00:29:47.886
Well, we've spent a few minutes
just reviewing the composition

448
00:29:47.886 --> 00:29:51.136
architecture, to see where
the built-in compositor fits

449
00:29:51.136 --> 00:29:51.366
in [Pause].

450
00:29:51.956 --> 00:29:58.216
And we've discovered the
new custom compositing API

451
00:29:58.436 --> 00:30:02.366
with the two new protocols
and the request object.

452
00:29:58.436 --> 00:30:02.366
with the two new protocols
and the request object.

453
00:30:03.076 --> 00:30:07.586
And we've see how
important it is

454
00:30:07.586 --> 00:30:12.166
to choose the source pixel
buffer formats and the output.

455
00:30:12.836 --> 00:30:17.336
And we looked a little
bit at tweening

456
00:30:17.336 --> 00:30:20.306
and interpolating your
video mixing parameters

457
00:30:20.556 --> 00:30:22.176
across the time range
of your effect.

458
00:30:26.456 --> 00:30:28.356
And we talked a bit
about performance,

459
00:30:28.936 --> 00:30:32.676
so remember those three booleans
inside the instruction protocol,

460
00:30:33.166 --> 00:30:36.966
have a good look at them.

461
00:30:37.156 --> 00:30:39.496
And lastly, we saw
our sea otters again

462
00:30:39.496 --> 00:30:41.696
in debugging compositions.

463
00:30:42.746 --> 00:30:45.546
So that's
AVCompositionDebugViewer,

464
00:30:45.816 --> 00:30:48.976
which is a great visualization
technique and much simpler

465
00:30:48.976 --> 00:30:50.766
than looking at reams of code.

466
00:30:56.456 --> 00:31:00.566
So over the next few months,
I want to see you guys drop

467
00:30:56.456 --> 00:31:00.566
So over the next few months,
I want to see you guys drop

468
00:31:00.566 --> 00:31:04.236
in some great OpenGL visuals
and I want to see them appearing

469
00:31:04.236 --> 00:31:06.086
in those video editing apps.

470
00:31:06.666 --> 00:31:09.446
It's going to be, we're
going to see awesome effects,

471
00:31:09.876 --> 00:31:12.166
transitions, and video
generators[Pause].

472
00:31:12.976 --> 00:31:17.456
So if you need some information,

473
00:31:17.456 --> 00:31:21.856
then do e-mail our
evangelist, John Geleynse.

474
00:31:21.856 --> 00:31:28.616
We'll have some related
sessions that you can catch

475
00:31:28.616 --> 00:31:31.846
on video now at WWDC app.

476
00:31:32.106 --> 00:31:32.926
Thank you very much.

477
00:31:33.426 --> 00:31:46.740
[ Applause ]
