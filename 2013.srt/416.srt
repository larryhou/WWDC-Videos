
1
00:00:01.516 --> 00:00:09.566
[ Silence ]

2
00:00:10.066 --> 00:00:14.036
>> Hello, welcome to the World
Wide Developer Conference,

3
00:00:14.036 --> 00:00:17.926
this is the second automation
session today, how many went

4
00:00:17.926 --> 00:00:19.896
to first session
this morning...okay.

5
00:00:20.686 --> 00:00:25.996
So our little presentation
about Libraries kind of got

6
00:00:26.046 --> 00:00:29.906
to you a little bit huh,
you're interested in this.

7
00:00:30.166 --> 00:00:37.626
This session we go in depth in
discussing AppleScript Libraries

8
00:00:37.846 --> 00:00:42.626
and we'll examine not only
simple but complex ones

9
00:00:42.626 --> 00:00:44.366
and we'll walk you
through the process

10
00:00:44.366 --> 00:00:46.876
of how you create
those including

11
00:00:46.876 --> 00:00:50.336
for the first time ever
anywhere an example of how

12
00:00:50.336 --> 00:00:52.196
to create a scripting
dictionary.

13
00:00:52.466 --> 00:00:55.566
I think once you
see how it's done,

14
00:00:55.566 --> 00:00:58.006
it's not so frightening
it's pretty easy

15
00:00:58.006 --> 00:01:00.226
to do it's just an XML file.

16
00:00:58.006 --> 00:01:00.226
to do it's just an XML file.

17
00:01:00.876 --> 00:01:02.826
So today we're going
to be talking

18
00:01:02.826 --> 00:01:07.036
about AppleScript Libraries
and what they can do for you.

19
00:01:07.966 --> 00:01:12.226
Let's try click, welcome, today
it's AppleScript Libraries,

20
00:01:12.226 --> 00:01:16.626
we covered that and we're
going to be learning

21
00:01:16.626 --> 00:01:20.716
about what they are,
how you incorporate them

22
00:01:20.716 --> 00:01:23.896
into your environment, how
you call them, how use them,

23
00:01:24.176 --> 00:01:28.406
how you create them and
how you can deploy them.

24
00:01:28.606 --> 00:01:32.166
So begin with, why
Libraries...those who were

25
00:01:32.166 --> 00:01:37.426
at the first session understand
that I'm one of those kind

26
00:01:37.426 --> 00:01:44.046
of people that is a code
maven, I have sampled routines

27
00:01:44.046 --> 00:01:47.266
that do just about
everything and I have them all

28
00:01:47.266 --> 00:01:51.706
over the place on my drives
and I'm very thankful now

29
00:01:51.706 --> 00:01:53.846
that we have iCloud
support so I can keep them

30
00:01:53.846 --> 00:01:58.206
in one central location
but I like to use routines

31
00:01:58.206 --> 00:02:02.926
and handlers in my scripts quite
a bit instead of writing code

32
00:01:58.206 --> 00:02:02.926
and handlers in my scripts quite
a bit instead of writing code

33
00:02:02.926 --> 00:02:05.206
over and over, I like
just getting the routines

34
00:02:05.206 --> 00:02:07.606
and handlers and pasting
them into my scripts.

35
00:02:07.606 --> 00:02:10.656
So if you're like me and you
use the same routine over

36
00:02:10.656 --> 00:02:13.296
and over you're going
to like Libraries,

37
00:02:13.416 --> 00:02:14.886
they're going to
be useful for you.

38
00:02:15.716 --> 00:02:18.686
Again if you are a person

39
00:02:18.686 --> 00:02:23.326
that uses third party scripting
additions to find that command

40
00:02:23.326 --> 00:02:26.526
that was missing in
AppleScript you're going

41
00:02:26.526 --> 00:02:28.426
to like Libraries as well.

42
00:02:29.956 --> 00:02:34.116
If you just want to be someone
that can simplify your scripts

43
00:02:34.116 --> 00:02:36.816
if you want to take all
this complexity and routines

44
00:02:36.816 --> 00:02:41.096
and handlers out of your scripts
and just have an easier way

45
00:02:41.246 --> 00:02:43.796
to manage them and to be able

46
00:02:43.796 --> 00:02:46.386
to call them globally throughout
your scripts you're going

47
00:02:46.386 --> 00:02:47.516
to like Libraries.

48
00:02:47.816 --> 00:02:50.656
It all started because you
know once I learned how

49
00:02:50.656 --> 00:02:54.556
to create a subroutine or
handler I started using them

50
00:02:54.556 --> 00:02:57.816
and I would put them in my
scripts and it worked very well

51
00:02:58.176 --> 00:03:01.056
and then I would create
another one and then I would put

52
00:02:58.176 --> 00:03:01.056
and then I would create
another one and then I would put

53
00:03:01.056 --> 00:03:04.866
in in some of my scripts and
not in some of the other ones

54
00:03:04.866 --> 00:03:07.406
and I would update one but
I didn't update the other

55
00:03:07.406 --> 00:03:08.776
and then I added more routines

56
00:03:08.776 --> 00:03:10.676
and then the next
thing you know it gets

57
00:03:10.676 --> 00:03:14.586
to be this real big jumble
that you try to manage.

58
00:03:14.586 --> 00:03:18.416
Well we're solving that
issue and those problems now

59
00:03:19.136 --> 00:03:21.706
in Mavericks with
the introduction

60
00:03:21.706 --> 00:03:23.386
of AppleScript Libraries.

61
00:03:24.516 --> 00:03:27.756
They are a new plug in
architecture for AppleScript

62
00:03:28.216 --> 00:03:33.566
that allows you to create
powerful collections of handlers

63
00:03:34.236 --> 00:03:39.296
and tools yourself and deploy
them across your machinery.

64
00:03:40.226 --> 00:03:44.636
In addition, they differ from
the standard scripting addition

65
00:03:44.846 --> 00:03:48.606
that we're used to using all
the time in a couple ways.

66
00:03:48.606 --> 00:03:51.616
First of all they can be written
in AppleScript, you don't have

67
00:03:51.646 --> 00:03:58.016
to know C or C ++ in order to
create an AppleScript Library.

68
00:03:58.296 --> 00:04:01.756
Because Libraries are
loaded by the script,

69
00:03:58.296 --> 00:04:01.756
Because Libraries are
loaded by the script,

70
00:04:02.106 --> 00:04:04.466
the script is controlling
how they use

71
00:04:04.946 --> 00:04:08.886
and that will help you
avoid terminology conflicts

72
00:04:08.886 --> 00:04:12.506
or resource problems, all
of that kind of goes away

73
00:04:12.796 --> 00:04:17.005
because the script is
loading the Library

74
00:04:17.005 --> 00:04:19.886
and the Libraries
live within the space

75
00:04:19.886 --> 00:04:22.396
of the application that's
executing the script.

76
00:04:23.616 --> 00:04:27.446
Now AppleScript Libraries have
some extra abilities to help you

77
00:04:27.446 --> 00:04:29.936
out and the first one
that's really important is

78
00:04:30.286 --> 00:04:33.476
that they can take advantage
of AppleScript objective C.

79
00:04:34.146 --> 00:04:41.146
AppleScript objective C exposes
the Cocoa classes to AppleScript

80
00:04:41.146 --> 00:04:45.176
so things like NS String
become available to you

81
00:04:45.176 --> 00:04:48.886
and all the methods from
that and the instants methods

82
00:04:48.886 --> 00:04:51.516
from that now become
available for you to use

83
00:04:51.516 --> 00:04:55.356
in your AppleScripts scripts
and your AppleScript Libraries.

84
00:04:56.246 --> 00:05:00.886
In addition you can also have
your libraries publish their own

85
00:04:56.246 --> 00:05:00.886
In addition you can also have
your libraries publish their own

86
00:05:00.886 --> 00:05:05.126
terminology which means
instead of you having

87
00:05:05.126 --> 00:05:09.906
to remember a specific handler
name and a specific order

88
00:05:10.606 --> 00:05:13.186
of indicators or
data pass throughs

89
00:05:13.186 --> 00:05:16.266
or whatever you can actually
use English like terms

90
00:05:16.266 --> 00:05:20.546
that you create that work for
you and have those be the way

91
00:05:20.546 --> 00:05:23.856
that you call the
AppleScript Library

92
00:05:23.856 --> 00:05:26.026
so the handlers within
the Library.

93
00:05:26.156 --> 00:05:28.616
So it's very powerful
and in support

94
00:05:28.616 --> 00:05:31.036
of that we've created a
couple new constructs,

95
00:05:31.036 --> 00:05:37.006
the first is a Script Library
reference, a way to easily refer

96
00:05:37.006 --> 00:05:40.446
to a Script Library that you
have installed on your computer.

97
00:05:41.046 --> 00:05:44.146
You'll see how that differs
from the old load Script

98
00:05:44.146 --> 00:05:48.536
that we all used to use
as a substitute for this.

99
00:05:49.156 --> 00:05:52.786
Then finally we've
created a new construct

100
00:05:52.786 --> 00:05:56.326
that is called the use
clause and it's a way

101
00:05:56.326 --> 00:06:01.106
to import terminology and
to bring in dictionaries

102
00:05:56.326 --> 00:06:01.106
to import terminology and
to bring in dictionaries

103
00:06:01.186 --> 00:06:03.266
and libraries into your script

104
00:06:03.266 --> 00:06:06.586
and have them be available
globally throughout.

105
00:06:07.706 --> 00:06:09.076
So let's take a look at this,

106
00:06:09.666 --> 00:06:15.066
now in the old days before
this many of us have tried

107
00:06:15.066 --> 00:06:20.536
to use the old script storing
techniques that we had available

108
00:06:20.536 --> 00:06:24.176
through the scripting
addition of load script.

109
00:06:24.716 --> 00:06:29.026
Now if you go to your library
pallet in the AppleScript editor

110
00:06:29.026 --> 00:06:31.246
and you select standard
editions and you open

111
00:06:31.246 --> 00:06:34.936
up the dictionary window for the
standard editions you have nine

112
00:06:34.936 --> 00:06:39.286
suites in the dictionary and
one of those suites deals

113
00:06:39.286 --> 00:06:43.736
with scripting commands and one
of those commands is load script

114
00:06:44.316 --> 00:06:47.996
and here is the definition
for that, let's zoom that in.

115
00:06:48.726 --> 00:06:54.116
Now this command was designed
for you to be able to point

116
00:06:54.116 --> 00:06:59.386
at a specific script file,
load its contents into memory

117
00:06:59.386 --> 00:07:03.006
and then talk to that
script file in memory

118
00:06:59.386 --> 00:07:03.006
and then talk to that
script file in memory

119
00:07:03.006 --> 00:07:04.486
and have it do things for you.

120
00:07:05.006 --> 00:07:09.496
But there are a couple
issues with using this

121
00:07:09.496 --> 00:07:11.456
and here's an example script

122
00:07:11.456 --> 00:07:14.826
that uses the load
script scripting edition.

123
00:07:15.436 --> 00:07:18.636
You can see that the first
thing is you have to know

124
00:07:18.636 --> 00:07:23.816
where the script that you are
using as a library exists,

125
00:07:23.816 --> 00:07:27.186
where is it, you have to
have its exact location

126
00:07:27.606 --> 00:07:29.696
and then once you've identified

127
00:07:29.696 --> 00:07:33.676
where it is then you perform
this load script and store it

128
00:07:33.676 --> 00:07:38.836
into a variable that represents
the contents of that script.

129
00:07:39.696 --> 00:07:42.656
Then elsewhere in your
script you talk to that

130
00:07:42.656 --> 00:07:46.776
and you call its handlers or
whatever handlers are available

131
00:07:46.776 --> 00:07:51.526
within it and have it work but
this is a problem because first

132
00:07:51.526 --> 00:07:54.726
of all it requires that you know
exactly where it is and if it's

133
00:07:54.726 --> 00:07:57.366
on a different machine then
you have to develop way

134
00:07:57.846 --> 00:08:00.156
to locate folders locally,

135
00:07:57.846 --> 00:08:00.156
to locate folders locally,

136
00:08:00.446 --> 00:08:03.186
regardless of how drives
are named and you have

137
00:08:03.246 --> 00:08:06.526
to have error handlers to
make sure that they're there

138
00:08:06.526 --> 00:08:07.666
and those kind of things

139
00:08:08.376 --> 00:08:14.066
and then it requires explicit
loading, explicit loading,

140
00:08:14.466 --> 00:08:19.556
explicit loading of the targeted
script file, you have to do that

141
00:08:20.636 --> 00:08:25.426
and it also requires that
you address the handlers

142
00:08:25.426 --> 00:08:29.376
from within the loaded
script file directly and pass

143
00:08:29.376 --> 00:08:30.766
through information to them.

144
00:08:31.286 --> 00:08:34.025
This means that there's
no custom terminology,

145
00:08:34.265 --> 00:08:36.506
you have to remember
handler names,

146
00:08:36.756 --> 00:08:40.256
you have to remember the order
of the various components

147
00:08:40.306 --> 00:08:44.536
of the handler and there's
no access to the power

148
00:08:44.856 --> 00:08:48.706
of AppleScript objective C and
the wonderful Cocoa Libraries

149
00:08:48.706 --> 00:08:50.836
that are available
too on the computer.

150
00:08:51.456 --> 00:08:53.006
So there are some issues

151
00:08:53.006 --> 00:08:55.466
with using the load
script scripting edition

152
00:08:55.936 --> 00:08:58.036
and we've addressed
a lot of those

153
00:08:58.036 --> 00:09:01.936
with our AppleScript Libraries
so let's take a look at it.

154
00:08:58.036 --> 00:09:01.936
with our AppleScript Libraries
so let's take a look at it.

155
00:09:02.686 --> 00:09:04.826
We're going to start
very simply;

156
00:09:04.826 --> 00:09:09.126
I always like starting
exploring a new concept

157
00:09:09.456 --> 00:09:11.116
in the most fundamental ways.

158
00:09:11.116 --> 00:09:14.176
So we're going to look at
simple AppleScript Libraries,

159
00:09:14.406 --> 00:09:17.766
you might never write
something this simple yourself

160
00:09:17.866 --> 00:09:20.046
but by examining
this we're going

161
00:09:20.046 --> 00:09:22.906
to learn the principles behind
this whole architecture,

162
00:09:23.006 --> 00:09:25.376
is that okay, we'll
start simple...good.

163
00:09:25.736 --> 00:09:29.006
Specifically we're going
to look at a problem

164
00:09:29.006 --> 00:09:30.306
that exists all the time

165
00:09:30.636 --> 00:09:35.066
of solving the missing command
problem, I want to be able

166
00:09:35.066 --> 00:09:38.836
to do something but there's no
AppleScript command for that.

167
00:09:39.316 --> 00:09:42.836
So by examining this little
issue we're going to learn how

168
00:09:42.836 --> 00:09:45.776
to create and use
AppleScript Libraries.

169
00:09:46.776 --> 00:09:52.146
Now for our example of a missing
command here is the new notes

170
00:09:52.146 --> 00:09:56.076
application in Mavericks,
I'm going to select some text

171
00:09:56.076 --> 00:09:59.156
in there and then right click
the selection so it brings

172
00:09:59.156 --> 00:10:00.976
up the contextual menu.

173
00:09:59.156 --> 00:10:00.976
up the contextual menu.

174
00:10:01.836 --> 00:10:03.646
Now some of you might know

175
00:10:03.646 --> 00:10:08.346
that for a couple system
releases now we implemented some

176
00:10:08.346 --> 00:10:12.216
new text handling options

177
00:10:12.366 --> 00:10:16.536
within the standard text
contextual menu and one

178
00:10:16.536 --> 00:10:20.816
of them is transformations
where you have the option

179
00:10:20.816 --> 00:10:26.106
to change the case of selected
text to upper case, lower case,

180
00:10:26.356 --> 00:10:30.606
capitalize or that's
called word case sometimes

181
00:10:30.606 --> 00:10:32.636
and you might find it
called that as well.

182
00:10:33.006 --> 00:10:37.386
But this is a command that's
available on the contextual menu

183
00:10:38.006 --> 00:10:42.396
but it's not available from
within AppleScript itself.

184
00:10:43.006 --> 00:10:46.646
So what I want to do is
use this as an example

185
00:10:46.646 --> 00:10:52.016
when we're creating our
simple library to begin with

186
00:10:52.766 --> 00:10:56.366
and we're going to look
at being able to convert

187
00:10:56.366 --> 00:11:00.196
to upper case transformation, so
we'll have something like how,

188
00:10:56.366 --> 00:11:00.196
to upper case transformation, so
we'll have something like how,

189
00:11:00.196 --> 00:11:05.946
now brown cow in lower case
transforms to how now brown cow

190
00:11:05.946 --> 00:11:10.206
in upper case, we're going to
have a lower case transformation

191
00:11:10.506 --> 00:11:13.256
and instead of capitalization
I'm just going

192
00:11:13.256 --> 00:11:15.276
to call it a word
case transformation

193
00:11:15.486 --> 00:11:18.636
where the first letter of
each word is capitalized

194
00:11:19.086 --> 00:11:21.956
and this is what we're going
to use as our sample command.

195
00:11:22.026 --> 00:11:25.686
We're going to look
at this in two types

196
00:11:25.776 --> 00:11:27.466
of simple script libraries,

197
00:11:27.776 --> 00:11:32.276
one where the library is written
entirely in native AppleScript

198
00:11:32.926 --> 00:11:36.736
and two, where the library
is written using AppleScript

199
00:11:36.736 --> 00:11:37.736
objective C.

200
00:11:38.506 --> 00:11:41.236
So just to review
here we're going

201
00:11:41.236 --> 00:11:45.196
to take this missing command of
transformed text and we're going

202
00:11:45.196 --> 00:11:47.506
to use that and create
two simple libraries

203
00:11:47.506 --> 00:11:50.866
to address the fact that's
it's not native in AppleScript.

204
00:11:50.866 --> 00:11:52.486
We're going to create
one in AppleScript,

205
00:11:52.486 --> 00:11:55.606
one in AppleScript
objective C, let's begin.

206
00:11:56.386 --> 00:12:01.576
An AppleScript script
library, so it beings

207
00:11:56.386 --> 00:12:01.576
An AppleScript script
library, so it beings

208
00:12:01.576 --> 00:12:04.986
with having a handler some
kind of AppleScript handler

209
00:12:04.986 --> 00:12:07.896
and here I have one,
you'll notice that the name

210
00:12:07.896 --> 00:12:11.426
of the handler is
change case of text,

211
00:12:11.476 --> 00:12:13.696
we'll use this handler
throughout here

212
00:12:13.936 --> 00:12:19.046
and it has two parameters,
one is the source text

213
00:12:19.046 --> 00:12:22.516
or the what you want
to transform,

214
00:12:22.516 --> 00:12:24.226
the text that you
want to transform

215
00:12:24.606 --> 00:12:28.106
and the second is a case
indicator and this case

216
00:12:28.276 --> 00:12:32.306
of this handler it's going
to a numeric value zero

217
00:12:32.306 --> 00:12:36.846
or 1 that indicates whether
you want upper or lower case.

218
00:12:37.486 --> 00:12:41.736
It's a simple AppleScript
based upon your case indicator,

219
00:12:41.736 --> 00:12:45.176
it creates two comparison
lists and then iterate

220
00:12:45.176 --> 00:12:48.226
through all the characters
in the past text

221
00:12:48.226 --> 00:12:51.276
and matches whether
it's an iteration list

222
00:12:51.276 --> 00:12:55.106
and then finally returns
the resulting string back

223
00:12:55.106 --> 00:12:56.966
to the script itself.

224
00:12:57.536 --> 00:13:00.686
Something simple right, now
we're going to take this

225
00:12:57.536 --> 00:13:00.686
Something simple right, now
we're going to take this

226
00:13:00.736 --> 00:13:03.476
and make this and make
this into a library

227
00:13:03.756 --> 00:13:05.416
and it's simplest
doing the following.

228
00:13:05.826 --> 00:13:10.156
We're just going to take a blank
script in the AppleScript editor

229
00:13:10.536 --> 00:13:13.786
and we're going to paste
the handler into this,

230
00:13:14.196 --> 00:13:17.666
we're going to compile it
and then just click save

231
00:13:17.986 --> 00:13:21.736
and we're going to save
it as a script file

232
00:13:22.286 --> 00:13:27.146
and you'll notice we named it
AppleScript text transform is

233
00:13:27.146 --> 00:13:28.776
the name of this little library.

234
00:13:29.196 --> 00:13:31.876
Now libraries can
contain multiple handlers

235
00:13:32.076 --> 00:13:33.576
but for our example
they're just going

236
00:13:33.576 --> 00:13:35.386
to contain one handler, okay.

237
00:13:36.086 --> 00:13:41.846
And we simply name the
library and then save it.

238
00:13:42.116 --> 00:13:44.766
Next we install the
script library,

239
00:13:45.466 --> 00:13:47.526
and the way that you
install it is you go

240
00:13:47.526 --> 00:13:50.606
to your home library
folder and within

241
00:13:50.606 --> 00:13:54.886
that library folder you create
a new folder called Script

242
00:13:55.036 --> 00:14:01.866
Libraries and then you take your
newly saved AppleScript file

243
00:13:55.036 --> 00:14:01.866
Libraries and then you take your
newly saved AppleScript file

244
00:14:03.016 --> 00:14:06.726
and you drag that into the
Script Libraries folders

245
00:14:07.806 --> 00:14:10.986
and it becomes part of
the AppleScript system

246
00:14:10.986 --> 00:14:14.246
on your computer, that's it,
it's now installed for you.

247
00:14:15.256 --> 00:14:18.906
So how do you use the
AppleScript script library?

248
00:14:18.906 --> 00:14:22.566
Now that we've created this
simple library with one handler

249
00:14:22.566 --> 00:14:26.186
for transforming the case of
text here's how you use it.

250
00:14:27.416 --> 00:14:31.596
We have a new construct in
AppleScript and it's a way

251
00:14:31.596 --> 00:14:34.816
to identify easily
AppleScript Libraries.

252
00:14:35.106 --> 00:14:39.766
So you no longer need to
point to a specific file

253
00:14:39.856 --> 00:14:42.856
through a file reference
like you did with LoadScript

254
00:14:43.676 --> 00:14:48.516
and you no longer need to
explicitly load the file

255
00:14:49.976 --> 00:14:53.426
and all you need to do now is
you go into a blank script,

256
00:14:54.426 --> 00:14:58.696
you type the word script
followed by the name

257
00:14:58.696 --> 00:15:02.966
of your library and you notice
I left the name extension off,

258
00:14:58.696 --> 00:15:02.966
of your library and you notice
I left the name extension off,

259
00:15:02.966 --> 00:15:04.666
you don't need to have
the name extension there.

260
00:15:05.076 --> 00:15:09.866
So script, AppleScript
transform and then

261
00:15:09.866 --> 00:15:15.596
when I compile this you'll
notice that it formats

262
00:15:15.666 --> 00:15:22.106
and this is now a
AppleScript Library reference,

263
00:15:22.466 --> 00:15:24.816
it's a way to point
to that library,

264
00:15:24.816 --> 00:15:29.746
it was automatically located on
your system and it's prepared

265
00:15:29.746 --> 00:15:33.726
for use, it's ready to
go all you have to do

266
00:15:33.726 --> 00:15:36.806
to address it is you can
place the verb tell before it

267
00:15:37.016 --> 00:15:40.696
or in this case you could
enclose it within a tell block

268
00:15:41.196 --> 00:15:44.816
and then refer to
one of the handlers

269
00:15:44.816 --> 00:15:46.876
within that particular library.

270
00:15:47.466 --> 00:15:51.336
So here I have the name of our
handler is change case of text,

271
00:15:51.336 --> 00:15:56.106
I'm passing into the
handler how now brown cow

272
00:15:56.376 --> 00:16:00.326
and I have a case indicator of
one meaning I want upper case.

273
00:15:56.376 --> 00:16:00.326
and I have a case indicator of
one meaning I want upper case.

274
00:16:00.856 --> 00:16:05.126
So I run my script, it
automatically gets processed

275
00:16:05.126 --> 00:16:06.786
by your AppleScript library

276
00:16:06.786 --> 00:16:08.986
and the results are
returned back to the script.

277
00:16:09.456 --> 00:16:13.026
So that's the basic process

278
00:16:13.176 --> 00:16:17.936
of creating a very simple
basic AppleScript Library.

279
00:16:18.676 --> 00:16:21.046
So here's the routine
that we used,

280
00:16:21.546 --> 00:16:27.726
it's a little subroutine now it
does convert case of some text

281
00:16:27.726 --> 00:16:30.146
from upper to lower
and lower to upper

282
00:16:30.646 --> 00:16:34.756
but it doesn't handle special
characters and it doesn't work

283
00:16:34.756 --> 00:16:36.426
with multiple languages.

284
00:16:36.826 --> 00:16:40.626
In order to have an
AppleScript handler to do all

285
00:16:40.626 --> 00:16:44.156
that it might be as
long as I am tall

286
00:16:44.156 --> 00:16:48.486
or a couple times past that, it
would be very complex to do all

287
00:16:48.486 --> 00:16:50.316
that in native AppleScript.

288
00:16:50.706 --> 00:16:53.236
So in this case we need
to turn to something

289
00:16:53.236 --> 00:16:56.046
with a little bit more
power and we're going

290
00:16:56.046 --> 00:16:59.696
to create our second library
example using the power

291
00:16:59.696 --> 00:17:01.786
of AppleScript objective C.

292
00:16:59.696 --> 00:17:01.786
of AppleScript objective C.

293
00:17:02.156 --> 00:17:04.796
So this will be a
simple library written

294
00:17:04.796 --> 00:17:07.856
in AppleScript objective C,
everybody with me so far?

295
00:17:08.786 --> 00:17:10.195
Not so hard right, okay good.

296
00:17:11.766 --> 00:17:17.796
Okay here's the same handler,
this time it's change case

297
00:17:17.796 --> 00:17:23.156
of text and it gets two things
passed to it, numeric indicator,

298
00:17:23.156 --> 00:17:26.266
I mean the source text that
we're going to transform

299
00:17:26.556 --> 00:17:29.216
and a numeric indicator
indicating text.

300
00:17:29.266 --> 00:17:32.026
But this time the body
of the handler is written

301
00:17:32.026 --> 00:17:35.266
in AppleScript objective
C and the first thing

302
00:17:35.266 --> 00:17:38.646
that the handler does
is convert the past

303
00:17:38.646 --> 00:17:45.146
into a Cocoa string using NS
string method called string

304
00:17:45.146 --> 00:17:50.826
with string, then based upon the
numeric indicator that's passed

305
00:17:50.826 --> 00:17:55.256
through the numeric case
indicator it executes a method

306
00:17:55.256 --> 00:17:59.336
on that instance, either upper
case string, lower case string

307
00:17:59.336 --> 00:18:00.656
or capitalized string.

308
00:17:59.336 --> 00:18:00.656
or capitalized string.

309
00:18:01.536 --> 00:18:04.606
Once that transforms
been applied and copied

310
00:18:04.606 --> 00:18:06.046
into the variable next

311
00:18:06.046 --> 00:18:10.716
to it adjusted string the
handler returns the adjusted

312
00:18:10.716 --> 00:18:15.766
string back to the script
as text by just saying

313
00:18:15.766 --> 00:18:20.236
as text in your coercion.

314
00:18:20.236 --> 00:18:23.016
So this is the handler
that we're going to use

315
00:18:23.236 --> 00:18:24.986
in our second example library.

316
00:18:25.706 --> 00:18:30.946
We take a blank script
and we paste our handler,

317
00:18:30.946 --> 00:18:34.716
the AppleScript objective C
handler into our script, we save

318
00:18:35.506 --> 00:18:39.946
and in the sheet to save a
little bit of time I'm going

319
00:18:39.946 --> 00:18:42.036
to save it into the
script libraries folder

320
00:18:42.036 --> 00:18:45.376
that I already created instead
of dragging it in the finder.

321
00:18:45.546 --> 00:18:48.076
You can if you...you
can drag if you want to

322
00:18:48.446 --> 00:18:50.596
but for our purposes here
I'm just going to save it

323
00:18:50.596 --> 00:18:53.676
into the newly created
script libraries folder.

324
00:18:54.516 --> 00:18:56.876
Next I'm going to give
it a different name,

325
00:18:56.876 --> 00:19:01.696
I'm going to call this one ASOC
text transform and ASOC stands

326
00:18:56.876 --> 00:19:01.696
I'm going to call this one ASOC
text transform and ASOC stands

327
00:19:01.696 --> 00:19:03.426
for AppleScript objective C.

328
00:19:04.676 --> 00:19:07.546
Finally at the bottom
under format instead

329
00:19:07.546 --> 00:19:11.336
of the standard script file
format we're going to choose

330
00:19:11.396 --> 00:19:13.796
to save this as a script bundle

331
00:19:14.516 --> 00:19:16.666
and you'll see why
in just a moment.

332
00:19:17.046 --> 00:19:23.406
So we save our script and then
you'll notice once you've saved

333
00:19:23.406 --> 00:19:27.996
it in a bundle format at the top
menu bar there's a new button

334
00:19:27.996 --> 00:19:32.106
that becomes available and
what that button does is

335
00:19:32.106 --> 00:19:35.416
when you toggle it, it
will show you the contents

336
00:19:35.606 --> 00:19:40.846
of the script bundle so if I
click that a drawer is exposed

337
00:19:40.846 --> 00:19:42.426
and this drawer contains a lot

338
00:19:42.426 --> 00:19:45.116
of valuable information
about this bundle.

339
00:19:45.916 --> 00:19:50.256
First of all it contains the
name of the script library,

340
00:19:50.256 --> 00:19:53.386
it contains its bundle
identifier

341
00:19:53.906 --> 00:19:56.226
where you can put
your developer domain

342
00:19:56.226 --> 00:19:57.546
and name it whatever you like,

343
00:19:58.386 --> 00:20:02.506
it contains a short version
number, a bundle version number,

344
00:19:58.386 --> 00:20:02.506
it contains a short version
number, a bundle version number,

345
00:20:02.696 --> 00:20:07.646
a copyright string, the
terminology file name

346
00:20:08.316 --> 00:20:12.946
and a check box indicating
whether this library uses

347
00:20:12.946 --> 00:20:18.126
AppleScript objective C, a
scroll area down at the bottom

348
00:20:18.126 --> 00:20:21.136
that will display the contents
of your resource folder

349
00:20:21.636 --> 00:20:25.906
and a little magic pop up menu
that does particular actions

350
00:20:25.906 --> 00:20:29.026
with things that you've
selected in the resource folder.

351
00:20:29.436 --> 00:20:32.496
So in this particular instance
there's only four things

352
00:20:32.496 --> 00:20:34.426
that we're interested in.

353
00:20:35.046 --> 00:20:38.296
They are...we're going to
start by adding the name

354
00:20:38.296 --> 00:20:44.416
of our library, ASOC text
transform, in the name field,

355
00:20:44.796 --> 00:20:48.836
we're going to give it our
developer domain identifier

356
00:20:48.836 --> 00:20:54.296
so here my company is nighthawk
productions dot asoc dot text

357
00:20:54.296 --> 00:20:59.146
dot transform and then we're
going to give a copyright string

358
00:21:00.006 --> 00:21:03.026
and most importantly we're
going to check the check box

359
00:21:03.026 --> 00:21:07.516
that says this library uses
AppleScript objective C.

360
00:21:07.656 --> 00:21:09.426
Those are the four
things we want to do

361
00:21:09.426 --> 00:21:10.756
since we're creating a library

362
00:21:10.756 --> 00:21:13.126
that uses AppleScript
objective C.

363
00:21:14.566 --> 00:21:18.296
Once we've done that then
I can close the drawer,

364
00:21:18.896 --> 00:21:24.256
save the script file, now
I've already installed this,

365
00:21:24.256 --> 00:21:26.876
remember I've saved it into
the script libraries folder,

366
00:21:26.876 --> 00:21:28.876
if you didn't you can drag it

367
00:21:28.876 --> 00:21:31.476
in yourself before
doing the next step.

368
00:21:32.066 --> 00:21:33.906
Now that I've had this library

369
00:21:33.906 --> 00:21:38.886
and it's installed how do
you use it, well the same way

370
00:21:38.886 --> 00:21:40.916
that you used the
earlier library,

371
00:21:40.916 --> 00:21:43.126
the first thing you do is
you type the word script,

372
00:21:43.566 --> 00:21:45.676
followed by the name
of the library,

373
00:21:45.676 --> 00:21:49.746
in this case it's ASOC text
transform, you compile it

374
00:21:49.746 --> 00:21:52.966
and you get your
AppleScript library reference,

375
00:21:53.046 --> 00:21:58.466
identifier so this indicates
to me because it's complied

376
00:21:58.836 --> 00:22:03.026
that the script has located the
library, prepared it for use,

377
00:21:58.836 --> 00:22:03.026
that the script has located the
library, prepared it for use,

378
00:22:03.026 --> 00:22:07.136
it's ready to go, I can
encase it within a tell block

379
00:22:07.136 --> 00:22:12.156
like I did before, I can
refer to the handler within,

380
00:22:12.156 --> 00:22:14.556
I can pass text into the handler

381
00:22:14.776 --> 00:22:18.346
and my first indicator is
the...case indicator is the

382
00:22:18.346 --> 00:22:19.316
number zero.

383
00:22:19.906 --> 00:22:24.676
So I run it and the result
will be all upper case how now

384
00:22:24.676 --> 00:22:25.696
brown cow.

385
00:22:26.606 --> 00:22:30.286
Let's iterate that case
indicator to the number one,

386
00:22:30.806 --> 00:22:35.086
run it again wa-la [phonetic]
I have all lower case,

387
00:22:35.476 --> 00:22:38.476
let's iterate it again
to the number two

388
00:22:38.896 --> 00:22:42.446
and I will get word case
where the first character

389
00:22:42.446 --> 00:22:44.316
of every word is capitalized.

390
00:22:44.636 --> 00:22:51.016
So this handler is much better
than the earlier handler

391
00:22:51.016 --> 00:22:52.836
that was just written
in AppleScript,

392
00:22:53.266 --> 00:22:57.146
it really has a lot more power
and ability because it taps

393
00:22:57.146 --> 00:23:00.536
into the power of the
Cocoa class NS String

394
00:22:57.146 --> 00:23:00.536
into the power of the
Cocoa class NS String

395
00:23:00.536 --> 00:23:01.906
to do all the heavy lifting.

396
00:23:03.036 --> 00:23:04.976
Now this works by converting

397
00:23:04.976 --> 00:23:07.956
to all the case conversions
we need,

398
00:23:08.386 --> 00:23:10.656
it works with special
characters and it works

399
00:23:10.656 --> 00:23:12.106
with multiple languages.

400
00:23:12.626 --> 00:23:18.096
So this is a very useful one and
to demo this I'm going to bring

401
00:23:18.096 --> 00:23:21.976
up my friend Chris Page from
the AppleScript team, thank you.

402
00:23:22.516 --> 00:23:26.556
[ Applause ]

403
00:23:27.056 --> 00:23:28.986
>> Now this is a script
that Sal showed you earlier

404
00:23:28.986 --> 00:23:32.606
and it has a function that
changes the case of some text

405
00:23:32.606 --> 00:23:36.966
and just a trivial example of
using that and I'm going to run

406
00:23:36.966 --> 00:23:39.766
that script and we can
see the result down here.

407
00:23:40.026 --> 00:23:41.746
We converted this
string to upper case.

408
00:23:42.326 --> 00:23:44.506
So just very quickly I'm going

409
00:23:44.506 --> 00:23:47.446
to give you the quick run
through, this is what happens

410
00:23:47.446 --> 00:23:48.796
when you already
know how to do this.

411
00:23:48.796 --> 00:23:51.826
I'm going to take this
function, I'm going to copy it

412
00:23:51.826 --> 00:23:56.966
into a new script and
I'm going to save it

413
00:23:57.236 --> 00:23:59.556
in the script libraries
folder and the slowest part

414
00:23:59.556 --> 00:24:00.756
of this is giving it a name,

415
00:23:59.556 --> 00:24:00.756
of this is giving it a name,

416
00:24:00.756 --> 00:24:07.016
I'm going to call it AppleScript
change case and we're done,

417
00:24:08.076 --> 00:24:09.066
we've now created a library.

418
00:24:09.706 --> 00:24:13.516
Now I'm going to run through
that a little bit slower

419
00:24:13.516 --> 00:24:15.686
for people who are
trying to follow along,

420
00:24:16.636 --> 00:24:23.316
I'm going to copy this
text, create a new script,

421
00:24:23.956 --> 00:24:26.926
paste it in and save it.

422
00:24:28.896 --> 00:24:32.456
Now this is...if this is
the first time doing this

423
00:24:32.456 --> 00:24:34.826
and you don't have the script
libraries folder here's a little

424
00:24:34.826 --> 00:24:41.416
trick you can press Command
Shift G to bring up this sheet

425
00:24:41.416 --> 00:24:43.566
that lets you navigate
to the libraries folder

426
00:24:43.566 --> 00:24:46.186
in your home directory because
the library folder is normally

427
00:24:46.186 --> 00:24:49.636
hidden from users but as a
developer you need to know this

428
00:24:49.636 --> 00:24:51.176
to be able to get
to that folder.

429
00:24:51.176 --> 00:24:53.006
You can also get
there in finder.

430
00:24:54.036 --> 00:24:58.066
Then you would use the New
Folder button to create

431
00:24:58.066 --> 00:25:02.176
that folder and then you
could save the script

432
00:24:58.066 --> 00:25:02.176
that folder and then you
could save the script

433
00:25:02.606 --> 00:25:06.426
in there and that's it.

434
00:25:06.426 --> 00:25:10.856
I'm going to close
this and now I'm going

435
00:25:10.856 --> 00:25:17.276
to take the client code that
uses this library I'm going

436
00:25:17.276 --> 00:25:21.426
to copy it out of there
and create a new script,

437
00:25:21.806 --> 00:25:24.256
I'm going to close this
one so it's out of our way

438
00:25:24.256 --> 00:25:27.036
and paste the code in.

439
00:25:27.116 --> 00:25:29.516
Now I'm going to show you
how to use the library

440
00:25:30.076 --> 00:25:33.046
if you were following
along earlier,

441
00:25:33.046 --> 00:25:34.196
this might look very familiar,

442
00:25:34.196 --> 00:25:43.206
I'm going to say tell script
AppleScript, change case

443
00:25:43.236 --> 00:25:49.756
and I'm going to compile it
and you can see that it works.

444
00:25:50.396 --> 00:25:52.266
I manage not to misspell
the library name.

445
00:25:52.446 --> 00:25:57.596
If I had just to show you,
if I put an x into the name

446
00:25:57.596 --> 00:25:58.846
which means it's not
going to be found,

447
00:25:58.846 --> 00:26:02.266
when we try to compile it
we get an error that says

448
00:25:58.846 --> 00:26:02.266
when we try to compile it
we get an error that says

449
00:26:02.266 --> 00:26:04.646
that it couldn't find that
script so you'll know early

450
00:26:04.646 --> 00:26:08.986
on during script development
whether you've referred

451
00:26:08.986 --> 00:26:13.276
to a library correctly and when
I run it we get the same result,

452
00:26:13.336 --> 00:26:15.326
how now brown cow
is in upper case.

453
00:26:16.886 --> 00:26:20.246
That is the simplest case of
using the script library just

454
00:26:20.246 --> 00:26:22.916
to reuse a function
you've been using

455
00:26:22.916 --> 00:26:24.786
in your scripts up till now.

456
00:26:27.096 --> 00:26:34.186
Now we want to take advantage
of AppleScript objective C

457
00:26:34.186 --> 00:26:36.026
to do more than we can
do with AppleScript,

458
00:26:37.416 --> 00:26:45.226
if I take this string

459
00:26:45.886 --> 00:26:52.026
and introduce some accented
characters and run you can see

460
00:26:52.456 --> 00:26:53.966
down here in the results

461
00:26:54.116 --> 00:26:57.876
that the accented o's did not
get converted to upper case.

462
00:26:58.636 --> 00:27:02.016
That's because AppleScript
doesn't have native support

463
00:26:58.636 --> 00:27:02.016
That's because AppleScript
doesn't have native support

464
00:27:02.076 --> 00:27:04.926
for doing case changes and
it doesn't...you would have

465
00:27:04.926 --> 00:27:08.116
to write a very extensive script
to handle all the characters

466
00:27:08.116 --> 00:27:13.586
in Unicode but the foundation
framework that's part

467
00:27:13.586 --> 00:27:18.126
of Cocoa has in a string
class that has a rich variety

468
00:27:18.126 --> 00:27:19.946
of text manipulation functions,

469
00:27:20.756 --> 00:27:22.916
several interesting
ones for changing case.

470
00:27:23.206 --> 00:27:24.846
So we're going to
take advantage of that

471
00:27:25.476 --> 00:27:28.666
in an AppleScript objective
C version of the library

472
00:27:28.666 --> 00:27:29.866
that we already created.

473
00:27:30.436 --> 00:27:38.446
I'm going to create a
new script and save it

474
00:27:38.716 --> 00:27:46.176
in script libraries folder
again, this time I'm going

475
00:27:46.516 --> 00:27:50.466
to name it ASOC change case.

476
00:27:51.006 --> 00:27:53.116
ASOC is a short hand
we sometimes use

477
00:27:53.116 --> 00:27:57.206
for AppleScript objective C
and as Sal mentioned I'll need

478
00:27:57.206 --> 00:27:58.356
to save it as a script bundle

479
00:27:58.356 --> 00:28:00.306
but that's a pretty
easy thing to do.

480
00:27:58.356 --> 00:28:00.306
but that's a pretty
easy thing to do.

481
00:28:01.336 --> 00:28:03.356
I'm going to open
the bundle drawer

482
00:28:03.866 --> 00:28:06.546
and update...well the
simplest thing that I have

483
00:28:06.546 --> 00:28:10.766
to do here is enable
AppleScript objective C library,

484
00:28:11.516 --> 00:28:13.936
that makes ASOC available
when this code is running

485
00:28:15.156 --> 00:28:18.046
and while I'm here I'm going
to fill out these other fields.

486
00:28:18.406 --> 00:28:20.096
These fields set values inside

487
00:28:20.096 --> 00:28:23.126
of the info P list file inside
the bundle, there's a lot

488
00:28:23.126 --> 00:28:25.026
of documentation
about how do that

489
00:28:25.026 --> 00:28:27.976
and how the various fields work
if you're unfamiliar with them

490
00:28:28.766 --> 00:28:32.476
and I'm going to fill in a
couple pieces of information,

491
00:28:33.466 --> 00:28:42.706
I've got my...the name, ASOC
change case and I'm going

492
00:28:42.706 --> 00:28:46.406
to put my bundle
identifier in here

493
00:28:47.806 --> 00:28:51.026
which I mistyped...let
me try it again.

494
00:28:51.596 --> 00:28:57.166
Okay the version number default
is 1.0, we highly recommend

495
00:28:57.166 --> 00:28:59.516
that you take advantage
of version numbers

496
00:28:59.516 --> 00:29:02.516
because when you start
distributing and reusing

497
00:28:59.516 --> 00:29:02.516
because when you start
distributing and reusing

498
00:29:02.516 --> 00:29:05.056
and updating libraries you
can use it to distinguish

499
00:29:05.056 --> 00:29:06.286
which version you're
talking about.

500
00:29:06.286 --> 00:29:07.986
I'm going to show you
later there's a way for you

501
00:29:07.986 --> 00:29:13.436
to have your script check
the version to make sure

502
00:29:13.436 --> 00:29:16.526
that it's new enough
for your client script

503
00:29:17.756 --> 00:29:20.486
and I'll put a copyright
notice in here.

504
00:29:24.116 --> 00:29:28.166
But again all we really need
to do was click this check box,

505
00:29:29.056 --> 00:29:32.946
let me put that script aside
for a moment and now I'm going

506
00:29:32.946 --> 00:29:37.606
to put in the AppleScript
version of our library code.

507
00:29:37.996 --> 00:29:42.376
This is essentially the same
function, we haven't changed

508
00:29:42.376 --> 00:29:44.966
that we're just changing
the implementation,

509
00:29:45.316 --> 00:29:49.086
like Sal mentioned earlier
we construct an NS String

510
00:29:49.386 --> 00:29:53.836
from our AppleScript string,
we call the appropriate method

511
00:29:54.516 --> 00:29:56.486
of NS String to do the
capitalization we want

512
00:29:56.486 --> 00:29:59.056
and then we return it
and convert it back

513
00:29:59.056 --> 00:30:00.276
to an AppleScript string.

514
00:29:59.056 --> 00:30:00.276
to an AppleScript string.

515
00:30:05.696 --> 00:30:10.856
All right so that's it we've
created an AppleScript objective

516
00:30:10.926 --> 00:30:14.006
C version of the library
and now let's use it.

517
00:30:14.456 --> 00:30:18.736
I'm going to go back to my
client script and I'm just going

518
00:30:18.736 --> 00:30:26.266
to change the name to match
our new library and I'm going

519
00:30:26.266 --> 00:30:31.916
to run it and this time you
can see in the result pane

520
00:30:31.916 --> 00:30:37.876
that all the accented o's have
been converted to upper case.

521
00:30:37.936 --> 00:30:40.036
Furthermore we now
have a third options

522
00:30:40.036 --> 00:30:41.956
because the NS String
class has a method

523
00:30:42.006 --> 00:30:46.026
for doing capitalization,
it capitalizes every word

524
00:30:46.026 --> 00:30:48.686
in your string, we can put
a different value in here

525
00:30:48.686 --> 00:30:54.046
and run it and so now we've
extended...now we get the word

526
00:30:54.436 --> 00:30:55.986
capitalized version
of the string.

527
00:30:57.296 --> 00:31:00.196
So you can see that using
AppleScript objective C we can

528
00:30:57.296 --> 00:31:00.196
So you can see that using
AppleScript objective C we can

529
00:31:00.196 --> 00:31:02.136
go beyond what we
can do in AppleScript

530
00:31:02.446 --> 00:31:05.136
and we can replace large
chunks of AppleScript

531
00:31:05.136 --> 00:31:06.756
that might have had to do
a lot of their own work

532
00:31:07.046 --> 00:31:11.386
with existing framework
functions that are available

533
00:31:11.386 --> 00:31:13.076
on the system to every
other application.

534
00:31:13.076 --> 00:31:14.506
Now you can use them
in libraries

535
00:31:14.956 --> 00:31:18.226
which means you can use them in
your scripts and script applets.

536
00:31:19.706 --> 00:31:22.116
Just briefly I want to
mention that when we look

537
00:31:22.116 --> 00:31:25.156
up libraries we search
in a number of locations,

538
00:31:25.156 --> 00:31:28.586
Sal will mention those later
and we start by looking

539
00:31:28.586 --> 00:31:31.196
in the current applications
bundle which means

540
00:31:31.196 --> 00:31:34.146
that you can conveniently
distribute an applet

541
00:31:34.476 --> 00:31:36.876
that contains libraries that
you want to bundle with it

542
00:31:37.186 --> 00:31:41.986
and the user can just make
that...put that application

543
00:31:41.986 --> 00:31:43.476
on the machine and
run it without having

544
00:31:43.476 --> 00:31:45.476
to install libraries
anywhere before use.

545
00:31:46.131 --> 00:31:48.131
[ Applause ]

546
00:31:48.246 --> 00:31:49.026
Okay thank you.

547
00:31:51.256 --> 00:31:53.656
>> So you can see that
it's not just magic

548
00:31:53.656 --> 00:31:56.616
on a slide you can actually
do this stuff live, right,

549
00:31:57.746 --> 00:32:02.076
and so we were looking at the
example that Chris had there

550
00:31:57.746 --> 00:32:02.076
and so we were looking at the
example that Chris had there

551
00:32:02.796 --> 00:32:05.376
and if we look at the syntax
that was involved here,

552
00:32:05.376 --> 00:32:12.226
we have tell the script library
identifier to call this method,

553
00:32:12.806 --> 00:32:17.496
now the short coming in this
whole process or the got cha

554
00:32:17.496 --> 00:32:21.086
in all this process is that
if you have a lot of libraries

555
00:32:21.086 --> 00:32:25.696
or you have complex libraries,
you have to remember the names

556
00:32:25.696 --> 00:32:27.866
of all these different
handlers and you have

557
00:32:27.896 --> 00:32:30.756
to remember what parameters
are passed through.

558
00:32:31.116 --> 00:32:34.206
It would be so much nicer
if I could just...instead

559
00:32:34.206 --> 00:32:37.876
of saying change case
of text like that,

560
00:32:37.876 --> 00:32:40.206
if I could just use some
words I could remember

561
00:32:40.206 --> 00:32:44.346
like transform text and
then give it the text

562
00:32:44.346 --> 00:32:47.986
as a direct parameter to
and then use some word

563
00:32:47.986 --> 00:32:51.266
like upper case instead
of a number or lower case

564
00:32:51.266 --> 00:32:56.006
or word case, I really
want to be able to say this

565
00:32:56.006 --> 00:33:00.756
because I can remember this,
remembering the names of 150

566
00:32:56.006 --> 00:33:00.756
because I can remember this,
remembering the names of 150

567
00:33:00.756 --> 00:33:04.856
or 200 different handlers that's
really a pain, I want to be able

568
00:33:04.856 --> 00:33:06.946
to use this kind of terminology.

569
00:33:07.476 --> 00:33:11.916
So this is what we want to do
as we examine the next thing

570
00:33:12.196 --> 00:33:14.646
of creating libraries
with terminology.

571
00:33:15.646 --> 00:33:19.186
Step one is you start
with the dictionary.

572
00:33:19.876 --> 00:33:24.446
So here is an example
dictionary of a script library,

573
00:33:24.756 --> 00:33:28.776
it's not a really complex one
but it's quite functional,

574
00:33:28.936 --> 00:33:30.446
it has one suite in it,

575
00:33:30.446 --> 00:33:34.276
it's called AppleScript text
utilities, there's two commands

576
00:33:34.276 --> 00:33:39.796
in the suite, one is for
transforming text, the other is

577
00:33:40.036 --> 00:33:42.316
for replacing strings in text.

578
00:33:42.706 --> 00:33:46.506
You can see the definition for
the suite and the definition

579
00:33:46.506 --> 00:33:49.706
for each one of the
particular commands.

580
00:33:50.296 --> 00:33:53.026
This is actually a file;

581
00:33:54.276 --> 00:33:57.516
scripting dictionaries
are actually files

582
00:33:57.516 --> 00:34:01.516
that get displayed within the
AppleScript editor application.

583
00:33:57.516 --> 00:34:01.516
that get displayed within the
AppleScript editor application.

584
00:34:01.886 --> 00:34:08.235
These scripting dictionary files
are called sdefs which stands

585
00:34:08.235 --> 00:34:12.356
for scripting dictionary
and they are placed inside

586
00:34:12.356 --> 00:34:15.396
of the bundle of your
AppleScript library

587
00:34:16.176 --> 00:34:19.775
so for the first time ever
today we're going to look at how

588
00:34:19.775 --> 00:34:23.446
to create an sdef or a
scripting definition file

589
00:34:23.706 --> 00:34:25.866
or just call the
scripting dictionary.

590
00:34:26.505 --> 00:34:29.226
Now these are XML
based documents,

591
00:34:29.266 --> 00:34:31.856
they have a name
extension of .sdef

592
00:34:32.795 --> 00:34:36.426
and they define the
various scripting elements

593
00:34:36.426 --> 00:34:38.746
that are part of your library.

594
00:34:38.795 --> 00:34:44.346
For example a suite or a command
that might have parameters

595
00:34:44.346 --> 00:34:46.976
and it might also
use enumerations

596
00:34:47.476 --> 00:34:50.306
in the command as well.

597
00:34:50.746 --> 00:34:54.376
In addition you can
include documentation

598
00:34:54.376 --> 00:34:57.386
in your scripting dictionary
so that your customer

599
00:34:57.576 --> 00:35:00.346
or you can actually
see an example script

600
00:34:57.576 --> 00:35:00.346
or you can actually
see an example script

601
00:35:00.346 --> 00:35:02.286
that uses the terminology.

602
00:35:03.066 --> 00:35:04.826
So let's look at
how this is done.

603
00:35:05.776 --> 00:35:12.416
This is a scripting dictionary
file, this is an sdef.

604
00:35:12.466 --> 00:35:16.616
It's an empty sdef but it
is a fully formed empty sdef

605
00:35:17.826 --> 00:35:20.656
and you can edit this
with you know any

606
00:35:20.656 --> 00:35:23.016
of the great applications
we have out there

607
00:35:23.166 --> 00:35:26.396
that can edit XML documents.

608
00:35:27.186 --> 00:35:33.216
We're going to use this when
we define our terminology

609
00:35:33.216 --> 00:35:35.066
for an AppleScript dictionary.

610
00:35:35.586 --> 00:35:38.916
The first line is
an XML declaration,

611
00:35:38.916 --> 00:35:41.946
it's a standard declaration
used by every XML file.

612
00:35:42.946 --> 00:35:48.246
Next becomes a reference
to the DTD

613
00:35:48.246 --> 00:35:50.346
or document type declaration.

614
00:35:50.916 --> 00:35:55.176
This is just boiler plate
stuff, it points to a folder

615
00:35:55.176 --> 00:35:58.936
in your system folder that
contains the master sdef file

616
00:35:58.936 --> 00:36:01.976
that tells the system how
an sdef file is supposed

617
00:35:58.936 --> 00:36:01.976
that tells the system how
an sdef file is supposed

618
00:36:01.976 --> 00:36:02.546
to be read.

619
00:36:03.196 --> 00:36:08.086
Then finally there's a
pairing of tags for dictionary,

620
00:36:08.086 --> 00:36:12.326
it's an open and close tag
for dictionary and we're going

621
00:36:12.326 --> 00:36:17.116
to use this as our template for
creating a dictionary that works

622
00:36:17.116 --> 00:36:21.466
with this command, transform
text how now brown cow

623
00:36:21.466 --> 00:36:22.416
to upper case.

624
00:36:22.416 --> 00:36:25.156
So I'm just going to leave that
on the bottom of the screen

625
00:36:25.156 --> 00:36:28.596
as we do this so we can
keep in mind how this works.

626
00:36:28.596 --> 00:36:32.506
Are you ready to go...here we
go, so the first thing I'm going

627
00:36:32.506 --> 00:36:37.896
to do is insert within the
dictionary tags a new set

628
00:36:37.896 --> 00:36:41.646
of tags called suite, I'm
going to create a script suite.

629
00:36:42.266 --> 00:36:47.016
The opening tag to the script
suite has a couple parameters,

630
00:36:47.356 --> 00:36:50.966
one is the name, I'm going
to call it text utilities

631
00:36:51.386 --> 00:36:53.926
and a description, I
can give a description

632
00:36:54.566 --> 00:36:59.576
and then a four character
code, Apple reserves the use

633
00:36:59.676 --> 00:37:03.176
of four character codes
that are all lower case.

634
00:36:59.676 --> 00:37:03.176
of four character codes
that are all lower case.

635
00:37:03.666 --> 00:37:07.346
So those are used by Apple
applications like definder

636
00:37:07.346 --> 00:37:11.386
to define their objects, you're
welcome to use any combination

637
00:37:11.386 --> 00:37:14.636
of upper case and lower case
letters that you want that work

638
00:37:14.636 --> 00:37:17.966
for you, in this case I
have four upper case letters

639
00:37:18.236 --> 00:37:23.236
that I'm using for the four
character code for my suite.

640
00:37:23.686 --> 00:37:27.036
Next I'm going to open up
this suite and I'm going

641
00:37:27.036 --> 00:37:31.776
to insert a command, I want to
put a command in my script suite

642
00:37:32.406 --> 00:37:34.126
and the opening tag

643
00:37:34.126 --> 00:37:39.676
of the command tag pairing
has a couple of attributes.

644
00:37:40.116 --> 00:37:43.716
The first is the name, that's
the name of the command

645
00:37:44.166 --> 00:37:46.756
in this case it's
transform text,

646
00:37:47.046 --> 00:37:50.096
so I want that to be
the name of the command,

647
00:37:50.096 --> 00:37:52.046
that's what I'm going
to remember in my brain

648
00:37:52.046 --> 00:37:57.326
when I write my scripts and
it gets and 8 character code,

649
00:37:57.486 --> 00:38:00.336
commands are the only thing
that gets this 8 character code

650
00:37:57.486 --> 00:38:00.336
commands are the only thing
that gets this 8 character code

651
00:38:00.896 --> 00:38:02.206
and the reason it does is

652
00:38:02.236 --> 00:38:06.466
because the first four
characters are usually the code

653
00:38:06.466 --> 00:38:09.686
of the suite that the
command belongs to followed

654
00:38:09.686 --> 00:38:13.556
by an additional four characters
so that's what I did here.

655
00:38:14.886 --> 00:38:18.606
Next we're going to open up the
command pairing and we're going

656
00:38:18.606 --> 00:38:20.876
to insert a direct
parameter tag.

657
00:38:21.266 --> 00:38:25.926
Now the direct parameter is the
object that we're addressing

658
00:38:25.926 --> 00:38:27.536
in this case the text.

659
00:38:27.786 --> 00:38:32.256
So it has a couple of
attributes in this tag,

660
00:38:32.826 --> 00:38:37.756
the first is the kind of data,
in this case type is text

661
00:38:38.026 --> 00:38:41.096
and then the description,
the text to transform.

662
00:38:41.626 --> 00:38:44.036
There's no code necessary

663
00:38:44.036 --> 00:38:47.096
because this is the direct
parameter of my command.

664
00:38:48.106 --> 00:38:52.916
Once I've done that now I can
continue defining my...the scope

665
00:38:52.916 --> 00:38:56.436
of my command by addressing
the second parameter here,

666
00:38:56.806 --> 00:39:00.906
so I insert a parameter
tag in my command pairing

667
00:38:56.806 --> 00:39:00.906
so I insert a parameter
tag in my command pairing

668
00:39:01.566 --> 00:39:04.236
and this one gets
the name of two,

669
00:39:04.536 --> 00:39:06.386
it gets a four character code

670
00:39:07.026 --> 00:39:10.846
and under type I
have case conversion.

671
00:39:11.676 --> 00:39:16.686
Now case conversion is not
a data type or anything

672
00:39:16.686 --> 00:39:20.246
in particular it happens
to be the name of the set

673
00:39:20.246 --> 00:39:22.936
of enumerations that
I'm going to be using,

674
00:39:22.976 --> 00:39:27.996
I'm going to create another,
another pairing later in my sdef

675
00:39:27.996 --> 00:39:31.896
that will hold the enumerations
like upper case, lower case,

676
00:39:31.896 --> 00:39:34.876
word case so for right
now I'm just going to type

677
00:39:34.916 --> 00:39:38.766
in case conversion
and then that's it.

678
00:39:38.936 --> 00:39:41.406
That's my basic command
tag right there.

679
00:39:42.376 --> 00:39:47.866
After that I'll insert a pairing
for enumeration and this is

680
00:39:47.866 --> 00:39:52.406
where I will list the various
enumerators like upper case,

681
00:39:52.406 --> 00:39:56.296
word case, it gets a
couple of attributes,

682
00:39:56.396 --> 00:40:00.816
the most important being its
name has to match the type

683
00:39:56.396 --> 00:40:00.816
the most important being its
name has to match the type

684
00:40:00.816 --> 00:40:05.506
that you just called in the
previous command so the type

685
00:40:05.876 --> 00:40:10.786
for the parameter in the command
has to match the name of the set

686
00:40:10.786 --> 00:40:12.886
of enumerations that
we're going to use

687
00:40:13.216 --> 00:40:16.356
and it also gets its
own four character code.

688
00:40:17.186 --> 00:40:22.556
Once I've created the
enumeration set I can insert my

689
00:40:22.556 --> 00:40:25.856
first enumerator, it gets
a couple of parameters,

690
00:40:25.946 --> 00:40:27.876
it's name is going
to be upper case,

691
00:40:28.366 --> 00:40:30.076
it's gets a four character code

692
00:40:30.296 --> 00:40:34.156
and then we can insert the other
two enumerators, lower case,

693
00:40:34.206 --> 00:40:37.406
word case, each with its
own four character code.

694
00:40:37.846 --> 00:40:41.716
That's the sdef that will
define the use of this command,

695
00:40:41.936 --> 00:40:43.496
that's a fully formed

696
00:40:43.746 --> 00:40:49.586
and correct scripting definition
file for having a single suite

697
00:40:49.586 --> 00:40:54.456
with a single command that is
transform text direct parameter

698
00:40:54.456 --> 00:40:58.306
to enumerator upper case,
lower case, word case.

699
00:40:58.606 --> 00:40:59.726
This is what it looks like,

700
00:41:00.116 --> 00:41:02.656
if you saved this you
could just stop there

701
00:41:03.126 --> 00:41:05.876
but you can do a little
bit of extra and I suggest

702
00:41:05.876 --> 00:41:07.746
that you make that effort.

703
00:41:08.346 --> 00:41:09.586
We're going to insert

704
00:41:09.586 --> 00:41:14.556
in the command pairing a
documentation tag, an open

705
00:41:14.556 --> 00:41:17.826
and closing documentation
tag and this allows you

706
00:41:17.826 --> 00:41:20.786
to put information in
there about the command

707
00:41:21.196 --> 00:41:24.656
so you can help somebody out
who's reading your dictionary,

708
00:41:24.656 --> 00:41:27.286
you can tell them hey this
command is used usually

709
00:41:27.286 --> 00:41:31.756
for this, this is how you
say it and you'll notice

710
00:41:31.756 --> 00:41:36.666
that I've included a pair of 8
opening and closing HTML tags

711
00:41:36.666 --> 00:41:40.346
in there and that's because
the dictionary viewer

712
00:41:40.346 --> 00:41:44.926
in the AppleScript editor used
HTML to display the formatting

713
00:41:44.926 --> 00:41:48.006
and the color of the
information in its window.

714
00:41:48.316 --> 00:41:53.446
So that means that I can then
take some HTML and put it

715
00:41:53.446 --> 00:41:55.786
into my documentation.

716
00:41:56.406 --> 00:42:00.516
What I like to do myself is
always have an example script

717
00:41:56.406 --> 00:42:00.516
What I like to do myself is
always have an example script

718
00:42:00.516 --> 00:42:02.366
of how to call the command.

719
00:42:02.696 --> 00:42:04.976
That's what I did
here, I have an example

720
00:42:04.976 --> 00:42:08.746
that says transform text how
now brown cow to upper case.

721
00:42:08.816 --> 00:42:12.366
So no matter what when the
user looks at the dictionary

722
00:42:12.366 --> 00:42:15.256
for my library they can see
oh this is how you use it,

723
00:42:15.256 --> 00:42:16.706
okay I got it.

724
00:42:17.306 --> 00:42:19.836
Now when this is all displayed

725
00:42:19.956 --> 00:42:22.646
within the AppleScript editor
application it will look

726
00:42:22.646 --> 00:42:27.236
something like this, you'll have
your suite definition here then

727
00:42:27.236 --> 00:42:32.746
you'll have the definition of
your command and how it's called

728
00:42:32.946 --> 00:42:37.796
and then my documentation so
this is all documentation,

729
00:42:38.146 --> 00:42:41.676
I apply text transformation,
for example change the case

730
00:42:41.676 --> 00:42:46.206
of targeted text to upper case
and then I have a sample script

731
00:42:46.206 --> 00:42:49.956
that the user can see and I show
them what the result typically

732
00:42:49.956 --> 00:42:50.536
would be.

733
00:42:50.966 --> 00:42:53.876
So it's worth it to add
that little bit of extra

734
00:42:53.876 --> 00:42:57.246
in your scripting definition
file when you create it.

735
00:42:58.466 --> 00:43:03.816
Now that we've done that we save
that file, we give it the name

736
00:42:58.466 --> 00:43:03.816
Now that we've done that we save
that file, we give it the name

737
00:43:03.816 --> 00:43:06.176
that we had for it,
AppleScript text utilities

738
00:43:06.176 --> 00:43:07.516
and we just put it aside.

739
00:43:08.546 --> 00:43:12.046
Next step is we create a
script bundle, very easy,

740
00:43:12.436 --> 00:43:15.496
you go to AppleScript editor,
you open up a new file,

741
00:43:15.496 --> 00:43:18.476
you go save and in
the drop down sheet

742
00:43:19.096 --> 00:43:22.766
under file format you choose
script bundle as the format

743
00:43:22.766 --> 00:43:28.186
that you want to use and then up
at the top you give it a name,

744
00:43:28.186 --> 00:43:30.756
I'm going to call this
AppleScript text utilities

745
00:43:31.096 --> 00:43:31.996
and you save it.

746
00:43:32.606 --> 00:43:37.396
Once it's been saved we get the
access to the bundled drawer,

747
00:43:38.056 --> 00:43:42.276
we open that up and then
again here is the panel

748
00:43:42.576 --> 00:43:45.156
with all the various
options for us.

749
00:43:45.546 --> 00:43:47.426
The script name, the
bundle identifier,

750
00:43:47.426 --> 00:43:50.346
the short version number,
the bundle version number,

751
00:43:50.346 --> 00:43:53.996
the copyright string, the
name of the sdef file,

752
00:43:54.546 --> 00:43:58.216
whether we're using AppleScript
objective C, the contents

753
00:43:58.216 --> 00:44:01.226
of the resources folder
and the little action menu

754
00:43:58.216 --> 00:44:01.226
of the resources folder
and the little action menu

755
00:44:01.226 --> 00:44:03.596
that you can do things
in the resources folder.

756
00:44:04.226 --> 00:44:06.886
So in this case we're
going to move the window

757
00:44:06.886 --> 00:44:10.446
to the side a little bit and
we're going to actually take

758
00:44:10.506 --> 00:44:14.886
that file and drag it into
the resources folder area here

759
00:44:14.886 --> 00:44:15.836
and let it go.

760
00:44:16.326 --> 00:44:21.916
This will copy that sdef file
into the script bundle for us

761
00:44:21.916 --> 00:44:24.446
and you can see now
it has become part

762
00:44:24.446 --> 00:44:26.126
of a list that's available.

763
00:44:27.236 --> 00:44:29.466
Then I can fill out the
information up there

764
00:44:29.466 --> 00:44:33.366
by checking the check box that
my using AppleScript objective C

765
00:44:33.596 --> 00:44:36.326
and most importantly
put the name

766
00:44:36.326 --> 00:44:39.946
of the scripting definition
file, the title of it,

767
00:44:40.466 --> 00:44:46.426
in that field, you can leaved
off the .sdef then you simply

768
00:44:46.426 --> 00:44:50.046
save your script bundle, close
the drawer and then save it.

769
00:44:51.076 --> 00:44:54.976
Next we add the code
to the script bundle,

770
00:44:55.406 --> 00:44:59.816
so we have our AppleScript
Library bundle

771
00:45:00.316 --> 00:45:03.606
and we've been using this one
handler over and over again

772
00:45:03.856 --> 00:45:06.376
in Chris' examples and in
what I've been showing you.

773
00:45:07.056 --> 00:45:10.566
But when you have a
terminology your handler has

774
00:45:10.626 --> 00:45:12.326
to match the terminology

775
00:45:12.896 --> 00:45:14.996
so you here we have an
AppleScript handler,

776
00:45:14.996 --> 00:45:18.666
you can tell because it begins
with on and ends with in right

777
00:45:19.496 --> 00:45:23.686
but the handler syntax has
to match the terminology

778
00:45:23.686 --> 00:45:26.266
that I defined in my
dictionary so I begin

779
00:45:26.266 --> 00:45:29.156
with my command, transform text.

780
00:45:29.776 --> 00:45:33.756
Next I need something to
represent my direct parameter

781
00:45:33.756 --> 00:45:36.576
so I have a variable
here called source text,

782
00:45:36.896 --> 00:45:39.766
it's going to represent
whatever text is getting passed

783
00:45:39.766 --> 00:45:44.976
to my handler, then my
secondary parameter two

784
00:45:45.596 --> 00:45:49.846
and then another variable called
case indicator that's going

785
00:45:49.846 --> 00:45:52.976
to represent one of the
enumerations that I created,

786
00:45:52.976 --> 00:45:55.146
upper case, lower
case word case.

787
00:45:55.746 --> 00:45:59.926
Let's take a look at how this
works again it takes the source

788
00:45:59.926 --> 00:46:04.046
string, converts it to a Cocoa
string using NS String's string

789
00:45:59.926 --> 00:46:04.046
string, converts it to a Cocoa
string using NS String's string

790
00:46:04.516 --> 00:46:09.736
method, string with string and
then based upon a comparison

791
00:46:10.166 --> 00:46:14.946
between what you pass into
that handler for an enumerator

792
00:46:15.226 --> 00:46:18.066
versus one of the other
options it applies

793
00:46:18.066 --> 00:46:22.036
and instance method wither upper
case string, lower case string

794
00:46:22.446 --> 00:46:25.276
and then finally we
convert everything back

795
00:46:25.276 --> 00:46:27.836
to just plain AppleScript
text by saying

796
00:46:27.836 --> 00:46:30.196
as text and we're done.

797
00:46:30.716 --> 00:46:33.636
So this is the handler
that we're going to use,

798
00:46:33.936 --> 00:46:39.596
we take our bundle we paste
it into it, we save it,

799
00:46:40.336 --> 00:46:43.496
next we install it in
case you didn't save it

800
00:46:43.496 --> 00:46:45.946
into the AppleScript
Libraries folder,

801
00:46:46.086 --> 00:46:48.636
script libraries folder
just take the file,

802
00:46:49.036 --> 00:46:53.646
make a script libraries folder
in your home library directory

803
00:46:53.956 --> 00:46:58.076
and drag that script file
in there and that's it,

804
00:46:58.076 --> 00:47:01.206
it is now installed
and now we can call it

805
00:46:58.076 --> 00:47:01.206
it is now installed
and now we can call it

806
00:47:01.596 --> 00:47:04.376
so next step using the library.

807
00:47:04.816 --> 00:47:10.746
So again we can just
target the library

808
00:47:10.746 --> 00:47:13.516
with an AppleScript
Library identifier script

809
00:47:13.516 --> 00:47:16.656
and then the name of the
library and we can encase

810
00:47:16.656 --> 00:47:19.606
that within a tell statement
but this time instead

811
00:47:19.606 --> 00:47:20.556
of calling the name

812
00:47:20.556 --> 00:47:24.756
of the handler I can just use
my terminology, transform text,

813
00:47:24.876 --> 00:47:30.166
here it is to upper case and
when this runs it runs fine just

814
00:47:30.166 --> 00:47:33.726
like the other handlers
worked, it works perfectly.

815
00:47:34.046 --> 00:47:39.866
So here's an example of using
that library in a script

816
00:47:39.866 --> 00:47:44.656
for the finder, so this
particular script will change

817
00:47:44.656 --> 00:47:47.766
the case of selected
folders in the finder

818
00:47:48.106 --> 00:47:50.426
so if I have some folders
selected and I want their names

819
00:47:50.426 --> 00:47:53.746
to be upper case this is the
script that will do that.

820
00:47:53.836 --> 00:47:58.236
You can see that it runs
and the case changes.

821
00:47:59.566 --> 00:48:01.666
Now I'll walk you
through it real quick,

822
00:47:59.566 --> 00:48:01.666
Now I'll walk you
through it real quick,

823
00:48:01.666 --> 00:48:04.836
you get the selected items that
are selected and you iterate

824
00:48:04.836 --> 00:48:10.016
through each one then we call
our script library, right here

825
00:48:10.686 --> 00:48:16.116
and then we apply the results of
the transformation to the name

826
00:48:16.206 --> 00:48:17.696
and then end our repeat.

827
00:48:18.586 --> 00:48:22.476
So here's our tell block,
now there's a problem

828
00:48:22.476 --> 00:48:23.536
with this tell block,

829
00:48:23.846 --> 00:48:28.126
if I'm only using it once that's
not bad but if I have a script

830
00:48:28.126 --> 00:48:30.996
that has to use this
all the time it's a pain

831
00:48:31.376 --> 00:48:35.086
and in addition we have this
thing going on with variable

832
00:48:35.176 --> 00:48:38.486
where I have to create a
variable to get the results

833
00:48:38.486 --> 00:48:42.476
of the transformation that I can
then use later on in the script

834
00:48:42.476 --> 00:48:44.756
because it's outside
of the tell block.

835
00:48:45.316 --> 00:48:49.516
I want all of that to go
away and we fix that issue

836
00:48:50.436 --> 00:48:55.016
with a new construct that we've
created called the use clause,

837
00:48:55.336 --> 00:48:59.046
so at the top of my
script I enter the word use

838
00:48:59.116 --> 00:49:02.546
and then my script
library identifier and what

839
00:48:59.116 --> 00:49:02.546
and then my script
library identifier and what

840
00:49:02.546 --> 00:49:05.746
that does is dynamically
load my library

841
00:49:05.746 --> 00:49:09.326
into memory making it globally
available throughout this

842
00:49:09.326 --> 00:49:14.306
script, so I no longer need this
tell block addressing my library

843
00:49:14.846 --> 00:49:18.286
and as a matter of fact once I
got rid of that I can get rid

844
00:49:18.286 --> 00:49:21.736
of the nonsense with the
variables back and forth

845
00:49:21.736 --> 00:49:25.516
and put everything on one line
so that the finder will talk

846
00:49:25.516 --> 00:49:27.576
to this command transparently

847
00:49:27.926 --> 00:49:30.846
and it all becomes
one single statement.

848
00:49:31.876 --> 00:49:38.186
So we go from this to that with
the use clause, which is a way

849
00:49:38.186 --> 00:49:40.976
to load and import terminology

850
00:49:40.976 --> 00:49:43.586
into your script,
this is what we like.

851
00:49:44.106 --> 00:49:47.116
Here's what it looks like
in an actual script window,

852
00:49:47.686 --> 00:49:51.786
now with the use clause and
then taking out the back

853
00:49:51.786 --> 00:49:54.256
and forth with the variable.

854
00:49:54.636 --> 00:49:57.926
That's exactly what we
like, it's easy to remember,

855
00:49:58.106 --> 00:50:02.646
it's powerful to use, it's
clean and it's a smooth syntax.

856
00:49:58.106 --> 00:50:02.646
it's powerful to use, it's
clean and it's a smooth syntax.

857
00:50:03.276 --> 00:50:06.626
Now when you deploy libraries,
once you've created something

858
00:50:06.626 --> 00:50:09.006
like this you can put it
in multiple locations,

859
00:50:09.356 --> 00:50:10.576
the one that we've been talking

860
00:50:10.576 --> 00:50:12.886
about is your home
library folder

861
00:50:14.286 --> 00:50:18.006
and in addition you can go to
the top level on your computer

862
00:50:18.006 --> 00:50:21.736
and you can place it in
a script libraries folder

863
00:50:21.736 --> 00:50:23.506
within that library folder.

864
00:50:24.226 --> 00:50:28.796
If you have a script bundle
or a script application you

865
00:50:28.796 --> 00:50:32.366
within its resources folder you
can create a script libraries

866
00:50:32.366 --> 00:50:34.216
folder and place it in there.

867
00:50:34.556 --> 00:50:39.226
So you can pass...give
someone a AppleScript droplet

868
00:50:39.226 --> 00:50:42.886
or AppleScript applet that
contains script libraries

869
00:50:43.836 --> 00:50:45.206
that it can draw from,

870
00:50:45.976 --> 00:50:49.466
in addition any application
that's using calling AppleScript

871
00:50:49.766 --> 00:50:53.516
you can create in its resources
folder a script library folder.

872
00:50:54.386 --> 00:50:58.296
So AppleScript Libraries are
a new plug-in architecture

873
00:50:58.516 --> 00:51:01.456
enabling quick development
and access

874
00:50:58.516 --> 00:51:01.456
enabling quick development
and access

875
00:51:01.456 --> 00:51:03.466
to your favorite
sets of handlers.

876
00:51:04.256 --> 00:51:06.176
It's different from
scripting additions

877
00:51:06.176 --> 00:51:08.556
because you can write them
yourself in AppleScript

878
00:51:08.896 --> 00:51:11.406
and they're controlled by
the script that loads them.

879
00:51:12.046 --> 00:51:14.306
They can use AppleScript
objective C

880
00:51:14.306 --> 00:51:17.036
to access all the
wonderment of Cocoa

881
00:51:17.466 --> 00:51:21.186
and they can also publish their
own scripting terminology.

882
00:51:21.726 --> 00:51:25.156
In support of them we created
two new constructs the script

883
00:51:25.156 --> 00:51:29.756
library identifier, that finds
the library for you and loads

884
00:51:30.116 --> 00:51:33.556
and we also created a new
use clause that allows you

885
00:51:33.826 --> 00:51:36.656
to load the library
for global access.

886
00:51:37.136 --> 00:51:41.006
So for more information you
can contact these poor guys

887
00:51:41.406 --> 00:51:45.966
or watch the video from
the earlier session

888
00:51:45.966 --> 00:51:47.676
on automation over view.

889
00:51:48.136 --> 00:51:52.016
One more thing, this is a
very important day for us

890
00:51:52.516 --> 00:51:56.856
because 20 years ago AppleScript
was given to the world.

891
00:51:57.516 --> 00:52:02.656
[ Applause ]

892
00:51:57.516 --> 00:52:02.656
[ Applause ]

893
00:52:03.156 --> 00:52:05.586
In 1993 AppleScript released

894
00:52:05.586 --> 00:52:08.916
to the...I mean Apple released
AppleScript to the public

895
00:52:09.316 --> 00:52:12.586
and since then it's become a
phenomenal language that people

896
00:52:12.586 --> 00:52:16.806
and companies rely upon
to automate the processes

897
00:52:16.806 --> 00:52:19.236
that they do, they build
their businesses on it,

898
00:52:19.236 --> 00:52:21.326
they build their
careers on it and we want

899
00:52:21.326 --> 00:52:24.546
to take this opportunity
on the 20th anniversary

900
00:52:24.546 --> 00:52:27.386
to say thank you to
all of the developers

901
00:52:27.386 --> 00:52:30.366
that made their apps scriptable,
we want to say thank you

902
00:52:30.366 --> 00:52:33.966
to all the scriptors who wrote
and write scripts everyday

903
00:52:33.966 --> 00:52:35.356
and share them with others.

904
00:52:35.456 --> 00:52:38.406
We want to thank our
customers for using AppleScript

905
00:52:38.406 --> 00:52:41.506
and in addition we want to thank
all of the engineers that worked

906
00:52:41.506 --> 00:52:43.866
on scriptable applications
and worked

907
00:52:43.866 --> 00:52:45.866
at Apple in creating this.

908
00:52:46.196 --> 00:52:48.766
We really appreciate
it, thank you so much.

909
00:52:50.516 --> 00:52:55.516
[ Applause ]

910
00:52:56.016 --> 00:53:00.006
[ Silence ]

911
00:52:56.016 --> 00:53:00.006
[ Silence ]
