
1
00:00:00.506 --> 00:00:16.826
[ Silence ]

2
00:00:17.326 --> 00:00:19.416
>> Good afternoon.

3
00:00:20.646 --> 00:00:20.916
[applause] Thank you.

4
00:00:22.116 --> 00:00:23.826
Welcome to What's New in Cocoa.

5
00:00:23.826 --> 00:00:26.696
My name is Ali Ozer, I'm the
director Cocoa Frameworks

6
00:00:26.696 --> 00:00:27.276
at Apple.

7
00:00:29.256 --> 00:00:30.986
So, what are we going
to talk about today?

8
00:00:31.616 --> 00:00:33.616
We're going to give you
a high level overview

9
00:00:33.616 --> 00:00:38.876
of the updates we made to Cocoa
in Mac OS X Mavericks 10.9,

10
00:00:39.256 --> 00:00:42.336
and we're going to give you
pointers to related sessions

11
00:00:42.336 --> 00:00:45.756
and labs because we have
many sessions and labs.

12
00:00:45.756 --> 00:00:48.696
Note that everything we're going
to talk about today is new,

13
00:00:48.866 --> 00:00:50.986
so I'm not going to be
putting this new badge

14
00:00:50.986 --> 00:00:53.516
on every single slide that
has new material on it,

15
00:00:53.576 --> 00:00:54.896
pretty much most things are new.

16
00:00:54.896 --> 00:00:57.886
And this is not a
complete reference

17
00:00:57.886 --> 00:00:59.866
to all the things we've added.

18
00:01:00.526 --> 00:01:03.726
These are the highlights, we
have Heather file updates,

19
00:01:03.726 --> 00:01:04.696
we have Release Notes,

20
00:01:04.696 --> 00:01:07.496
and in many cases coming
soon we have documentation.

21
00:01:07.496 --> 00:01:09.916
Please refer to those
for the complete story.

22
00:01:10.476 --> 00:01:13.836
OK, first let's talk about Tags,

23
00:01:14.316 --> 00:01:16.336
you saw the feature
yesterday in the Keynote.

24
00:01:17.086 --> 00:01:20.286
Tags is a new feature
which enables users

25
00:01:20.286 --> 00:01:23.596
to assign arbitrarily named
labels to their files.

26
00:01:25.116 --> 00:01:26.856
And users can search
for their files

27
00:01:26.856 --> 00:01:29.076
or group their files
using these Tags.

28
00:01:29.606 --> 00:01:30.776
It's a pretty powerful feature.

29
00:01:30.776 --> 00:01:32.186
Just to recap what
it looks like,

30
00:01:32.596 --> 00:01:36.096
so here is some files
grouped by Tag for instance

31
00:01:36.096 --> 00:01:40.276
that you can see the tags
are shown along the side

32
00:01:40.276 --> 00:01:41.626
and also under the file names.

33
00:01:42.106 --> 00:01:44.346
You can search by
tag as shown here,

34
00:01:45.086 --> 00:01:47.386
you type your search tags
there and you will be displayed

35
00:01:47.386 --> 00:01:49.906
that files with those
tags will be displayed.

36
00:01:50.266 --> 00:01:54.406
You can bring up a side bar
which lists the tags you have.

37
00:01:54.406 --> 00:01:57.886
You can go ahead and use tags
in your iCloud open panel.

38
00:01:58.206 --> 00:02:00.956
You can see the tags and their
iCloud documents as well.

39
00:01:58.206 --> 00:02:00.956
You can see the tags and their
iCloud documents as well.

40
00:02:01.326 --> 00:02:04.476
You can go ahead and assign tags
to files as you're saving them

41
00:02:04.846 --> 00:02:06.436
or you can go ahead
and change the tags

42
00:02:06.436 --> 00:02:10.045
on files using this new
document popover that comes

43
00:02:10.045 --> 00:02:11.126
out from the title bar.

44
00:02:11.436 --> 00:02:13.666
So there are many ways for
users to interact with Tags.

45
00:02:14.896 --> 00:02:17.636
Now, let's talk at-- look at
the APIs we've added for tags.

46
00:02:18.126 --> 00:02:20.666
It's actually not too many APIs
here we don't need too many.

47
00:02:21.086 --> 00:02:25.586
One is a new, NSURL resource
key, NSURL tag names key

48
00:02:25.586 --> 00:02:28.996
and the value of this is
an NS array of NS strings.

49
00:02:29.636 --> 00:02:32.806
You would use this API on
an NSURL, get resource value

50
00:02:32.806 --> 00:02:36.466
for KeyError which of course
an API NSURL already has

51
00:02:36.826 --> 00:02:40.106
to get the list of Tags
assigned to a given file,

52
00:02:40.106 --> 00:02:43.656
and you would use the set
API to set tags on a file.

53
00:02:44.726 --> 00:02:47.956
Now, as you saw earlier, we
also have support for Tags

54
00:02:47.956 --> 00:02:51.256
in the safe panel and
it's actually automatic,

55
00:02:51.916 --> 00:02:54.406
not just for NSDocument-based
applications

56
00:02:54.406 --> 00:02:56.026
but also any application

57
00:02:56.026 --> 00:02:59.996
that uses the safe panel will
get a TagsField as shown here.

58
00:03:00.756 --> 00:03:02.796
Now, the safe panel
will show the TagsField,

59
00:03:02.796 --> 00:03:04.936
it will allow the users
to edit those tags

60
00:03:05.226 --> 00:03:07.676
and it will also
automatically apply those tags

61
00:03:07.806 --> 00:03:10.076
to the saved file, so you don't
really have to do anything.

62
00:03:10.476 --> 00:03:13.176
Now, there might be cases
where this doesn't work right

63
00:03:13.176 --> 00:03:14.626
or there might be
cases where you want

64
00:03:14.626 --> 00:03:15.876
to customize this behavior.

65
00:03:16.906 --> 00:03:18.236
In those cases, we
do have an API.

66
00:03:18.866 --> 00:03:22.356
You can explicitly indicate that
you want to show the TagsField

67
00:03:22.356 --> 00:03:23.906
or you don't want to
show the TagsField.

68
00:03:24.196 --> 00:03:26.696
And if you are showing the
TagsField, you can then go ahead

69
00:03:26.696 --> 00:03:29.016
and get and set the list of tags

70
00:03:29.016 --> 00:03:31.736
that the user has
specified on that file.

71
00:03:31.736 --> 00:03:33.086
And then you would
apply them yourself

72
00:03:33.086 --> 00:03:34.536
or do whatever else you
want to do with them.

73
00:03:35.006 --> 00:03:37.966
Next thing I want to talk about
is Light Content Controls.

74
00:03:38.506 --> 00:03:40.336
So, these are new controls,

75
00:03:40.336 --> 00:03:43.666
variants of our controls
are Standard Aqua Controls

76
00:03:43.896 --> 00:03:47.046
that are meant for Window
bodies or Document Content.

77
00:03:47.716 --> 00:03:48.666
Here's some example.

78
00:03:48.976 --> 00:03:52.606
This is the event inspector
in the Calendar application

79
00:03:52.776 --> 00:03:55.476
and the buttons you see
here, down the side,

80
00:03:55.836 --> 00:03:57.486
these are Light Content
Controls.

81
00:03:57.486 --> 00:03:59.806
As you can see they're
somewhat lighter,

82
00:04:00.086 --> 00:04:02.656
than standard Aqua
controls and they're meant

83
00:04:02.656 --> 00:04:05.106
for that white lighter
colored background.

84
00:04:05.476 --> 00:04:08.076
Here's another example, this
is the Contacts application,

85
00:04:08.276 --> 00:04:10.936
and the buttons along the side
are light content controls.

86
00:04:11.866 --> 00:04:13.246
Here's the Maps application.

87
00:04:13.516 --> 00:04:16.315
Now, the buttons along the top
here are standard Aqua controls

88
00:04:16.315 --> 00:04:18.666
because they're just
being displayed on top

89
00:04:18.666 --> 00:04:20.466
of the standard Window
background.

90
00:04:20.826 --> 00:04:23.076
But if you bring up a
popover in this application,

91
00:04:23.416 --> 00:04:25.146
then the buttons you
see in the popover again

92
00:04:25.146 --> 00:04:28.006
in that light background, these
are light contents controls.

93
00:04:28.346 --> 00:04:30.466
So, how do you access these
light content controls?

94
00:04:31.036 --> 00:04:34.646
Well, they're available through
a new API called NS Appearance.

95
00:04:35.546 --> 00:04:39.116
This is a class that lets you
access alternate appearances

96
00:04:40.446 --> 00:04:43.126
and it's got a bunch of
methods, the one I'm going

97
00:04:43.126 --> 00:04:44.676
to show here is appearance name,

98
00:04:44.706 --> 00:04:46.216
you just give it
an appearance name

99
00:04:46.216 --> 00:04:48.026
and it fetches an
appearance for you.

100
00:04:48.026 --> 00:04:49.466
And we have two appearances
to find;

101
00:04:50.116 --> 00:04:52.156
Standard Aqua, and
Light Content.

102
00:04:52.736 --> 00:04:53.826
Now, once you have
an appearance,

103
00:04:53.826 --> 00:04:54.606
what do you do with it?

104
00:04:55.066 --> 00:04:57.626
You would use this protocol
which is to find on View,

105
00:04:57.726 --> 00:04:59.386
on NSView and NSWindow,

106
00:04:59.596 --> 00:05:01.336
the appearance customization
protocol.

107
00:04:59.596 --> 00:05:01.336
the appearance customization
protocol.

108
00:05:01.666 --> 00:05:04.906
You can go ahead and the set
the appearance of that View

109
00:05:04.906 --> 00:05:09.146
or Window, and all the UI
elements inside that View

110
00:05:09.146 --> 00:05:12.186
of Window will now
inherit this appearance,

111
00:05:12.186 --> 00:05:13.876
and start using the
appearance you've specified.

112
00:05:14.456 --> 00:05:17.386
And since the UI element
can inherit its appearance

113
00:05:17.386 --> 00:05:19.816
from its parent views
there's also another property,

114
00:05:19.816 --> 00:05:21.766
a Read Only property
called Effective Appearance

115
00:05:22.156 --> 00:05:24.696
which lets you tell what
appearance a UI element should

116
00:05:24.696 --> 00:05:25.146
be using.

117
00:05:26.266 --> 00:05:28.716
Now, you don't have to use codes
for this, you can also do this

118
00:05:28.716 --> 00:05:32.256
in Xcode in the Attributes
Inspector

119
00:05:32.256 --> 00:05:33.626
in Xcode interface builder.

120
00:05:34.786 --> 00:05:40.216
So here for instance is the
Attributes Inspector for box.

121
00:05:40.216 --> 00:05:41.836
You can do this for
container classes.

122
00:05:42.356 --> 00:05:45.056
And at the bottom here, you
see the appearance setting.

123
00:05:45.056 --> 00:05:46.446
It's now showing Aqua.

124
00:05:46.756 --> 00:05:48.126
If you click on it
you can see that,

125
00:05:48.126 --> 00:05:52.286
you can now specify light
content for that container

126
00:05:52.286 --> 00:05:53.726
and as I said, all the elements

127
00:05:53.726 --> 00:05:55.686
in there will now start
using this appearance.

128
00:05:55.926 --> 00:05:57.826
Next thing I want to talk
about is NS StackView.

129
00:05:58.376 --> 00:06:00.226
NS StackView is a
new class we've added

130
00:05:58.376 --> 00:06:00.226
NS StackView is a
new class we've added

131
00:06:00.226 --> 00:06:02.136
to AppKit in Mavericks.

132
00:06:02.346 --> 00:06:05.046
It's a class which
manages stacks of views

133
00:06:05.216 --> 00:06:07.056
and it uses Auto
Layout internally.

134
00:06:07.496 --> 00:06:09.486
It lets you group the views

135
00:06:09.486 --> 00:06:11.296
and we'll be seeing an
example of that shortly.

136
00:06:11.526 --> 00:06:14.656
And it also will manage
the sizing of the views

137
00:06:14.656 --> 00:06:17.856
and it will also drop Views, or
click Views, or tighten Views

138
00:06:17.856 --> 00:06:20.646
as necessary as the
StackView size changes.

139
00:06:21.156 --> 00:06:23.476
Let me give you a
little example.

140
00:06:23.476 --> 00:06:27.316
This is the kind of view you
might build with NS StackView.

141
00:06:27.676 --> 00:06:30.406
Here you have a group of
controls on the left side

142
00:06:30.406 --> 00:06:32.996
and you have another control,
a slider on the other side.

143
00:06:33.266 --> 00:06:36.916
As this view is made smaller,
the slider comes closer

144
00:06:36.916 --> 00:06:39.666
to the other group and then the
slider starts getting smaller.

145
00:06:39.996 --> 00:06:42.266
And then, the text field
starts getting smaller.

146
00:06:42.466 --> 00:06:45.606
And eventually when there's no
more room and pressure's rising,

147
00:06:45.976 --> 00:06:48.606
the button all the way at this
end is voted off the island

148
00:06:49.066 --> 00:06:51.726
and then things start to
continue to get even smaller.

149
00:06:51.986 --> 00:06:53.976
So, as you can see, StackView
they're not only used

150
00:06:53.976 --> 00:06:57.876
to using Auto Layout, it's also
hiding and removing some Views

151
00:06:57.876 --> 00:06:59.866
as needed and it will
also bring them back

152
00:07:00.216 --> 00:07:01.616
when the StackView
is made larger.

153
00:07:01.676 --> 00:07:04.726
So, in this way StackView is
using Auto Layout and building

154
00:07:04.726 --> 00:07:06.576
on top of it, and you
yourself don't have to worry

155
00:07:06.576 --> 00:07:09.446
about any creating those
constraints or managing them

156
00:07:09.746 --> 00:07:10.926
which is, you know, not

157
00:07:10.926 --> 00:07:13.366
that [inaudible] especially
once you're removing

158
00:07:13.366 --> 00:07:14.636
and adding Views and so on.

159
00:07:14.976 --> 00:07:16.786
Now, StackViews don't
have to be horizontal,

160
00:07:16.786 --> 00:07:18.036
they can also be vertical.

161
00:07:18.316 --> 00:07:20.736
Here's a kind of view you might
build with a vertical StackView,

162
00:07:20.736 --> 00:07:22.626
this is an inspector
panel you might see

163
00:07:22.626 --> 00:07:24.286
in drawing application.

164
00:07:25.696 --> 00:07:30.466
As you expand the various
pieces, various elements up here

165
00:07:30.466 --> 00:07:32.776
and you know, they will collapse
as well and that's the kind

166
00:07:32.776 --> 00:07:35.746
of thing that's fairly simple
to build with a StackView.

167
00:07:36.186 --> 00:07:38.766
The API of NS StackView
is purely straightforward,

168
00:07:39.076 --> 00:07:42.586
you create one by giving it
some views, StackView with views

169
00:07:42.946 --> 00:07:46.866
or you can choose to add Views
explicitly one at a time.

170
00:07:47.006 --> 00:07:49.906
Here, you're specifying gravity
and the gravity is the grouping,

171
00:07:50.056 --> 00:07:53.036
either one end, to the other end
or the middle of the StackView.

172
00:07:53.296 --> 00:07:55.536
And there are other
properties on StackView

173
00:07:55.806 --> 00:08:00.026
that lets you specify properties
in Layouts such as the spacing,

174
00:07:55.806 --> 00:08:00.026
that lets you specify properties
in Layouts such as the spacing,

175
00:08:00.026 --> 00:08:01.856
the priority, what the clipping

176
00:08:01.856 --> 00:08:03.656
and hugging priorities
are and so on.

177
00:08:04.066 --> 00:08:07.566
There will be a more in-depth
coverage of NS StackView

178
00:08:07.566 --> 00:08:09.856
in this talk which is tomorrow,

179
00:08:10.146 --> 00:08:12.746
best practices for
Cocoa Animation.

180
00:08:12.976 --> 00:08:16.336
This talk will also go into
various animation techniques

181
00:08:16.336 --> 00:08:19.476
for Cocoa both old and new,
so it's a great to talk

182
00:08:19.476 --> 00:08:21.946
to learn both about animation
and StackView and in fact

183
00:08:21.946 --> 00:08:23.566
about animating StackViews
as well.

184
00:08:24.156 --> 00:08:25.476
So, next I want to talk--

185
00:08:25.476 --> 00:08:27.766
so just of having to
talk about Auto Layout,

186
00:08:27.766 --> 00:08:30.006
let me just talk a bit
about Auto Layout as well.

187
00:08:30.296 --> 00:08:33.046
In Auto Layout, we've made a
lot of performance improvements

188
00:08:33.046 --> 00:08:36.086
and this is true in
general but especially

189
00:08:36.086 --> 00:08:37.645
in view-based TableViews.

190
00:08:37.936 --> 00:08:41.116
That's because constraints are
now attached to Views in a way

191
00:08:41.116 --> 00:08:43.566
that as Views are removed
or added to the hierarchy,

192
00:08:43.856 --> 00:08:44.856
they stick to the View.

193
00:08:45.086 --> 00:08:47.416
In addition, we've
made the enumeration

194
00:08:47.416 --> 00:08:50.416
of constraints a lot more
efficient and predictable,

195
00:08:50.666 --> 00:08:53.546
so that you will see much
more predictable behavior in--

196
00:08:53.606 --> 00:08:55.846
when dealing with Views that
have a lot of constraints.

197
00:08:56.166 --> 00:08:58.376
So, that's something you should
notice in your applications.

198
00:08:58.756 --> 00:09:01.016
In addition, we have
a new workflow to deal

199
00:08:58.756 --> 00:09:01.016
In addition, we have
a new workflow to deal

200
00:09:01.016 --> 00:09:02.516
with Auto Layout in Xcode.

201
00:09:02.846 --> 00:09:07.746
In general, Xcode is a lot
more flexible and forgiving

202
00:09:07.746 --> 00:09:10.946
about letting you do
Auto Layout in Xcode.

203
00:09:10.946 --> 00:09:12.396
You can now delete constraints,

204
00:09:12.396 --> 00:09:15.326
you can create ambiguous
structures, you can move Views

205
00:09:15.326 --> 00:09:18.346
around et cetera and Xcode
won't throw a fit anymore.

206
00:09:18.396 --> 00:09:20.856
So this is-- you
are more in control.

207
00:09:21.216 --> 00:09:24.786
And you can see more about
this in tomorrow's session,

208
00:09:25.036 --> 00:09:27.176
taking control of Auto
Layout in Xcode 5.

209
00:09:27.336 --> 00:09:29.286
Next, I want to talk about
Responsive Scrolling,

210
00:09:29.356 --> 00:09:33.266
and you saw a demo of this
yesterday at the Keynote,

211
00:09:33.266 --> 00:09:35.576
in addition you saw it perhaps
at the State of the Union

212
00:09:35.576 --> 00:09:37.026
in the afternoon as
well it's something

213
00:09:37.026 --> 00:09:39.966
that we've worked a lot on

214
00:09:39.966 --> 00:09:43.026
and it's you know
something we think is great.

215
00:09:43.576 --> 00:09:45.496
The goal here is to
provide the users

216
00:09:45.496 --> 00:09:48.406
with non-stuttering
fluid scrolling.

217
00:09:48.816 --> 00:09:52.986
So let me just give you a review
of how scrolling works in 10.8.

218
00:09:53.716 --> 00:09:56.236
So here it is a view and assume,

219
00:09:56.236 --> 00:09:58.856
not the blue border there
is your divisible area

220
00:09:58.856 --> 00:09:59.646
of the ScrollView.

221
00:09:59.906 --> 00:10:02.976
In 10.8, when the user
scrolls, they see this.

222
00:09:59.906 --> 00:10:02.976
In 10.8, when the user
scrolls, they see this.

223
00:10:04.346 --> 00:10:07.186
Now, really what's
happening under the covers is

224
00:10:07.186 --> 00:10:10.736
that when the scroll
starts, divisible area

225
00:10:10.736 --> 00:10:15.236
of the view is copied up
a blip, blip if you will.

226
00:10:15.236 --> 00:10:18.806
And then the-- reveal the area
is drawn in by calling drawRect.

227
00:10:19.246 --> 00:10:20.606
And then this happens again

228
00:10:20.606 --> 00:10:22.416
for every little
slice that's visible.

229
00:10:22.666 --> 00:10:25.476
And of course, the user
never see the black flash

230
00:10:25.506 --> 00:10:28.076
because we actually copy
the bits up and then we fill

231
00:10:28.076 --> 00:10:30.386
in that area without
flushing the Window

232
00:10:30.616 --> 00:10:32.366
so that the user actually
doesn't see a flash.

233
00:10:32.796 --> 00:10:37.716
But one thing you will notice is
that in a situation like this,

234
00:10:38.046 --> 00:10:40.376
the scrolling performance
is really at the mercy

235
00:10:40.376 --> 00:10:41.896
of the performance of drawRect.

236
00:10:42.366 --> 00:10:44.766
If that drawRect
call just to fill

237
00:10:44.766 --> 00:10:47.056
in that little strip
takes say, half a second,

238
00:10:47.336 --> 00:10:50.116
scrolling all stutter,
really for half a second.

239
00:10:50.226 --> 00:10:52.756
And actually more generally,
scrolling performance is

240
00:10:52.756 --> 00:10:54.116
at the mercy of the main thread

241
00:10:54.426 --> 00:10:56.626
because the drawRect is
happening on the main thread

242
00:10:56.826 --> 00:10:59.146
and the main thread is
a pretty popular place.

243
00:10:59.516 --> 00:11:00.866
There is the Run Loop there.

244
00:10:59.516 --> 00:11:00.866
There is the Run Loop there.

245
00:11:01.066 --> 00:11:02.726
You know, things are happening.

246
00:11:03.276 --> 00:11:04.866
All sorts of things
might be happening,

247
00:11:04.866 --> 00:11:06.316
network activity,
who knows what?

248
00:11:06.666 --> 00:11:10.476
So, even if drawRect wasn't
badly behaving there might be

249
00:11:10.476 --> 00:11:13.446
other factors which cause the
whole scrolling experience

250
00:11:13.496 --> 00:11:15.196
to stutter in certain
conditions.

251
00:11:15.836 --> 00:11:16.816
So, what's the solution?

252
00:11:17.896 --> 00:11:22.806
The solution is to dissociate
the scrolling from domain thread

253
00:11:22.806 --> 00:11:24.906
as much as possible and
we've done two things

254
00:11:25.006 --> 00:11:25.946
to help with this.

255
00:11:26.466 --> 00:11:29.196
One, is to get scroll events
of a secondary thread.

256
00:11:29.976 --> 00:11:32.236
Now, despite itself is good

257
00:11:32.396 --> 00:11:34.366
because the main thread is
now longer fetching events.

258
00:11:34.636 --> 00:11:37.866
However, it's not
good enough by itself

259
00:11:37.866 --> 00:11:40.256
because if you get scroll
events on a secondary thread

260
00:11:40.256 --> 00:11:41.326
and if you scroll the view

261
00:11:41.326 --> 00:11:44.116
on the secondary thread there
still won't be any content

262
00:11:44.116 --> 00:11:44.536
to show.

263
00:11:44.536 --> 00:11:47.616
So, there will be white
flashes as the user scrolls,

264
00:11:47.886 --> 00:11:50.516
clearly not, not ideal.

265
00:11:50.756 --> 00:11:52.446
So the second part
of the solution is

266
00:11:52.446 --> 00:11:54.696
to prepare Overdraw
regions ahead of time,

267
00:11:54.986 --> 00:11:57.356
so that the scrolling
can happen smoothly.

268
00:11:57.426 --> 00:11:58.906
And let me show how this works.

269
00:11:59.916 --> 00:12:01.246
Here is our ScrollView again

270
00:11:59.916 --> 00:12:01.246
Here is our ScrollView again

271
00:12:01.556 --> 00:12:04.856
and this time we have a visible
area, the area that user sees.

272
00:12:05.226 --> 00:12:08.096
In addition, we have this
additionally drawn area

273
00:12:08.156 --> 00:12:09.476
which we called the
Overdraw area

274
00:12:09.476 --> 00:12:11.156
and that's not visible
at the moment.

275
00:12:11.596 --> 00:12:13.816
So as the user scrolls this up,

276
00:12:13.816 --> 00:12:15.576
notice that drawRect
doesn't need to be called

277
00:12:15.576 --> 00:12:18.666
and the user maybe scrolls down
again no drawRect being called.

278
00:12:19.216 --> 00:12:23.366
And-- but if the user scrolls
a bunch, then we might go ahead

279
00:12:23.366 --> 00:12:25.786
and call drawRect to fill
in that Overdraw area.

280
00:12:25.966 --> 00:12:28.956
And of course Overdraw area
is well exists on any edge

281
00:12:28.956 --> 00:12:30.946
that the user can
scroll towards.

282
00:12:31.266 --> 00:12:35.496
Now, this responsive
scrolling is actually automatic

283
00:12:35.546 --> 00:12:38.276
so you don't-- in most cases
you don't have to do anything

284
00:12:38.276 --> 00:12:40.036
and your app should
get this feature,

285
00:12:40.316 --> 00:12:43.456
assuming they're linked
on 10.8 or newer SDK.

286
00:12:43.456 --> 00:12:46.036
And there are also a
few other conditions.

287
00:12:46.896 --> 00:12:49.936
Now, your application can
chose to explicitly opt in our

288
00:12:49.936 --> 00:12:54.436
out by overwriting this method
and this is a purview method

289
00:12:54.436 --> 00:12:56.416
because you might want
some ScrollViews to do this

290
00:12:56.416 --> 00:12:59.896
and some ScrollViews not to is
com/public responsive scrolling

291
00:12:59.946 --> 00:13:01.876
by overwriting and
returning yes you say

292
00:12:59.946 --> 00:13:01.876
by overwriting and
returning yes you say

293
00:13:02.216 --> 00:13:04.326
"I'm doing responsive
scrolling no matter what."

294
00:13:04.456 --> 00:13:05.456
Or "No, I don't want

295
00:13:05.456 --> 00:13:07.296
to do responsive
scrolling no matter what."

296
00:13:07.566 --> 00:13:11.016
So there's a bunch more
APIs here and a lot more--

297
00:13:11.016 --> 00:13:14.116
lot more stuff to
learn and we will cover

298
00:13:14.116 --> 00:13:16.476
that in Optimizing
Drawing and Scrolling talk

299
00:13:16.476 --> 00:13:18.576
with is tomorrow
afternoon at 3:15.

300
00:13:18.826 --> 00:13:21.416
And the next, I want to talk
a bit about Export as PDF.

301
00:13:21.416 --> 00:13:24.086
And we talked about
Export as PDF before

302
00:13:24.086 --> 00:13:28.006
and maybe you've heard about
it in its using its other name

303
00:13:28.006 --> 00:13:32.586
such as save as PDF, save to
PDF, export to PDF et cetera.

304
00:13:32.876 --> 00:13:37.026
The idea here is to enable the
user to generate a PDF file

305
00:13:37.026 --> 00:13:38.356
without going through
the print panel.

306
00:13:38.586 --> 00:13:41.226
And in fact in general,
we'd like the UI

307
00:13:41.226 --> 00:13:44.086
to separate PDF generation
from the print panel

308
00:13:44.086 --> 00:13:46.626
and the whole printing
process as much as possible

309
00:13:46.836 --> 00:13:48.566
from the point of
view of the user.

310
00:13:49.896 --> 00:13:53.276
So, in 10.9 here is what happens
when you choose Export as PDF

311
00:13:53.446 --> 00:13:55.046
in an application like TextEdit.

312
00:13:55.476 --> 00:13:56.366
Here's my window.

313
00:13:57.016 --> 00:13:59.326
You get a nice, simple
safe panel.

314
00:13:59.406 --> 00:14:02.266
It does nothing to do with
printing just a safe field.

315
00:13:59.406 --> 00:14:02.266
It does nothing to do with
printing just a safe field.

316
00:14:02.736 --> 00:14:03.936
And you can go ahead and save.

317
00:14:04.066 --> 00:14:04.756
That's it.

318
00:14:04.756 --> 00:14:05.596
Your PDF is generated.

319
00:14:06.046 --> 00:14:09.326
If you want to go ahead and set
some parameters the users want

320
00:14:09.356 --> 00:14:11.976
to have some control
or what, what they get.

321
00:14:12.406 --> 00:14:14.426
They can click the
Show Details button

322
00:14:14.426 --> 00:14:17.556
and get a somewhat expanded
panel which has field

323
00:14:17.556 --> 00:14:19.276
such as page, size
and orientation

324
00:14:19.276 --> 00:14:20.996
if appropriate for
your application.

325
00:14:21.246 --> 00:14:23.966
In addition, possibly
some additional views

326
00:14:23.966 --> 00:14:27.106
that the application
is adding custom views.

327
00:14:27.106 --> 00:14:29.446
And you know, we normally refer
to those as accessory view.

328
00:14:29.766 --> 00:14:32.836
Now, we've added new APIs
and behaviors in 10.9

329
00:14:32.836 --> 00:14:35.206
to make it lot easier
to do all this.

330
00:14:35.626 --> 00:14:39.156
If you're NSDocument based
application there is a new

331
00:14:39.156 --> 00:14:41.516
action method, save
document to PDF.

332
00:14:41.786 --> 00:14:44.636
If you connect the
menu item to this,

333
00:14:45.636 --> 00:14:47.056
that's pretty much
all you have to do

334
00:14:47.056 --> 00:14:48.976
and you'll get the
experience I showed you.

335
00:14:49.366 --> 00:14:51.826
Now, you might want to customize
though the PDF generation.

336
00:14:51.826 --> 00:14:53.976
For instance maybe
during PDF generation,

337
00:14:54.136 --> 00:14:57.356
you want to take a
different printing code path.

338
00:14:57.796 --> 00:14:59.666
Not the one you would get
when the user print it.

339
00:14:59.666 --> 00:15:01.626
In that case, you can
overwrite this method--

340
00:14:59.666 --> 00:15:01.626
In that case, you can
overwrite this method--

341
00:15:02.096 --> 00:15:05.616
I'm sorry, I skipped the
PDF print operation method

342
00:15:05.616 --> 00:15:07.536
and customized the
print operation.

343
00:15:07.806 --> 00:15:10.176
Now, if you're a non
NSDocument-based application,

344
00:15:11.216 --> 00:15:12.386
and it's also fairly easy

345
00:15:12.756 --> 00:15:15.726
when you're generating your
Print operation, go ahead

346
00:15:15.726 --> 00:15:19.176
and specify the job
disposition of Print Save job

347
00:15:19.466 --> 00:15:22.456
but do not supply a URL,
what that will do is

348
00:15:22.456 --> 00:15:24.786
that will cause the
save panel to be shown

349
00:15:24.786 --> 00:15:27.876
and the user will be able to
specify file name as you saw.

350
00:15:28.446 --> 00:15:30.246
There's a few other
ways to customize this.

351
00:15:30.836 --> 00:15:33.766
One new class, one other
new class is NS PDF panel,

352
00:15:34.036 --> 00:15:36.786
this gives you more panel over
the panel and the excess review.

353
00:15:36.866 --> 00:15:39.556
For instance, let's
say you don't want

354
00:15:39.556 --> 00:15:41.356
to export just one
PDF file but you want

355
00:15:41.356 --> 00:15:43.476
to export the whole bunch
of related PDF files

356
00:15:44.246 --> 00:15:46.736
and you just want the user
to choose one location.

357
00:15:46.986 --> 00:15:49.946
With this, there's an option
that lets you choose a folder

358
00:15:50.046 --> 00:15:51.656
to save the PDF files too.

359
00:15:51.796 --> 00:15:55.076
And then there's this other
class NS PDF info that sets

360
00:15:55.076 --> 00:15:57.316
and gets that basically
holds the user choices

361
00:15:57.316 --> 00:15:57.936
that are being made.

362
00:15:58.276 --> 00:16:00.876
Next thing I want to talk
about is Media Library Access.

363
00:15:58.276 --> 00:16:00.876
Next thing I want to talk
about is Media Library Access.

364
00:16:01.626 --> 00:16:05.316
So the media library is the
user's library of images,

365
00:16:06.176 --> 00:16:08.246
music, videos and so on.

366
00:16:08.476 --> 00:16:10.976
And they're managed by
applications such as iPhoto,

367
00:16:10.976 --> 00:16:12.756
Aperture, iMovie, iTunes.

368
00:16:13.576 --> 00:16:16.706
So, we have two sets of
APIs to make it easy for you

369
00:16:16.706 --> 00:16:18.236
to access these media resources.

370
00:16:19.196 --> 00:16:20.606
One of them is a very simple API

371
00:16:20.746 --> 00:16:23.526
that just gives you
a non modal panel

372
00:16:23.886 --> 00:16:25.626
that will appear in
your applications.

373
00:16:26.256 --> 00:16:29.686
It's a new class of an app kit
called NS Media Library Browser

374
00:16:29.686 --> 00:16:31.746
Controller and it's
fairly easy to use.

375
00:16:31.996 --> 00:16:33.976
You would go ahead and
create the shared instance.

376
00:16:34.336 --> 00:16:37.666
You would specify what kind of
what library you want to see

377
00:16:37.666 --> 00:16:39.976
in this case image
so the photo library.

378
00:16:40.796 --> 00:16:43.076
And then make the UI visible.

379
00:16:44.256 --> 00:16:46.946
When you do this, you will
get the panel that looks

380
00:16:46.946 --> 00:16:48.916
like this appearing
in your application.

381
00:16:49.136 --> 00:16:51.896
As you can see, it's showing
you your iPhoto events just

382
00:16:51.896 --> 00:16:53.146
to where the user is used to.

383
00:16:53.146 --> 00:16:57.486
The user can go ahead and choose
or browse for individual images.

384
00:16:57.946 --> 00:17:01.056
They can also go ahead and
browse through locations, faces,

385
00:16:57.946 --> 00:17:01.056
They can also go ahead and
browse through locations, faces,

386
00:17:01.056 --> 00:17:04.766
et cetera just like it appears
in iPhoto, Aperture et cetera.

387
00:17:05.126 --> 00:17:08.266
They can also go ahead and look
at the images in a list view

388
00:17:08.266 --> 00:17:10.165
which gives them more
details about the images.

389
00:17:10.346 --> 00:17:13.156
So, it's as fairly
simple, not customizable.

390
00:17:13.156 --> 00:17:16.086
But you know, that only took two
or three lines of code to show.

391
00:17:16.406 --> 00:17:19.496
The other API we have
gives you low-level access

392
00:17:19.576 --> 00:17:21.886
to the user's library and
this comes in the form

393
00:17:21.886 --> 00:17:24.516
of a new framework called
medialibrary.framework.

394
00:17:25.036 --> 00:17:28.306
This library provides you
with an Objective-C data model

395
00:17:28.306 --> 00:17:30.666
that represents all
of the user's media.

396
00:17:31.386 --> 00:17:35.446
It's a read-only model so you
can only access the images

397
00:17:35.446 --> 00:17:37.426
for showing in your app or
importing into your app.

398
00:17:38.156 --> 00:17:39.886
It's also asynchronous
in the sense

399
00:17:39.886 --> 00:17:42.026
that your application
doesn't have to be blocked

400
00:17:42.026 --> 00:17:44.056
as you're rummaging
through library.

401
00:17:44.056 --> 00:17:46.486
And just to give
you a quick overview

402
00:17:46.486 --> 00:17:48.096
of what this framework
looks like,

403
00:17:48.406 --> 00:17:49.766
there are four principal
classes,

404
00:17:50.086 --> 00:17:52.276
ML MediaLibrary represents
the library.

405
00:17:52.506 --> 00:17:56.066
ML MediaSource represents
the individual applications

406
00:17:56.066 --> 00:17:57.676
or source of images.

407
00:17:58.016 --> 00:18:01.146
ML MediaGroup represents
groups that make sense

408
00:17:58.016 --> 00:18:01.146
ML MediaGroup represents
groups that make sense

409
00:18:01.146 --> 00:18:07.056
within that source for
instance playlists or locations

410
00:18:07.056 --> 00:18:10.056
or photo albums and so on.

411
00:18:10.236 --> 00:18:13.056
And finally, ML MediaObject
represents individual

412
00:18:13.056 --> 00:18:13.956
media objects.

413
00:18:14.236 --> 00:18:17.636
This-- this class will
provide you with properties

414
00:18:17.636 --> 00:18:19.546
of that object such
as the dimensions,

415
00:18:19.546 --> 00:18:20.816
the length of the
movie, et cetera.

416
00:18:21.166 --> 00:18:23.396
In addition, that will
also return to you a URL

417
00:18:23.716 --> 00:18:26.246
which you can use to
access the media object even

418
00:18:26.246 --> 00:18:27.616
in SandBox applications.

419
00:18:27.876 --> 00:18:31.386
Next, I want to talk about
block-based sheet presentation.

420
00:18:32.386 --> 00:18:36.376
As you know, blocks are a
feature we introduced in 10.6

421
00:18:36.376 --> 00:18:39.666
and since then we've been
incrementally updating our APIs

422
00:18:39.916 --> 00:18:41.346
to take advantage of blocks.

423
00:18:41.346 --> 00:18:42.796
In one area where
we haven't done that

424
00:18:42.796 --> 00:18:44.746
yet is generalized
sheet presentation.

425
00:18:44.866 --> 00:18:48.366
In 10.8 and earlier, if you
want to present the sheet

426
00:18:48.366 --> 00:18:50.216
in your application, here's
the code you would write.

427
00:18:50.696 --> 00:18:53.936
You tell NS app to begin
a sheet you provide

428
00:18:53.966 --> 00:18:56.346
which Window the sheet
should be attached to

429
00:18:56.346 --> 00:18:59.266
and then you provide a call
back in the form of a selector.

430
00:18:59.466 --> 00:19:01.226
And then you go ahead and
implement your selector.

431
00:18:59.466 --> 00:19:01.226
And then you go ahead and
implement your selector.

432
00:19:01.926 --> 00:19:04.086
And inside that selector,
inside that method,

433
00:19:04.496 --> 00:19:06.506
you process whatever
the user chose.

434
00:19:07.116 --> 00:19:09.096
So, you know it's pretty
powerful, pretty good stuff

435
00:19:09.096 --> 00:19:10.636
but it does take a
few lines of code.

436
00:19:11.256 --> 00:19:12.946
You know, not super convenient.

437
00:19:13.626 --> 00:19:16.016
And in 10.9 here is
all you need to do.

438
00:19:16.356 --> 00:19:18.466
You tell the parent
window to show the sheet

439
00:19:18.526 --> 00:19:20.786
and then you execute the
code that should happen

440
00:19:20.786 --> 00:19:21.886
when the sheet is dismissed.

441
00:19:22.346 --> 00:19:23.616
So, that's really it.

442
00:19:23.616 --> 00:19:25.046
So that's the code
you're writing here.

443
00:19:25.426 --> 00:19:26.136
So it's much better.

444
00:19:26.326 --> 00:19:28.516
Now, this thing has
few other advantages.

445
00:19:28.516 --> 00:19:30.216
This approach has
few other advantages.

446
00:19:30.496 --> 00:19:34.156
For one thing, this version will
automatically dismiss the sheet.

447
00:19:34.156 --> 00:19:35.706
You don't have to call
order out anymore.

448
00:19:36.086 --> 00:19:37.826
When that completion
block is done,

449
00:19:37.976 --> 00:19:39.086
the sheet will be dismissed.

450
00:19:39.666 --> 00:19:42.226
It will queue up multiple
sheets for presentation.

451
00:19:42.916 --> 00:19:45.726
Although it's not, you know,
UI we generally recommend,

452
00:19:46.086 --> 00:19:47.906
sometimes some subsystems
might want

453
00:19:47.906 --> 00:19:49.336
to show sheets one
after another.

454
00:19:49.576 --> 00:19:51.916
And you all want those sheets
to appear on top of another

455
00:19:51.916 --> 00:19:54.146
which doesn't exactly
working all cases.

456
00:19:54.476 --> 00:19:55.636
This one will actually
queue them

457
00:19:55.636 --> 00:19:57.946
so as one sheet is dismissed,
the next one will appear.

458
00:19:59.156 --> 00:20:02.746
Now, however, if you're
a subsystem and you want

459
00:19:59.156 --> 00:20:02.746
Now, however, if you're
a subsystem and you want

460
00:20:02.816 --> 00:20:05.566
that sheet of your stuff here
immediately for some reason,

461
00:20:05.766 --> 00:20:08.276
there is a big and critical
sheet completion handler

462
00:20:08.276 --> 00:20:09.836
which will get your
sheet to cut--

463
00:20:09.836 --> 00:20:11.346
you know, cut through
the line and up here

464
00:20:11.346 --> 00:20:11.976
on top of everything else.

465
00:20:12.046 --> 00:20:15.566
Clearly this would only be
used for some serious errors,

466
00:20:15.566 --> 00:20:16.596
emergencies, whatever.

467
00:20:16.866 --> 00:20:19.326
But anyway yes you have
that API if needed.

468
00:20:19.706 --> 00:20:23.216
One thing you saw yesterday at
the Keynote is our new support

469
00:20:23.216 --> 00:20:26.596
for multiple monitors and I
mean, here we say full screen

470
00:20:26.596 --> 00:20:27.466
for multi-monitors,

471
00:20:27.466 --> 00:20:30.026
it's actually goes way
beyond full screen as well.

472
00:20:30.346 --> 00:20:32.296
Let me just recap what
this feature looks like.

473
00:20:32.686 --> 00:20:37.056
So, here we have a MacBook Pro
and a larger screen attached

474
00:20:37.056 --> 00:20:40.886
to your MacBook Pro and as you
can see here both screens have a

475
00:20:40.886 --> 00:20:43.096
Menu Bar that Safari
is running on this one

476
00:20:43.096 --> 00:20:45.096
and iPhoto is running
on this one.

477
00:20:45.406 --> 00:20:48.436
So that the MacBook
Pro screen is active

478
00:20:48.906 --> 00:20:50.296
because it's got
an active Menu Bar

479
00:20:50.296 --> 00:20:51.686
and that's the active
application.

480
00:20:51.686 --> 00:20:53.496
If the user goes and
clicks on iPhoto,

481
00:20:53.496 --> 00:20:57.866
the menu on the other screen
is now active and the menu

482
00:20:57.866 --> 00:20:59.896
on the smaller screen is
now appearing inactive

483
00:20:59.956 --> 00:21:02.796
so that's you have a one active
screen at any given time.

484
00:20:59.956 --> 00:21:02.796
so that's you have a one active
screen at any given time.

485
00:21:03.086 --> 00:21:05.106
So the user can go ahead
and interact with iPhoto put

486
00:21:05.106 --> 00:21:08.916
into full screen mode, go into
edit mode and in fact even put

487
00:21:08.916 --> 00:21:11.886
into gorgeous full screen
editing mode like this,

488
00:21:11.886 --> 00:21:13.086
fairly straightforward.

489
00:21:13.086 --> 00:21:15.256
They can also go ahead
and do the same thing

490
00:21:15.256 --> 00:21:17.666
on their other screen and put
Safari into full screen mode,

491
00:21:17.666 --> 00:21:19.976
again all part of a
standard operation.

492
00:21:20.296 --> 00:21:23.886
They can also go ahead and just
switch between different spaces

493
00:21:23.886 --> 00:21:27.056
on any screen they want as far
as they can switch the maps

494
00:21:27.056 --> 00:21:28.266
or they can switch the pages

495
00:21:28.266 --> 00:21:30.386
or they can switch the
desktop screens and so on.

496
00:21:30.796 --> 00:21:33.346
So it's very powerful,
very flexible environment

497
00:21:33.796 --> 00:21:36.716
and this is all controlled
with really just one setting.

498
00:21:37.156 --> 00:21:39.916
If you launch Preferences
and go to Mission Control,

499
00:21:40.206 --> 00:21:41.456
the setting here displays

500
00:21:41.456 --> 00:21:44.456
out separate spaces is what
controls all this new behavior.

501
00:21:45.196 --> 00:21:46.746
Now, users can go turn them off

502
00:21:46.876 --> 00:21:50.256
in which case they get back
the 10.8 behaviors that--

503
00:21:50.376 --> 00:21:53.146
you know that we had in 10.8.

504
00:21:54.756 --> 00:21:56.006
So this is a user choice

505
00:21:56.316 --> 00:22:01.746
and in this mode what happens
is each screen has its own set

506
00:21:56.316 --> 00:22:01.746
and in this mode what happens
is each screen has its own set

507
00:22:01.746 --> 00:22:03.626
of spaces as you saw.

508
00:22:03.626 --> 00:22:05.886
Each screen has its
own Menu Bar as you saw

509
00:22:06.026 --> 00:22:08.696
and Windows do not span screens
so Window will either to be

510
00:22:08.696 --> 00:22:11.206
on one screen or the other
but not span screens.

511
00:22:11.536 --> 00:22:16.066
Since this is a user choice
there's not much control your

512
00:22:16.066 --> 00:22:18.866
application has over it
and there are no new APIs.

513
00:22:19.156 --> 00:22:20.966
There's some changes
in behaviors however.

514
00:22:21.306 --> 00:22:24.766
For instance NS screen main
screen method will now return

515
00:22:24.966 --> 00:22:27.966
the active screen and
active screen being defined

516
00:22:27.966 --> 00:22:31.416
as the screen with
the Menu Bar on it.

517
00:22:31.416 --> 00:22:34.086
And resumed Windows and
resumed applications

518
00:22:34.086 --> 00:22:35.846
so these are state-restored
Windows,

519
00:22:36.086 --> 00:22:38.716
will return to their previous
locations wherever they might be

520
00:22:38.716 --> 00:22:40.366
on all the user screens

521
00:22:40.846 --> 00:22:43.906
and newly opened Windows will
prefer the active screen.

522
00:22:44.196 --> 00:22:46.566
So we believe these
behaviors will be appropriate

523
00:22:46.566 --> 00:22:47.756
for most applications.

524
00:22:48.396 --> 00:22:50.346
If you get a chance, we'll pop

525
00:22:50.346 --> 00:22:52.436
that second screen you're
carrying around in your bag

526
00:22:52.436 --> 00:22:53.606
and try your applications.

527
00:22:53.606 --> 00:22:55.336
And if you don't happen
to bring a second screen,

528
00:22:55.636 --> 00:22:58.286
we do have some downstairs
in the labs and you can hook

529
00:22:58.286 --> 00:23:00.766
up your portables
to those screens

530
00:22:58.286 --> 00:23:00.766
up your portables
to those screens

531
00:23:00.766 --> 00:23:02.386
and see how well your
applications work

532
00:23:02.386 --> 00:23:03.486
in full screen modes.

533
00:23:04.026 --> 00:23:07.226
So next thing I want to
mention is we have an updated

534
00:23:07.226 --> 00:23:07.966
system font.

535
00:23:08.756 --> 00:23:12.086
So how many of you noticed that
we have an updated system font?

536
00:23:12.486 --> 00:23:14.106
I'm not talking about my iOS 7,

537
00:23:14.106 --> 00:23:15.696
OK a few if you have
noticed that's good.

538
00:23:16.236 --> 00:23:19.626
So, yeah we do have a
new font for UI Elements

539
00:23:19.626 --> 00:23:21.886
and it's actually not a
drastic change at all.

540
00:23:21.886 --> 00:23:25.746
It's very similar to the font
we had before-- Lucida Grande.

541
00:23:25.956 --> 00:23:27.726
It's optimized for
retina display

542
00:23:27.726 --> 00:23:29.146
so they're just slight tweaks.

543
00:23:29.676 --> 00:23:31.756
This font is-- it's-they're
slight tweaks

544
00:23:31.756 --> 00:23:34.076
but they're really not
significant enough at all

545
00:23:34.446 --> 00:23:36.846
where they will cause
rewrapping of text and so

546
00:23:36.846 --> 00:23:39.246
on so we're pretty
certain that's the case.

547
00:23:39.666 --> 00:23:41.776
This font is not
intended for general use.

548
00:23:41.776 --> 00:23:44.526
This font is really just
a UI Optimized version

549
00:23:44.526 --> 00:23:47.156
of Lucida Grande so any users
who are using Lucida Grande

550
00:23:47.156 --> 00:23:48.166
in their documents and so

551
00:23:48.166 --> 00:23:50.786
on will continue to
use Lucida Grande.

552
00:23:51.466 --> 00:23:55.606
Now you're saying, "Hey, my
application is UI Elements.

553
00:23:55.756 --> 00:23:56.806
How do I use this font?"

554
00:23:57.226 --> 00:23:59.726
Well, it's pretty simple use it
the exact same way you've been

555
00:23:59.726 --> 00:24:00.456
using before.

556
00:23:59.726 --> 00:24:00.456
using before.

557
00:24:00.456 --> 00:24:03.296
If you're calling NS
Font system font of size,

558
00:24:04.016 --> 00:24:07.926
you will get this new
font now or in Xcode,

559
00:24:08.356 --> 00:24:11.926
in the Attributes Inspector, if
you have selected system font

560
00:24:11.926 --> 00:24:15.426
which is by the way the default
in most cases and has been

561
00:24:15.426 --> 00:24:19.206
for many years, the system
font here is the right one.

562
00:24:19.206 --> 00:24:20.516
So if you're using this one,

563
00:24:20.796 --> 00:24:21.956
you will be getting
the correct font.

564
00:24:21.956 --> 00:24:24.746
So no worries, your applications
might already be using this font

565
00:24:24.746 --> 00:24:26.136
properly in 10.9.

566
00:24:26.556 --> 00:24:29.096
Now, if you ever
bring up a font panel

567
00:24:30.326 --> 00:24:33.016
and to see this font
called Dot Lucida Grande UI,

568
00:24:33.016 --> 00:24:35.596
just ignore it, it's not there.

569
00:24:37.336 --> 00:24:38.546
We hope it will go away soon.

570
00:24:38.546 --> 00:24:40.666
This is-- this might make an
appearance in a few places,

571
00:24:40.666 --> 00:24:42.146
this is not even a final name

572
00:24:42.146 --> 00:24:45.486
or we don't know how this
will land but ignore this.

573
00:24:45.486 --> 00:24:46.656
Don't reference it by name.

574
00:24:46.656 --> 00:24:48.826
Again just use the system
font of size method.

575
00:24:49.226 --> 00:24:55.166
And I want to shift gears a bit
and talk a bit about App Nap

576
00:24:55.746 --> 00:24:59.956
which you also heard about
yesterday in the Keynote

577
00:24:59.956 --> 00:25:01.196
and also State of the Union.

578
00:24:59.956 --> 00:25:01.196
and also State of the Union.

579
00:25:01.946 --> 00:25:05.156
So App Nap is a new system
feature in OS X Mavericks

580
00:25:05.656 --> 00:25:10.096
where the system will throttle,
non for grand applications

581
00:25:10.096 --> 00:25:11.736
that are not doing useful work.

582
00:25:12.416 --> 00:25:14.986
So now some of you are wondering
what this throttle means.

583
00:25:14.986 --> 00:25:18.316
Some of you are wondering
what this useful work means so

584
00:25:18.826 --> 00:25:20.136
and not for grand apps like--

585
00:25:20.136 --> 00:25:21.576
'cause they have to
maybe is the question,

586
00:25:21.576 --> 00:25:23.276
but anyway so there are a
bunch of questions here.

587
00:25:23.276 --> 00:25:24.116
What do all of these mean?

588
00:25:24.116 --> 00:25:25.106
How's it going to do to my app?

589
00:25:25.236 --> 00:25:26.466
And that's maybe the
biggest question.

590
00:25:27.036 --> 00:25:29.556
So first let me define
what throttle means,

591
00:25:29.916 --> 00:25:32.366
the biggest thing about
throttling apps is

592
00:25:32.366 --> 00:25:36.316
that timers will be delayed
and they will be rate limited.

593
00:25:36.616 --> 00:25:40.736
So once an app is decided
as not doing useful work,

594
00:25:40.736 --> 00:25:43.496
it will be put into App
Nap mode and in this mode,

595
00:25:44.536 --> 00:25:48.046
say the app has a timer to
set off to go in one second.

596
00:25:48.106 --> 00:25:49.606
The timer might actually
not go off

597
00:25:49.606 --> 00:25:52.046
for 10 seconds or
maybe even more.

598
00:25:52.576 --> 00:25:54.556
Let's say an application
is that timer that's set

599
00:25:54.596 --> 00:25:56.516
to go 60 times a second.

600
00:25:57.756 --> 00:26:00.616
That timer will now start
going off every 10 seconds,

601
00:25:57.756 --> 00:26:00.616
That timer will now start
going off every 10 seconds,

602
00:26:01.176 --> 00:26:03.456
so you know it's really
going to be sleeping.

603
00:26:04.256 --> 00:26:06.536
Another thing that
happens is apps

604
00:26:06.536 --> 00:26:09.446
that are napping will have
lower I/O and CPU priorities.

605
00:26:09.746 --> 00:26:11.456
So even when they're
executing code,

606
00:26:11.736 --> 00:26:13.876
their overall throughput
will be somewhat reduced.

607
00:26:13.876 --> 00:26:17.306
Now it's not a drastic reduction
but it will be reduced compared

608
00:26:17.306 --> 00:26:19.186
to other applications, the
foreground applications

609
00:26:19.186 --> 00:26:20.476
and not napping applications.

610
00:26:20.776 --> 00:26:24.176
So the other question is, well
what does useful work mean?

611
00:26:25.356 --> 00:26:26.416
Well so there are
some heuristics

612
00:26:26.416 --> 00:26:29.766
to determine useful work because
as you might guess it's not easy

613
00:26:29.766 --> 00:26:33.006
to tell an application that's
using a hundred percent CPU

614
00:26:33.236 --> 00:26:34.336
and doing something useful

615
00:26:34.336 --> 00:26:36.646
versus something that's
using hundred percent CPU

616
00:26:36.646 --> 00:26:37.866
and not doing anything at all.

617
00:26:38.246 --> 00:26:39.386
So here are our heuristics,

618
00:26:39.676 --> 00:26:42.926
one is handling a user
event or an action method.

619
00:26:43.186 --> 00:26:45.746
So, if we find ourselves
that were in action method

620
00:26:45.746 --> 00:26:47.816
in the main thread,
that's clearly as a result

621
00:26:47.816 --> 00:26:51.386
of the user having hit a button
or chosen some Menu items

622
00:26:51.386 --> 00:26:53.126
so that's presumably
useful work.

623
00:26:54.226 --> 00:26:56.626
Drawing visibly, if the app
is actually drawing something

624
00:26:56.626 --> 00:27:00.036
visibly while the user is seeing
that drawing so we really want

625
00:26:56.626 --> 00:27:00.036
visibly while the user is seeing
that drawing so we really want

626
00:27:00.036 --> 00:27:03.396
that drawing to continue
playing audio as well

627
00:27:04.186 --> 00:27:05.856
and the disabling system sleep.

628
00:27:06.206 --> 00:27:09.786
Now some of you might be aware,
we have this API previously

629
00:27:09.786 --> 00:27:12.696
in fact power assertion API
where an application can say,

630
00:27:13.686 --> 00:27:15.156
"I want to disable
system sleep."

631
00:27:15.676 --> 00:27:18.386
This is where the system goes
to sleep after no activity.

632
00:27:18.556 --> 00:27:21.146
Applications can disable that
and the reason they do that is

633
00:27:21.146 --> 00:27:23.106
because they're doing some
long-running operations

634
00:27:23.106 --> 00:27:27.316
such as exporting images or
doing something else long,

635
00:27:27.316 --> 00:27:28.866
and then they don't want
the system to go to sleep.

636
00:27:29.856 --> 00:27:31.456
So, we take that
as a hint to mean

637
00:27:31.456 --> 00:27:33.886
that the app is doing useful
work and we disable App Nap

638
00:27:34.006 --> 00:27:35.746
for the duration for
that application.

639
00:27:36.466 --> 00:27:38.916
And finally we have some new
APIs that we'll talk about.

640
00:27:39.346 --> 00:27:43.146
You can use APIs to declare
activity formally and then we--

641
00:27:43.146 --> 00:27:46.256
of course say, "OK you're doing
useful work, useful activity,

642
00:27:46.456 --> 00:27:47.346
we won't put you to sleep."

643
00:27:47.876 --> 00:27:50.926
Now App Nap is automatically
applied to all applications.

644
00:27:50.996 --> 00:27:53.256
In fact that's the
goal of App Nap.

645
00:27:54.346 --> 00:27:55.676
You know, we know that
there are a lot of apps

646
00:27:55.676 --> 00:27:58.596
out there probably enough of
yours but there are a bunch

647
00:27:58.596 --> 00:28:00.866
of apps out there that
do misbehave sometimes

648
00:27:58.596 --> 00:28:00.866
of apps out there that
do misbehave sometimes

649
00:28:00.866 --> 00:28:02.606
and they're sitting in the
background just chewing

650
00:28:02.606 --> 00:28:05.426
through CPU-- you know maybe
well-intentioned purpose

651
00:28:05.426 --> 00:28:08.906
but again they are still chewing
through CPU and we're going

652
00:28:09.156 --> 00:28:12.516
to apply App Nap to all these
apps who haven't been updated

653
00:28:12.806 --> 00:28:15.486
or who-- you know,
won't get updated maybe

654
00:28:15.486 --> 00:28:17.616
for a few more months or years
or you know, the ones we want

655
00:28:17.616 --> 00:28:19.646
to apply to all these apps
that's why we're applying--

656
00:28:20.086 --> 00:28:21.406
you know, no opt-in required.

657
00:28:22.096 --> 00:28:24.346
Apps will get App Nap however

658
00:28:24.676 --> 00:28:26.976
if some applications
are misbehaving,

659
00:28:27.126 --> 00:28:29.726
users can disable App
Nap for that application

660
00:28:30.066 --> 00:28:33.206
by using the prevent
App Nap check box

661
00:28:33.306 --> 00:28:36.616
in the File Info
Panel and Finder.

662
00:28:37.546 --> 00:28:38.776
That will disable App Nap

663
00:28:38.836 --> 00:28:40.586
for that version of
that application.

664
00:28:41.156 --> 00:28:43.076
Note that this check
box will go away,

665
00:28:43.076 --> 00:28:46.066
will vanish for applications
that are linked on 10.9

666
00:28:46.346 --> 00:28:49.566
with the intent that when you
put up 10.9 linked versions

667
00:28:49.566 --> 00:28:53.076
of your applications, they're
hopefully App Nap savvy

668
00:28:53.076 --> 00:28:56.016
and users don't have to turn off
App Nap for those applications

669
00:28:56.016 --> 00:28:57.586
so that's something
to look into.

670
00:28:58.026 --> 00:29:01.106
Now earlier I mentioned
activity APIs,

671
00:28:58.026 --> 00:29:01.106
Now earlier I mentioned
activity APIs,

672
00:29:01.106 --> 00:29:03.166
let me just give a
quick overview of those.

673
00:29:03.496 --> 00:29:07.366
These APIs allow you to declare
the activities your application

674
00:29:07.396 --> 00:29:07.966
is doing.

675
00:29:08.456 --> 00:29:11.306
APIs are in process info.

676
00:29:12.356 --> 00:29:13.066
Here's one of them.

677
00:29:13.066 --> 00:29:14.546
Perform activity with options.

678
00:29:15.306 --> 00:29:18.296
I'll talk about the options,
a recent string which is used

679
00:29:18.296 --> 00:29:19.816
for debugging end the block

680
00:29:19.816 --> 00:29:22.356
and this is the Activity
Block that's being executed.

681
00:29:22.866 --> 00:29:25.146
Now if you can't represent
your activity as a block,

682
00:29:25.416 --> 00:29:27.396
you can also call the
Begin and End methods

683
00:29:27.396 --> 00:29:28.876
which are also on process info.

684
00:29:28.876 --> 00:29:31.636
So let me talk a little
bit about those options,

685
00:29:31.686 --> 00:29:33.406
those options that
you specify the kind

686
00:29:33.406 --> 00:29:34.716
of activity that's happening.

687
00:29:35.136 --> 00:29:38.716
One common one is NS
Activity user-initiated.

688
00:29:39.156 --> 00:29:42.016
This is simply an activity where
the user wanted to do something.

689
00:29:42.016 --> 00:29:45.896
They hit some button;
they chose some Menu item

690
00:29:45.896 --> 00:29:48.386
so something is happening
clearly the app should finish

691
00:29:48.386 --> 00:29:50.296
that even if app is
not in the foreground.

692
00:29:50.756 --> 00:29:53.256
Another example is activity
user-initiated allowing

693
00:29:53.356 --> 00:29:54.016
system sleep.

694
00:29:54.366 --> 00:29:55.476
An example of this is

695
00:29:55.476 --> 00:29:58.086
for instance an application
that's sitting there constantly

696
00:29:58.086 --> 00:30:00.076
giving you stock price updates.

697
00:29:58.086 --> 00:30:00.076
giving you stock price updates.

698
00:30:00.076 --> 00:30:01.376
The user might have
initiated that.

699
00:30:01.676 --> 00:30:04.886
However, such an application
typically would not prevent

700
00:30:04.886 --> 00:30:07.396
system idle sleep because it's
an application that's just

701
00:30:07.396 --> 00:30:08.976
giving their-- showing
some status update.

702
00:30:10.006 --> 00:30:13.046
Another example is
activate the background.

703
00:30:13.356 --> 00:30:14.216
That's the kind of activity

704
00:30:14.216 --> 00:30:16.006
that the user did not
necessarily initiate

705
00:30:16.296 --> 00:30:19.316
but it should still
continue but maybe some--

706
00:30:19.526 --> 00:30:22.046
the system should still
be apply some heuristics

707
00:30:22.046 --> 00:30:23.476
to lower power usage.

708
00:30:23.906 --> 00:30:25.776
But however, it's
still is something

709
00:30:25.776 --> 00:30:28.806
that the app should not go to
App Nap during this activity.

710
00:30:28.806 --> 00:30:31.526
An example of this is for
instance indexing in Xcode

711
00:30:31.846 --> 00:30:36.226
or thumbnail generation
in an app like Aperture.

712
00:30:36.496 --> 00:30:38.686
These are not things that
the user directly initiates

713
00:30:39.026 --> 00:30:41.056
but these are things that
are being done on behalf

714
00:30:41.056 --> 00:30:42.866
of the user, so they
should really complete.

715
00:30:43.526 --> 00:30:45.026
There are a bunch of more
activities and you can look

716
00:30:45.026 --> 00:30:46.536
at header files to see
what they're about.

717
00:30:46.886 --> 00:30:48.726
Now, app nap is something
that's applied

718
00:30:48.796 --> 00:30:50.986
to non-foreground
apps automatically.

719
00:30:51.266 --> 00:30:54.396
We also have some APIs that
let you control some of these,

720
00:30:54.396 --> 00:30:56.566
some of these facilities
explicitly.

721
00:30:57.626 --> 00:30:59.556
Timer tolerance APIs
are one of them.

722
00:31:00.416 --> 00:31:02.816
So, NSTimer now is
property called tolerance

723
00:31:03.146 --> 00:31:06.636
and that lets you specify the
amount of delay you're willing

724
00:31:06.636 --> 00:31:07.916
to tolerate on the timer.

725
00:31:08.236 --> 00:31:11.976
So, the timer can fire by
up to that much time later

726
00:31:11.976 --> 00:31:13.486
than the time it specified for.

727
00:31:14.206 --> 00:31:17.306
So, the benefits here are
that this allows the system

728
00:31:17.306 --> 00:31:19.996
to synchronize timers
across the system

729
00:31:20.236 --> 00:31:22.366
so they're firing
at the same time.

730
00:31:22.366 --> 00:31:25.996
And this as you saw yesterday
during the Keynote increases the

731
00:31:25.996 --> 00:31:30.356
amount of time that the CPU
is idle which in turn impacts,

732
00:31:30.356 --> 00:31:32.016
improves battery life.

733
00:31:32.476 --> 00:31:33.996
So, let me show you an example

734
00:31:34.026 --> 00:31:36.276
of how timers work
with tolerance.

735
00:31:37.396 --> 00:31:39.326
So, here is a very
simple timer called

736
00:31:39.326 --> 00:31:41.326
without tolerance you're
creating at one time,

737
00:31:41.706 --> 00:31:44.036
one shot timer to
fire in two seconds.

738
00:31:44.476 --> 00:31:47.276
And here is our timeline,
the timer will fire there.

739
00:31:47.746 --> 00:31:50.126
Now, note that despite
the flaming graphics,

740
00:31:50.206 --> 00:31:51.256
timers don't really fire.

741
00:31:51.566 --> 00:31:52.826
But anyway, so, it will--

742
00:31:52.826 --> 00:31:54.546
the timer will kick-off
at 2 seconds.

743
00:31:54.776 --> 00:31:57.066
Now, if you were to go ahead
and provide the tolerance

744
00:31:57.236 --> 00:32:00.656
of 1 second, then the
timer can fire anywhere

745
00:31:57.236 --> 00:32:00.656
of 1 second, then the
timer can fire anywhere

746
00:32:00.656 --> 00:32:02.536
between 2 to 3 seconds.

747
00:32:02.966 --> 00:32:06.726
And then if you're to go ahead
and create a repeating timer

748
00:32:07.076 --> 00:32:10.256
with that 2-second time period
but a 1-second tolerance,

749
00:32:11.146 --> 00:32:12.826
the first time you'll
fire is here,

750
00:32:13.476 --> 00:32:16.006
the second time you'll
fire is from 4 to 5

751
00:32:16.006 --> 00:32:17.876
and the third time,
6 to 7 and so on.

752
00:32:18.166 --> 00:32:20.296
So as you noticed, the
timer isn't really drifting.

753
00:32:20.296 --> 00:32:21.996
It's still firing
every 2 seconds.

754
00:32:22.346 --> 00:32:25.496
However, the fire time might
be delayed by up to 1 second.

755
00:32:25.986 --> 00:32:28.706
Another set of API's
we're giving you is the

756
00:32:28.706 --> 00:32:29.366
occlusion APIs.

757
00:32:29.366 --> 00:32:32.466
You can now tell whether
Windows are visible or not

758
00:32:32.756 --> 00:32:35.576
and the advantage here is
by telling that a Window

759
00:32:35.576 --> 00:32:38.236
that you're drawing something
into is not visible to the user.

760
00:32:38.436 --> 00:32:41.436
You can actually stop doing
the work of drawing stuff

761
00:32:41.436 --> 00:32:44.256
and maybe even stop doing some
other work that's supporting

762
00:32:44.256 --> 00:32:45.006
that drawing work.

763
00:32:45.356 --> 00:32:47.706
This API exist on NSWindow
and NSAapplication.

764
00:32:47.706 --> 00:32:50.276
You can tell what the
occlusion state of a Window is.

765
00:32:50.746 --> 00:32:52.486
And there also notifications
that tell you

766
00:32:52.486 --> 00:32:54.566
when that occlusion
state to changes.

767
00:32:55.816 --> 00:32:57.846
We do have a whole talk
dedicated to App Nap.

768
00:32:58.436 --> 00:33:01.126
That's tomorrow morning
at 10:15,

769
00:32:58.436 --> 00:33:01.126
That's tomorrow morning
at 10:15,

770
00:33:01.416 --> 00:33:03.336
"Improving Power
Efficiency with App Nap."

771
00:33:05.316 --> 00:33:07.896
In addition we have a lab
right after that Cocoa

772
00:33:07.896 --> 00:33:11.046
and Foundation Lab where you can
ask App Nap questions as well

773
00:33:11.046 --> 00:33:13.306
as any other foundation or
Cocoa questions in fact.

774
00:33:13.836 --> 00:33:15.366
And then we have one more talk.

775
00:33:15.506 --> 00:33:16.676
We actually have a lot of talks

776
00:33:16.676 --> 00:33:18.706
about battery life
and power and so on.

777
00:33:18.706 --> 00:33:21.056
But one that you might
have missed this morning

778
00:33:21.056 --> 00:33:23.946
at 11:30 is maximizing
battery life on OS X

779
00:33:24.296 --> 00:33:27.466
which is a great overview of
this effort and it's given by,

780
00:33:27.466 --> 00:33:30.256
it was given by Bud
Tribble, vice president

781
00:33:30.256 --> 00:33:31.446
of Software Technology.

782
00:33:31.906 --> 00:33:36.366
Bud was also one of the original
designers of Mac OS in fact.

783
00:33:36.626 --> 00:33:37.936
So, if you haven't seen

784
00:33:37.936 --> 00:33:39.746
that talk you might want
to catch it on video.

785
00:33:40.166 --> 00:33:41.206
So the next thing I want to talk

786
00:33:41.206 --> 00:33:43.186
about is another new
facility we've added

787
00:33:43.226 --> 00:33:44.446
to foundation called
the progress,

788
00:33:44.446 --> 00:33:45.786
supporting and cancellation.

789
00:33:46.256 --> 00:33:50.216
This is a new facility for
reporting progress of work.

790
00:33:50.856 --> 00:33:56.846
It also allows the progress
to be presented to the user

791
00:33:57.146 --> 00:34:00.906
and for the user to cancel
the work that's represented

792
00:33:57.146 --> 00:34:00.906
and for the user to cancel
the work that's represented

793
00:34:00.936 --> 00:34:01.846
by that progress.

794
00:34:01.936 --> 00:34:05.966
And now, this facility
has got some aspects,

795
00:34:06.206 --> 00:34:09.815
it's loosely coupled
meaning the subsystem

796
00:34:10.025 --> 00:34:12.076
that is reporting
progress doesn't know

797
00:34:12.076 --> 00:34:14.896
about the subsystems that might
be displaying that progress.

798
00:34:15.636 --> 00:34:17.436
This facility is composable

799
00:34:17.436 --> 00:34:19.786
across layers meaning
different layers

800
00:34:19.786 --> 00:34:23.556
of software can be generating
progress in their own terms

801
00:34:23.556 --> 00:34:26.136
and they might not even be aware
of other layers of the system.

802
00:34:26.196 --> 00:34:29.126
For instance, the user
might say" Go ahead

803
00:34:29.126 --> 00:34:32.636
and compress this
folder full of images."

804
00:34:33.096 --> 00:34:37.446
So, at the top level we're
processing 42 images,

805
00:34:37.446 --> 00:34:40.116
one image out of 42, two
images out of 42 et cetera.

806
00:34:40.346 --> 00:34:43.746
But at the lower layer as each
image is being processed it's

807
00:34:43.746 --> 00:34:45.156
running through a
Scanline so kind

808
00:34:45.156 --> 00:34:47.606
of Scanline100 and
101 et cetera.

809
00:34:47.606 --> 00:34:49.835
And each layer reports
progress in its own terms

810
00:34:49.835 --> 00:34:51.386
but it's composed across layers.

811
00:34:51.525 --> 00:34:53.516
And this is also across process.

812
00:34:53.856 --> 00:34:59.556
One-- process the application
that's reporting progress might

813
00:34:59.556 --> 00:35:01.096
be different than the
one that's observing it.

814
00:34:59.556 --> 00:35:01.096
be different than the
one that's observing it.

815
00:35:01.286 --> 00:35:03.316
A great example of
this is Safari

816
00:35:03.796 --> 00:35:05.306
which is downloading a file.

817
00:35:05.396 --> 00:35:09.026
It's reporting progress of
that download but Finder

818
00:35:09.056 --> 00:35:11.606
or Dock can be observing
that progress

819
00:35:11.606 --> 00:35:14.566
and showing actually how much
of that download is finished.

820
00:35:14.566 --> 00:35:17.146
And in fact that those
facilities do use NS Progress

821
00:35:17.586 --> 00:35:18.236
in the system.

822
00:35:18.466 --> 00:35:19.796
So let me give you
a quick example

823
00:35:19.796 --> 00:35:21.286
of how you use NS Progress.

824
00:35:21.556 --> 00:35:24.096
Here's a simple method
which does some work.

825
00:35:24.096 --> 00:35:27.736
It runs through an array
of stuff just one by one

826
00:35:27.736 --> 00:35:29.266
and it processes the items

827
00:35:29.266 --> 00:35:30.896
in the array fairly
straightforward.

828
00:35:31.136 --> 00:35:32.826
If you want to make
this progress savvy,

829
00:35:33.126 --> 00:35:34.946
you would insert these
two lines of code.

830
00:35:35.316 --> 00:35:37.616
One of them goes and
creates an NS Progress object

831
00:35:38.026 --> 00:35:41.636
and you specify a total unit
count for an array of elements,

832
00:35:41.986 --> 00:35:44.236
the number of elements in an
array is a perfect unit account

833
00:35:44.676 --> 00:35:46.276
for a file, the byte count

834
00:35:46.276 --> 00:35:49.046
of the file might be the
unit count to use and so on.

835
00:35:49.786 --> 00:35:51.706
And then each time through
the loop we go ahead

836
00:35:51.706 --> 00:35:53.296
and set the completed
unit count.

837
00:35:53.906 --> 00:35:57.026
We increment the completed unit
count to indicate we're done

838
00:35:57.026 --> 00:35:59.086
with one more item, so
fairly straightforward.

839
00:35:59.496 --> 00:36:02.326
Now, you can also go to the next
step and make those cancelable.

840
00:35:59.496 --> 00:36:02.326
Now, you can also go to the next
step and make those cancelable.

841
00:36:02.786 --> 00:36:04.636
To do that, you would
go ahead and say

842
00:36:04.636 --> 00:36:08.396
if the progress is canceled then
you go ahead and exit the loop

843
00:36:08.466 --> 00:36:10.446
with an appropriate
canceled error.

844
00:36:10.906 --> 00:36:12.476
Of course, this would
also indicate

845
00:36:12.476 --> 00:36:14.766
that you would tell the
progress that's cancelable

846
00:36:14.766 --> 00:36:18.146
and that upper levels would
provide the ability for the user

847
00:36:18.146 --> 00:36:19.326
to cancel the progress.

848
00:36:19.666 --> 00:36:21.716
But you know, you can just
add this code here as a way

849
00:36:21.716 --> 00:36:23.966
to say that, "hey, I know
about cancellation I'll deal

850
00:36:23.966 --> 00:36:24.916
with it if the user did."

851
00:36:25.856 --> 00:36:28.196
Observing progress is also
fairly straightforward.

852
00:36:28.596 --> 00:36:32.436
There are properties
such as total unit count,

853
00:36:32.436 --> 00:36:34.656
completed unit count,
fraction completed

854
00:36:34.656 --> 00:36:36.816
that you can display in your UI.

855
00:36:37.006 --> 00:36:39.376
There's also a localized
description that's generated

856
00:36:39.376 --> 00:36:41.616
fairly generically or
it might be specialized

857
00:36:41.616 --> 00:36:43.216
by whoever is generating
the progress.

858
00:36:43.736 --> 00:36:44.906
In addition, there
are other properties

859
00:36:44.906 --> 00:36:47.296
such as whether the
progress is in determinant

860
00:36:47.296 --> 00:36:49.186
and of course whether
it's cancelable or not.

861
00:36:49.646 --> 00:36:52.316
As I mentioned earlier,
an example of you know,

862
00:36:52.316 --> 00:36:54.506
observing progress
is a finder window

863
00:36:54.506 --> 00:36:57.486
where this file is being
either copied or downloaded

864
00:36:57.806 --> 00:37:00.886
but the little bar at the
bottom is showing the progress

865
00:36:57.806 --> 00:37:00.886
but the little bar at the
bottom is showing the progress

866
00:37:00.886 --> 00:37:02.276
and the X in the corner there

867
00:37:02.276 --> 00:37:03.936
in the upper left
corner is showing you

868
00:37:03.936 --> 00:37:05.486
that it's a cancelable progress.

869
00:37:05.486 --> 00:37:08.716
So the user can click it at any
point to stop the operation.

870
00:37:08.996 --> 00:37:11.436
So the next thing I want to talk
about is date and time handling.

871
00:37:11.826 --> 00:37:13.386
And this is a favorite
topic of ours

872
00:37:13.386 --> 00:37:17.476
because I think we've talked
about this every WWDC for a few,

873
00:37:17.476 --> 00:37:19.736
for the last few years now it's

874
00:37:19.736 --> 00:37:21.546
because current calendar
computations turned

875
00:37:21.546 --> 00:37:22.186
out to be hard.

876
00:37:22.616 --> 00:37:24.976
They're hard because there
are different calendar systems

877
00:37:24.976 --> 00:37:25.896
in use around the world.

878
00:37:25.896 --> 00:37:27.836
They're hard because there
are daylight savings.

879
00:37:27.836 --> 00:37:30.346
They're hard there because of
their time zones and so on.

880
00:37:30.346 --> 00:37:32.256
So there are a lot of little
complications involved

881
00:37:32.256 --> 00:37:33.506
in current calendar
computations.

882
00:37:34.186 --> 00:37:36.336
So to help with this, we
provided a bunch more APIs.

883
00:37:36.336 --> 00:37:38.846
And I'm just going to
touch upon a few of them.

884
00:37:39.576 --> 00:37:42.416
Some of the APIs are
just what we would refer

885
00:37:42.416 --> 00:37:43.956
to as communions APIs.

886
00:37:44.326 --> 00:37:46.926
They just give you very
simple one-line ways

887
00:37:46.926 --> 00:37:50.436
to achieve some things that
might have been few lines before

888
00:37:50.436 --> 00:37:52.046
or maybe in fact
more lines in fact.

889
00:37:52.316 --> 00:37:53.736
And there might have
been hidden pitfalls.

890
00:37:54.086 --> 00:37:55.696
An example is just
asking a question

891
00:37:55.696 --> 00:37:57.296
like "is date in today?"

892
00:37:57.706 --> 00:38:00.316
Is this NSDate object
some time in today?

893
00:37:57.706 --> 00:38:00.316
Is this NSDate object
some time in today?

894
00:38:00.896 --> 00:38:03.196
One-line call now to your
appropriate calendar.

895
00:38:03.856 --> 00:38:05.726
Another one is this
date in the weekend.

896
00:38:06.166 --> 00:38:08.596
That's you know that's not
getting fairly powerful

897
00:38:08.596 --> 00:38:11.536
because you know definition of
weekend might change depending

898
00:38:11.536 --> 00:38:14.036
on what calendar and what
part of the world you are.

899
00:38:14.666 --> 00:38:18.266
Another call along the same
lines "is date equal to date"

900
00:38:18.756 --> 00:38:20.286
in unit ground [inaudible]
in this case,

901
00:38:20.286 --> 00:38:23.206
it will tell you whether two
dates are within the same month

902
00:38:23.416 --> 00:38:25.816
in that calendar
system and so on.

903
00:38:25.876 --> 00:38:28.426
There's a bunch of methods here
I would encourage you to go look

904
00:38:28.426 --> 00:38:30.936
at the header file to
see what we've all added.

905
00:38:31.376 --> 00:38:33.636
We also have a bunch of
new enumeration APIs here.

906
00:38:34.226 --> 00:38:35.786
And again, I will just--

907
00:38:35.786 --> 00:38:38.416
I want to go through them all
just show you one of them.

908
00:38:39.446 --> 00:38:41.246
Enumerate dates starting
after date.

909
00:38:42.046 --> 00:38:45.476
Now, this method here will
enumerate dates you are

910
00:38:45.476 --> 00:38:47.756
providing a date
components instance

911
00:38:47.756 --> 00:38:49.846
which represents your
enumeration parameters.

912
00:38:50.036 --> 00:38:54.326
And then options parameter which
represents what to do in case

913
00:38:54.326 --> 00:38:55.896
of various exceptional cases.

914
00:38:56.446 --> 00:38:57.696
Let me give you a quick example.

915
00:38:58.956 --> 00:39:01.916
Let's say you want to create
NSDate representing 2:30 a.m.

916
00:38:58.956 --> 00:39:01.916
Let's say you want to create
NSDate representing 2:30 a.m.

917
00:39:02.126 --> 00:39:02.696
every day.

918
00:39:03.826 --> 00:39:06.266
You'd create a date
components object set the hour

919
00:39:06.266 --> 00:39:08.276
and the minute like
this to 2 and 30.

920
00:39:08.846 --> 00:39:11.596
And then you would ask
your current calendar

921
00:39:11.596 --> 00:39:13.526
which is usually the
most appropriate calendar

922
00:39:13.796 --> 00:39:14.296
to enumerate.

923
00:39:14.656 --> 00:39:15.726
So fairly straightforward

924
00:39:16.136 --> 00:39:19.466
and you would start NSDate
date it's right now June 11th

925
00:39:19.466 --> 00:39:24.006
at 4 p.m. So, you start running
this program and it will report

926
00:39:24.036 --> 00:39:27.096
to you June 12th at 2:30
a.m. so on and so forth.

927
00:39:27.316 --> 00:39:30.596
March 8th 2:30 a.m.,
March 9th at 3 a.m.

928
00:39:30.596 --> 00:39:33.236
And it will continue
on reporting 2:30.

929
00:39:33.876 --> 00:39:36.596
So what happened there on
March 9th, I think most

930
00:39:36.596 --> 00:39:37.936
of you already can guess it's

931
00:39:38.036 --> 00:39:39.976
when daylight savings
time happens here

932
00:39:39.976 --> 00:39:40.996
in the United States.

933
00:39:41.336 --> 00:39:43.436
So the algorithm chose
to give you 3 o'clock

934
00:39:43.496 --> 00:39:45.746
but it also told you that
the time was not exact.

935
00:39:46.246 --> 00:39:48.206
So you know that
something went wrong.

936
00:39:48.666 --> 00:39:51.666
So where did the 3
o'clock come from?

937
00:39:51.666 --> 00:39:53.086
Well, it came from
this argument here,

938
00:39:53.086 --> 00:39:54.666
NSCalendar match next time.

939
00:39:54.946 --> 00:39:58.356
This option tells you that if
this given time doesn't exist

940
00:39:58.356 --> 00:40:00.246
and in this case of
course there's no 2:30

941
00:39:58.356 --> 00:40:00.246
and in this case of
course there's no 2:30

942
00:40:00.246 --> 00:40:02.736
on March 9th time
jumps from 2 a.m.

943
00:40:02.736 --> 00:40:03.826
to 3 a.m. just give
me the next time.

944
00:40:03.916 --> 00:40:04.686
So it gives you 3 a.m.

945
00:40:05.276 --> 00:40:10.246
There are other options which
give you other choices like 3:30

946
00:40:10.246 --> 00:40:12.796
or 1:30 or maybe it doesn't
give you a return result at all

947
00:40:12.796 --> 00:40:14.176
and just generates
an error instead.

948
00:40:15.346 --> 00:40:18.956
So to find out more about the
various challenges and issues

949
00:40:18.956 --> 00:40:22.196
and the various solutions we've
come up with, and to hear more

950
00:40:22.196 --> 00:40:24.066
about these options in
this enumeration case.

951
00:40:24.066 --> 00:40:26.856
You can go to this talk
on Friday at 11:30,

952
00:40:27.266 --> 00:40:29.656
Solutions to Common Date
and Time Challenges.

953
00:40:29.726 --> 00:40:30.656
You know, there are a lot

954
00:40:30.656 --> 00:40:32.746
of hard things actually it
turns out in programing.

955
00:40:32.746 --> 00:40:35.036
Another thing that's
hard is handling plurals.

956
00:40:35.536 --> 00:40:39.066
Now, many of you might say,
"what's hard with that?,

957
00:40:39.306 --> 00:40:44.376
I wrote this code" you know,
if N equals one, yes you know,

958
00:40:44.376 --> 00:40:48.296
there is one and if otherwise
you know percent D files are

959
00:40:48.296 --> 00:40:48.976
selected right?

960
00:40:48.976 --> 00:40:51.336
So many of us are either
proud of within this--

961
00:40:51.476 --> 00:40:53.296
having this code,
or maybe guilty

962
00:40:53.296 --> 00:40:54.296
of having written this code?

963
00:40:54.696 --> 00:40:57.466
So this code is actually fine
for English but it doesn't work

964
00:40:57.466 --> 00:40:59.346
in other languages,
most other languages.

965
00:40:59.346 --> 00:41:02.186
For instance, even French
turns out, treats zero

966
00:40:59.346 --> 00:41:02.186
For instance, even French
turns out, treats zero

967
00:41:02.186 --> 00:41:05.486
and one differently
than the plural cases.

968
00:41:05.486 --> 00:41:07.926
While in English, zero is
treated like the plural case.

969
00:41:08.306 --> 00:41:11.436
And forget about Arabic,
here's what you get,

970
00:41:11.636 --> 00:41:15.046
you get six different cases and
I'm not even going to you know,

971
00:41:15.166 --> 00:41:16.016
run through this code.

972
00:41:16.016 --> 00:41:17.836
But it's not simple
and so if you are going

973
00:41:17.836 --> 00:41:19.626
to write a properly
localized application

974
00:41:19.626 --> 00:41:23.156
that handles all these cases,
there's a lot of if statements

975
00:41:23.156 --> 00:41:24.926
and a lot of localizations
we're having to deal with.

976
00:41:25.616 --> 00:41:29.816
So, we have a solution
for this in foundation

977
00:41:30.176 --> 00:41:32.606
and we call it localized
Populous File

978
00:41:32.856 --> 00:41:36.576
and it was also known as
strings dict resource files.

979
00:41:37.216 --> 00:41:39.506
Those of you familiar with the
way we do localization know

980
00:41:39.506 --> 00:41:40.846
that we have strings file.

981
00:41:40.846 --> 00:41:44.506
Strings dict files as you
can guess is just a glorified

982
00:41:44.506 --> 00:41:46.876
strings file which actually
contains the full-fledged

983
00:41:46.926 --> 00:41:47.966
dictionary in there.

984
00:41:48.536 --> 00:41:52.616
It provides localized
forms based on plurality

985
00:41:52.686 --> 00:41:54.496
as I showed and also gender.

986
00:41:54.566 --> 00:41:57.726
It turns out gender, most of
you know isn't easy either.

987
00:41:57.866 --> 00:41:59.646
Some languages have
one, some have two,

988
00:41:59.646 --> 00:42:01.376
turns out some have
even more like up

989
00:41:59.646 --> 00:42:01.376
turns out some have
even more like up

990
00:42:01.376 --> 00:42:02.996
to five in some languages.

991
00:42:03.436 --> 00:42:05.256
And you know, and who
knows what will happen

992
00:42:05.256 --> 00:42:07.746
when you discover an
alien race with 10 sexes?

993
00:42:08.056 --> 00:42:09.736
So gender is not easy OK?

994
00:42:10.336 --> 00:42:13.206
So anyway the good thing
here is there's no new API

995
00:42:13.386 --> 00:42:14.046
to do any of this.

996
00:42:14.046 --> 00:42:15.836
You just have in fact one
code of path, for instance,

997
00:42:15.836 --> 00:42:17.146
here's a kind of
code you might write.

998
00:42:17.596 --> 00:42:20.376
Just localize a string,
percent D files selected,

999
00:42:20.376 --> 00:42:21.656
it's a nice generic string,

1000
00:42:21.656 --> 00:42:24.676
it'll work in case no
localization exist.

1001
00:42:24.676 --> 00:42:26.796
It's clearly suboptimal
but it will work.

1002
00:42:27.206 --> 00:42:29.066
However if this was
properly localized,

1003
00:42:29.976 --> 00:42:32.726
here is what the
localization would look like.

1004
00:42:33.766 --> 00:42:37.536
So let's look at a strings
file, the strings dict file.

1005
00:42:38.096 --> 00:42:39.756
First of all, avert your eyes

1006
00:42:39.756 --> 00:42:41.146
because there are
a lot of XML here.

1007
00:42:41.526 --> 00:42:44.456
And XML, you know
is this ugly glass

1008
00:42:44.456 --> 00:42:46.016
that makes everything
look unattractive.

1009
00:42:46.416 --> 00:42:50.316
So let's hide all this stuff
and maybe just pull out the guts

1010
00:42:50.316 --> 00:42:51.436
of what we're trying to look at.

1011
00:42:51.766 --> 00:42:53.666
So the string we're
localizing is up here,

1012
00:42:53.666 --> 00:42:55.136
percent D file selected.

1013
00:42:55.436 --> 00:42:57.396
It's been localized
into this string.

1014
00:42:57.906 --> 00:43:01.946
File count selected and that
substring file count is actually

1015
00:42:57.906 --> 00:43:01.946
File count selected and that
substring file count is actually

1016
00:43:01.946 --> 00:43:03.586
being selected out of
this dictionary here.

1017
00:43:03.586 --> 00:43:06.236
Either the substring if file is

1018
00:43:06.236 --> 00:43:08.616
or the substring
percent D files are based

1019
00:43:08.616 --> 00:43:10.786
on the number we
have is one or other.

1020
00:43:11.196 --> 00:43:12.936
This works for the English case

1021
00:43:12.936 --> 00:43:14.666
and this is the English
strings dict file.

1022
00:43:15.096 --> 00:43:18.276
However, if the same
situation was being localized

1023
00:43:18.276 --> 00:43:21.816
for other languages, there would
be other cases here such as zero

1024
00:43:21.816 --> 00:43:24.626
or two or few or many,
which would apply

1025
00:43:24.746 --> 00:43:26.616
to different localizations
and different languages.

1026
00:43:26.616 --> 00:43:30.296
So this is the way that we
handle localizations now if you,

1027
00:43:31.276 --> 00:43:33.516
and it's a manner
of just you know,

1028
00:43:33.516 --> 00:43:35.156
coming up with the
current localization files

1029
00:43:35.156 --> 00:43:36.926
which can be done of
course in parallel

1030
00:43:36.926 --> 00:43:38.086
to your application development.

1031
00:43:38.216 --> 00:43:40.606
So I'm going to talk a
bit about instance type.

1032
00:43:40.606 --> 00:43:42.456
Instance type is a
feature we introduced

1033
00:43:42.456 --> 00:43:44.496
in 10.8 in objective C.

1034
00:43:44.766 --> 00:43:46.026
Instance type indicates

1035
00:43:46.026 --> 00:43:48.936
that a method returns an
instance of its receiver.

1036
00:43:49.276 --> 00:43:50.726
And you might already
be familiar with it.

1037
00:43:51.086 --> 00:43:53.086
It's already applied
implicitly to methods

1038
00:43:53.086 --> 00:43:54.776
such as ELAC, NEW and INIT.

1039
00:43:55.266 --> 00:43:57.846
Although these are not the
declarations you see in 10.8.

1040
00:43:57.926 --> 00:44:00.646
SDKs, this is the way
it works implicitly.

1041
00:43:57.926 --> 00:44:00.646
SDKs, this is the way
it works implicitly.

1042
00:44:01.026 --> 00:44:04.506
So this means that when you
send NSArray and ELAC method,

1043
00:44:05.256 --> 00:44:08.126
the return now is
implicitly assumed

1044
00:44:08.126 --> 00:44:09.526
to be an instance of NSArray.

1045
00:44:09.806 --> 00:44:12.256
So this is applied only to
a very few methods in 10.8

1046
00:44:12.576 --> 00:44:15.246
because many other methods
are not implicitly done.

1047
00:44:15.246 --> 00:44:19.386
But in 10.9, we've declared this
on many more methods in a number

1048
00:44:19.386 --> 00:44:23.446
of foundation classes including
NSString, NSDictinary, NSSet,

1049
00:44:24.246 --> 00:44:28.586
NSDate etc. So let me just
show you how this helps you.

1050
00:44:29.716 --> 00:44:34.286
Here is a line of code which
some people might have written

1051
00:44:34.286 --> 00:44:36.796
at some point, probably
nobody in this room.

1052
00:44:36.966 --> 00:44:40.006
And I'm just going
to put a big X on it

1053
00:44:40.006 --> 00:44:42.316
because there's a giant
error in this line of code.

1054
00:44:42.696 --> 00:44:44.036
And you know, you're saying

1055
00:44:44.036 --> 00:44:48.166
of NSMutableSet mySet
equals NSMutableArray array.

1056
00:44:48.486 --> 00:44:52.296
Now the thing is so, in 10.8,
the compiler says OK, whatever.

1057
00:44:52.716 --> 00:44:54.706
It doesn't even generate
a warning.

1058
00:44:55.766 --> 00:44:56.906
And that's because
the arraignment

1059
00:44:56.906 --> 00:45:00.026
to the 10.8 is declared to
return ID so the compiler think

1060
00:44:56.906 --> 00:45:00.026
to the 10.8 is declared to
return ID so the compiler think

1061
00:45:00.026 --> 00:45:00.886
that it's a good match here.

1062
00:45:01.456 --> 00:45:04.176
Now, what's even sadder
is that if you go ahead

1063
00:45:04.176 --> 00:45:07.206
and write the next line
like this, mySet add object,

1064
00:45:07.426 --> 00:45:10.746
this also works because add
objects happens to exist both

1065
00:45:10.746 --> 00:45:12.806
in NSMutableArray
and NSMutableSet.

1066
00:45:13.196 --> 00:45:14.276
So now you've written a code

1067
00:45:14.306 --> 00:45:17.036
which is totally not
doing what you intended.

1068
00:45:17.036 --> 00:45:21.056
But it is working and the
bad thing is this will work

1069
00:45:21.336 --> 00:45:23.966
with a number of
items like 5, 10, 20.

1070
00:45:24.236 --> 00:45:26.066
But you know, as you add
more items to the array,

1071
00:45:26.066 --> 00:45:28.056
instead of getting
set characteristics

1072
00:45:28.056 --> 00:45:29.326
that you might have
been expecting,

1073
00:45:29.326 --> 00:45:31.056
you will be getting
array characteristics.

1074
00:45:31.056 --> 00:45:33.196
So your performance
will be suddenly showing

1075
00:45:33.746 --> 00:45:34.576
weird behaviors.

1076
00:45:34.576 --> 00:45:39.996
So, the bottom-line in 10.8, the
compiler is happy, no complaints

1077
00:45:39.996 --> 00:45:41.026
and the Apps seems to work.

1078
00:45:41.376 --> 00:45:43.576
In 10.9, here's what
the compiler will do,

1079
00:45:43.576 --> 00:45:44.816
it will give you a big warning,

1080
00:45:45.236 --> 00:45:47.426
telling you yes,
something's wrong.

1081
00:45:47.826 --> 00:45:49.886
You won't be clapping
actually once you complied your

1082
00:45:49.886 --> 00:45:52.336
applications on 10.9
and get warnings.

1083
00:45:52.926 --> 00:45:57.326
However, it's very important to
pay attention to these warnings

1084
00:45:57.326 --> 00:46:00.066
because we found out
many cases where we--

1085
00:45:57.326 --> 00:46:00.066
because we found out
many cases where we--

1086
00:46:00.146 --> 00:46:01.686
we've gotten warnings
due to this,

1087
00:46:01.686 --> 00:46:05.256
were actually either real bugs
or bugs waiting to happen.

1088
00:46:05.256 --> 00:46:07.126
So it's a good idea to pay
attention to these warnings.

1089
00:46:07.576 --> 00:46:08.146
They are good for you.

1090
00:46:08.766 --> 00:46:13.596
Now, speaking of NSArray, let's
talk about a tidbit in NSArray.

1091
00:46:14.006 --> 00:46:17.066
For the longest time, we've had
a method called last object.

1092
00:46:18.326 --> 00:46:21.816
And now, we've added a
method called first object.

1093
00:46:21.816 --> 00:46:23.226
And because we love you so much,

1094
00:46:23.226 --> 00:46:25.796
it actually works
back to 10.6 in iOS4.

1095
00:46:25.826 --> 00:46:27.576
So we made that happen to you.

1096
00:46:27.876 --> 00:46:30.236
We decided it was about time,
we were keeping it you know,

1097
00:46:30.236 --> 00:46:31.946
it was just ripening
on the tree.

1098
00:46:31.946 --> 00:46:32.606
So there it is.

1099
00:46:33.376 --> 00:46:37.036
Another tidbit about NSData,
so NSData now has basics

1100
00:46:37.096 --> 00:46:38.686
for encoding and
decoding support.

1101
00:46:38.686 --> 00:46:41.026
You can encode/decode
back the strings and data.

1102
00:46:41.656 --> 00:46:42.096
Thank you.

1103
00:46:42.556 --> 00:46:46.256
You can also cast the dispatch
data ts to NSData's now

1104
00:46:46.256 --> 00:46:50.076
and this is actually a one way--
one way bridging effectively.

1105
00:46:50.466 --> 00:46:53.806
They're sometimes you-- you
know, you cross API boundaries

1106
00:46:53.806 --> 00:46:55.856
and you need to do this.

1107
00:46:55.906 --> 00:46:58.326
And note that since dispatch
data ts, those of you

1108
00:46:58.326 --> 00:46:59.356
who are familiar
might know this.

1109
00:46:59.416 --> 00:47:03.426
Dispatch data ts can represent
discontiguous blocks of data.

1110
00:46:59.416 --> 00:47:03.426
Dispatch data ts can represent
discontiguous blocks of data.

1111
00:47:05.156 --> 00:47:06.206
There's a slight, you know,

1112
00:47:06.356 --> 00:47:08.776
maybe mismatch with
NSData there.

1113
00:47:09.146 --> 00:47:12.106
If you call NSData, bytes method
will actually make it work.

1114
00:47:12.106 --> 00:47:13.756
However, if you want
to be more efficient

1115
00:47:14.046 --> 00:47:15.616
with these continuos
blocks of data,

1116
00:47:16.026 --> 00:47:18.286
you can actually use this new
enumeration method we've added

1117
00:47:18.316 --> 00:47:21.426
which lets you enumerate NSData
in terms of the blocks it has.

1118
00:47:21.756 --> 00:47:23.286
And of course, if you
happen to call this on one

1119
00:47:23.286 --> 00:47:26.136
of the traditional style datas,
you'll still get just one block.

1120
00:47:26.136 --> 00:47:28.146
It will be as efficient as
calling the bytes method.

1121
00:47:28.146 --> 00:47:31.416
So it's you know, it's a pretty
good method to use in general.

1122
00:47:31.676 --> 00:47:33.766
So just call enumerate
byte ranges using block

1123
00:47:33.766 --> 00:47:35.686
and it will return to
you the radius where the,

1124
00:47:35.746 --> 00:47:37.856
the ranges where the
discontiguous memory

1125
00:47:37.856 --> 00:47:38.716
blocks exist.

1126
00:47:39.626 --> 00:47:43.236
OK, NSURL component is another
new class in foundation.

1127
00:47:43.376 --> 00:47:47.476
NSURL components is to NSURL
what NSDate components is

1128
00:47:47.476 --> 00:47:48.196
to NSDate.

1129
00:47:48.196 --> 00:47:52.016
It's a mutable class that lets
you parse and create URLs.

1130
00:47:52.486 --> 00:47:54.646
And for those of you
who are into RFCs.

1131
00:47:54.976 --> 00:47:59.156
This now allows NSURL to be
compliant with this RFC up here.

1132
00:47:59.736 --> 00:48:01.896
The API is fairly
straightforward.

1133
00:47:59.736 --> 00:48:01.896
The API is fairly
straightforward.

1134
00:48:02.106 --> 00:48:03.706
You can initialize
one from a URL

1135
00:48:03.706 --> 00:48:05.286
or you can just initialize
an empty one.

1136
00:48:05.406 --> 00:48:08.036
You can go ahead and set
various properties on here

1137
00:48:08.036 --> 00:48:10.746
such as the scheme, the
user, the path, the query.

1138
00:48:11.316 --> 00:48:13.956
And you just go ahead
and extract the URL.

1139
00:48:14.416 --> 00:48:17.436
And just to show you
a quick example, you--

1140
00:48:17.436 --> 00:48:20.326
so let me create one just
specify those parameters

1141
00:48:20.496 --> 00:48:22.216
and I can go ahead
and ask the URL

1142
00:48:22.216 --> 00:48:23.266
and here's the output you get.

1143
00:48:23.346 --> 00:48:25.876
So it's much, much
more straightforward

1144
00:48:25.876 --> 00:48:28.926
than using the previous
URLs and the APIs and NSURL.

1145
00:48:29.576 --> 00:48:31.996
NSURLSession is another
API in foundation.

1146
00:48:31.996 --> 00:48:34.406
It's actually a set
of related classes,

1147
00:48:34.886 --> 00:48:37.316
it's replacement APIs
for NSURLConnection.

1148
00:48:37.876 --> 00:48:39.526
It's-- gives you
improved control

1149
00:48:39.526 --> 00:48:40.926
over configuration options

1150
00:48:40.926 --> 00:48:43.376
such as authentication
cookies and caching.

1151
00:48:43.646 --> 00:48:45.876
You no longer have to fiddle
with the global settings,

1152
00:48:45.876 --> 00:48:48.596
you can just set them for the
operation you have at hand.

1153
00:48:49.096 --> 00:48:51.676
It has ability to pour out
from out of process downloads

1154
00:48:51.676 --> 00:48:54.136
and uploads and it will
notify you when it's done.

1155
00:48:54.626 --> 00:48:57.496
And there's also some
convenience APIs in NSURLSession

1156
00:48:57.496 --> 00:49:00.616
that lets you do simple
cancelable asynchronous

1157
00:48:57.496 --> 00:49:00.616
that lets you do simple
cancelable asynchronous

1158
00:49:00.616 --> 00:49:02.846
operations which has
a few lines of code.

1159
00:49:02.846 --> 00:49:05.026
I'm not going to go
into more depth here

1160
00:49:05.026 --> 00:49:08.106
because there's a talk
about NSURLSession,

1161
00:49:08.106 --> 00:49:09.836
what's new in foundation
networking.

1162
00:49:10.096 --> 00:49:12.446
We have some improvements in
the core data and you heard

1163
00:49:12.446 --> 00:49:14.166
about this yesterday as well.

1164
00:49:14.656 --> 00:49:17.136
In the area of iCloud
support, we now made it

1165
00:49:17.136 --> 00:49:21.506
so that core data does lot more
of the tedious things for you.

1166
00:49:21.646 --> 00:49:24.876
For instance, core data will
now manage your fallback store.

1167
00:49:24.916 --> 00:49:26.166
You don't have to
deal with it anymore.

1168
00:49:26.466 --> 00:49:30.386
Core data will do asynchronous
iCloud initialization,

1169
00:49:30.736 --> 00:49:32.906
so you don't have to worry
about writing that code anymore.

1170
00:49:33.186 --> 00:49:36.156
And core data will also
automatically handle account

1171
00:49:36.156 --> 00:49:36.906
changes for you.

1172
00:49:36.906 --> 00:49:39.026
So that's another block of code
that you don't have to write

1173
00:49:39.086 --> 00:49:40.396
in your coded applications.

1174
00:49:40.976 --> 00:49:43.846
In addition, there are
many other fixes not just

1175
00:49:43.846 --> 00:49:46.066
in core data but also
in the iClouds stack,

1176
00:49:46.126 --> 00:49:47.566
both in the client and server

1177
00:49:47.986 --> 00:49:49.616
that will make your
applications--

1178
00:49:49.616 --> 00:49:51.646
that will help make your
applications more robust

1179
00:49:51.776 --> 00:49:52.296
than before.

1180
00:49:52.486 --> 00:49:55.136
There are other changes in core
data as well and one of them is

1181
00:49:55.136 --> 00:49:57.106
that we've enabled
write-ahead logging,

1182
00:49:57.486 --> 00:49:58.856
journaling on by default.

1183
00:49:58.856 --> 00:50:00.706
This replaces rollback
journaling

1184
00:49:58.856 --> 00:50:00.706
This replaces rollback
journaling

1185
00:50:00.706 --> 00:50:02.276
that was on by default before.

1186
00:50:02.886 --> 00:50:04.786
This write-ahead
logging journaling is--

1187
00:50:04.926 --> 00:50:08.066
has improved reliability,
concurrency, and performance

1188
00:50:08.066 --> 00:50:09.276
so it's a good thing in general.

1189
00:50:09.716 --> 00:50:12.616
So you can hear more about
core data changes and core data

1190
00:50:12.616 --> 00:50:16.836
and iCloud as well tomorrow
morning in this talk,

1191
00:50:16.836 --> 00:50:17.966
What's New in Core
Data and iCloud.

1192
00:50:18.866 --> 00:50:20.686
There is also a talk
tomorrow at 2,

1193
00:50:20.966 --> 00:50:23.016
core data performance
optimization and debugging.

1194
00:50:23.196 --> 00:50:30.736
A new feature in objective C
for 10.9 and iOS7 is modules.

1195
00:50:31.386 --> 00:50:34.566
Modules is a better way to
import a framework's interface.

1196
00:50:35.426 --> 00:50:38.436
So instead of using pound
import that you're you know,

1197
00:50:38.696 --> 00:50:40.506
used to love, it's been
around for a while.

1198
00:50:40.506 --> 00:50:44.596
Cocoa/cocoa.h you can now
use at import of coco.

1199
00:50:45.486 --> 00:50:49.626
What this does is it loads a
binary representation, however,

1200
00:50:49.626 --> 00:50:51.456
I mean, just something
you could do before

1201
00:50:51.456 --> 00:50:53.506
with pre-compiled headers,
but it's more flexible

1202
00:50:53.506 --> 00:50:56.346
that pre-compiled headers
because you don't have to manage

1203
00:50:56.346 --> 00:50:58.086
that list of pre-compiled
headers anymore.

1204
00:50:58.086 --> 00:50:59.746
The system will take
care of it for you.

1205
00:51:00.626 --> 00:51:02.576
This is also immune to effects

1206
00:51:02.576 --> 00:51:05.016
of local macro definitions
you know,

1207
00:51:05.016 --> 00:51:08.406
there's that C programmer
mistake of pound to find int

1208
00:51:08.536 --> 00:51:10.266
to you know, short
or whatever you know.

1209
00:51:10.266 --> 00:51:12.206
That will no longer be
an issue in this case

1210
00:51:12.206 --> 00:51:16.596
because those macro definitions
do not take effect in interfaces

1211
00:51:16.596 --> 00:51:18.876
that you've imported as modules.

1212
00:51:19.466 --> 00:51:21.686
These are enabled for
new projects by default

1213
00:51:21.686 --> 00:51:24.606
and you can also enable it for
your existing projects as well.

1214
00:51:25.206 --> 00:51:27.726
So there'll be a lot
more coverage of modules

1215
00:51:27.726 --> 00:51:29.636
in advances in objective C.

1216
00:51:29.636 --> 00:51:30.906
I just want to mention,

1217
00:51:30.906 --> 00:51:33.116
highlight of few new
frameworks we've added.

1218
00:51:33.426 --> 00:51:34.396
One of them is MapKit.

1219
00:51:34.666 --> 00:51:35.856
It was on iOS6.

1220
00:51:35.856 --> 00:51:39.136
It's now available on 10.9.

1221
00:51:40.176 --> 00:51:42.476
Sprite Kit, you heard
about Sprite Kit yesterday.

1222
00:51:42.476 --> 00:51:46.486
It's a new framework for
doing games or applications

1223
00:51:46.486 --> 00:51:50.176
with game-like animations
and physics needs and so on.

1224
00:51:50.826 --> 00:51:53.186
And there's also AV
Kit which is used

1225
00:51:53.186 --> 00:51:55.006
in conjunction with
AV foundation.

1226
00:51:55.286 --> 00:51:57.646
It's you know, you
can replace usage

1227
00:51:57.646 --> 00:51:59.506
of queue ticket in
your applications.

1228
00:52:00.296 --> 00:52:03.586
There are talks for this, moving
to AV Kit and AV Foundations,

1229
00:52:03.586 --> 00:52:06.216
introduction to Sprite Kit
and what's new in Map Kit.

1230
00:52:06.216 --> 00:52:08.226
So I'm going to talk
a bit about Textkit.

1231
00:52:09.126 --> 00:52:11.316
Textkit, you heard
about this yesterday

1232
00:52:11.316 --> 00:52:12.926
in the State of the Union Talk.

1233
00:52:14.036 --> 00:52:17.786
Textkit well, let me choose
Textkit by saying when you look

1234
00:52:17.786 --> 00:52:21.136
at Cocoa Text on OS X,
you see NS Text View.

1235
00:52:21.886 --> 00:52:24.066
However, if you make
any sophisticated use

1236
00:52:24.066 --> 00:52:26.956
of the text system on OS X,
you know that's actually made

1237
00:52:26.956 --> 00:52:28.466
up of these underlying classes

1238
00:52:28.736 --> 00:52:30.696
which gives you a lot more
power and flexibility.

1239
00:52:31.026 --> 00:52:35.286
When you look at Textkit on iOS,
which is a new feature in iOS7,

1240
00:52:35.286 --> 00:52:36.866
if I didn't make that clear,

1241
00:52:37.336 --> 00:52:39.596
you see that there is
the UI Text View class

1242
00:52:39.726 --> 00:52:41.216
which has existed
for a long time.

1243
00:52:41.536 --> 00:52:43.516
However, if you look
underneath now,

1244
00:52:43.846 --> 00:52:46.226
you'll see the same
set of classes.

1245
00:52:46.636 --> 00:52:48.266
In addition, they have the same

1246
00:52:48.436 --> 00:52:50.306
or very similar set
of APIs as well.

1247
00:52:50.606 --> 00:52:54.306
So I'm mentioning this to you
because yeah, those of you

1248
00:52:54.306 --> 00:52:56.996
who have a sophisticated
text need of applications

1249
00:52:56.996 --> 00:52:58.856
with sophisticated
text users on OS X,

1250
00:52:59.086 --> 00:53:00.456
you can now import
these applications

1251
00:52:59.086 --> 00:53:00.456
you can now import
these applications

1252
00:53:00.456 --> 00:53:03.396
to iOS with a lot more ease.

1253
00:53:04.116 --> 00:53:05.616
So you can find out
more about Textkit

1254
00:53:05.616 --> 00:53:08.986
in the two talks introducing
Textkit and advanced Textkit.

1255
00:53:08.986 --> 00:53:13.076
OK so, as I'm running out of
time, I just want to throw

1256
00:53:13.216 --> 00:53:16.506
up a list of some other
changes we have bunch

1257
00:53:16.506 --> 00:53:18.336
of Table View outline
view improvements,

1258
00:53:18.496 --> 00:53:20.166
we have layer-backed
new improvements.

1259
00:53:20.166 --> 00:53:22.546
Again please look at the
release notes, read about these.

1260
00:53:22.986 --> 00:53:27.036
NSSlider has some new APIs and
we got rid of some crusty ones.

1261
00:53:27.036 --> 00:53:28.146
Some built-in services,

1262
00:53:28.146 --> 00:53:30.826
additional built-in services
and NSSharingService.

1263
00:53:31.216 --> 00:53:33.086
There's some NSCalendar
convenience APIs

1264
00:53:33.086 --> 00:53:35.496
which make it easier to move
your code back and forth

1265
00:53:35.496 --> 00:53:37.336
between UIColor and NSColor.

1266
00:53:38.066 --> 00:53:40.756
We've-- all right, some
people have tried that

1267
00:53:40.756 --> 00:53:41.846
and now it's even better.

1268
00:53:42.466 --> 00:53:44.176
So we've deprecated some NSNib

1269
00:53:44.176 --> 00:53:46.166
and NSBundle nib-loading
methods.

1270
00:53:46.166 --> 00:53:47.516
And the new ones
we had introduced

1271
00:53:47.516 --> 00:53:49.656
in 10.8 are the ones you
should move forward to.

1272
00:53:49.846 --> 00:53:53.606
And in foundation, we have
some further NSURL improvements

1273
00:53:53.646 --> 00:53:54.636
beyond the ones I've talked

1274
00:53:54.636 --> 00:53:57.636
about including some built-in
character sets for URL handling.

1275
00:53:58.046 --> 00:54:01.976
NS metadata APIs and foundation
level attribute names you no

1276
00:53:58.046 --> 00:54:01.976
NS metadata APIs and foundation
level attribute names you no

1277
00:54:01.976 --> 00:54:04.016
longer have to go
to CF level APIs

1278
00:54:04.016 --> 00:54:06.256
to get your spotlight
attribute names.

1279
00:54:07.106 --> 00:54:12.186
NSUser defaults suite--
whatever, I can't say that word.

1280
00:54:12.416 --> 00:54:14.986
If you have a bunch of related
applications and they want

1281
00:54:14.986 --> 00:54:18.136
to share defaults, these are the
APIs you would use, thank you.

1282
00:54:18.526 --> 00:54:22.666
And then also NSScanner has
support for unsigned long long.

1283
00:54:22.666 --> 00:54:25.056
So please refer to the
10.9 release notes.

1284
00:54:25.846 --> 00:54:28.726
And now, I want to just put
a reminder of some features

1285
00:54:28.726 --> 00:54:30.506
that have come and
I would have still.

1286
00:54:30.906 --> 00:54:32.156
If you haven't taken advantage

1287
00:54:32.156 --> 00:54:34.326
of these features
please consider doing so.

1288
00:54:34.326 --> 00:54:36.516
Some of these have
been around since 10.7.

1289
00:54:36.516 --> 00:54:37.706
In fact some earlier than that

1290
00:54:37.706 --> 00:54:39.256
and some were introduced
in 10.8.

1291
00:54:39.666 --> 00:54:41.046
But these are all great features

1292
00:54:41.046 --> 00:54:42.996
that will make your
applications more powerful,

1293
00:54:42.996 --> 00:54:44.656
more consistent,
more user-friendly.

1294
00:54:45.066 --> 00:54:48.636
So please freeze frame
this on your VCRs at home

1295
00:54:48.636 --> 00:54:50.686
and choose the features
you want to implement.

1296
00:54:51.266 --> 00:54:52.616
We have a lot of
related sessions.

1297
00:54:53.026 --> 00:54:55.766
I'm not going to go through
them, just highlight one here.

1298
00:54:55.766 --> 00:54:58.306
I've already put these up
in other slides but one

1299
00:54:58.306 --> 00:55:00.516
that I haven't talked about
is if you have an iOS App,

1300
00:54:58.306 --> 00:55:00.516
that I haven't talked about
is if you have an iOS App,

1301
00:55:00.516 --> 00:55:01.946
you're thinking of
bring it to OS X.

1302
00:55:02.206 --> 00:55:04.716
We have session Thursday
morning, "Bringing your iOS Apps

1303
00:55:04.716 --> 00:55:06.936
to OS X" you might
want to go to that.

1304
00:55:07.436 --> 00:55:10.786
And with that, Jake Behrens
is our evangelist if you need

1305
00:55:10.786 --> 00:55:12.186
to talk to an evangelist.

1306
00:55:12.706 --> 00:55:14.476
And that's it, thank
you very much.

1307
00:55:14.976 --> 00:55:22.560
[Applause]
