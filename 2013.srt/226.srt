
1
00:00:00.506 --> 00:00:09.456
[ Silence ]

2
00:00:09.956 --> 00:00:10.856
>> Hey, Brandon.

3
00:00:10.956 --> 00:00:11.726
>> Hey Jim, how's it going?

4
00:00:12.006 --> 00:00:13.426
>> Oh, it's going really well.

5
00:00:13.426 --> 00:00:14.906
I just got the DemoApp done

6
00:00:14.906 --> 00:00:16.796
for this presentation
about 15 minutes ago.

7
00:00:16.876 --> 00:00:17.866
>> Oh, that's great timing.

8
00:00:17.866 --> 00:00:20.736
I have a 50K run this weekend
that I really wanted to use it

9
00:00:20.736 --> 00:00:21.596
for to get some pictures.

10
00:00:22.166 --> 00:00:23.746
What features have you
put together so far?

11
00:00:24.156 --> 00:00:26.006
>> Well, I got the basic
functionality working.

12
00:00:26.146 --> 00:00:28.616
When you have the phone taped to
your chest while you're running,

13
00:00:28.616 --> 00:00:30.146
it's going to take a
photo of what's in front

14
00:00:30.146 --> 00:00:31.416
of you every three
or four seconds.

15
00:00:31.506 --> 00:00:33.296
And then when you're
done with your run,

16
00:00:33.296 --> 00:00:35.626
you could show the photos
to your other runners

17
00:00:36.046 --> 00:00:38.146
and there's some basic
editing functionality

18
00:00:38.146 --> 00:00:40.476
like you can delete
photos that were blurry

19
00:00:40.696 --> 00:00:42.466
and you can set favorites
as a background.

20
00:00:42.886 --> 00:00:43.426
>> That's great.

21
00:00:43.426 --> 00:00:46.376
So, I know you probably haven't
done much on the user interface

22
00:00:46.376 --> 00:00:48.146
yet but that's really
a good thing

23
00:00:48.146 --> 00:00:50.406
because we just got some brand
new specs from our designers

24
00:00:50.596 --> 00:00:52.466
to make our app look
great on iOS 7.

25
00:00:52.466 --> 00:00:52.906
>> Oh, good.

26
00:00:53.066 --> 00:00:53.826
>> Let's take a look at them.

27
00:00:53.866 --> 00:00:54.136
>> Cool.

28
00:00:54.946 --> 00:00:57.806
>> So, here's what our designers
have put together for us.

29
00:00:57.926 --> 00:01:00.746
We can have the ability to
view photos in our application

30
00:00:57.926 --> 00:01:00.746
We can have the ability to
view photos in our application

31
00:01:00.746 --> 00:01:02.006
and delete ones that
we don't like.

32
00:01:02.246 --> 00:01:04.325
And I'd like us to do this
interesting custom delete

33
00:01:04.325 --> 00:01:06.406
animation where we kind
of shadow the photo out.

34
00:01:06.406 --> 00:01:06.886
>> Oh, neat, neat.

35
00:01:06.886 --> 00:01:08.076
Kind of like a [inaudible]
effect.

36
00:01:08.076 --> 00:01:09.096
>> Yeah, something like that.

37
00:01:09.266 --> 00:01:10.156
I think it'd be pretty cool.

38
00:01:10.346 --> 00:01:10.526
>> Cool.

39
00:01:10.526 --> 00:01:13.056
>> They've also defined
some custom appearance

40
00:01:13.056 --> 00:01:13.796
in our application.

41
00:01:13.956 --> 00:01:15.866
They like our buttons to look
a little bit more interesting

42
00:01:15.866 --> 00:01:17.936
with some special arts and
they've given us a tint color

43
00:01:17.936 --> 00:01:19.856
for our application
to have its own style.

44
00:01:20.036 --> 00:01:20.476
>> Excellent.

45
00:01:20.526 --> 00:01:22.756
Yeah, I think the Appearance
API could probably help us

46
00:01:22.756 --> 00:01:22.996
out with that.

47
00:01:22.996 --> 00:01:23.776
>> That's what I was thinking.

48
00:01:24.916 --> 00:01:26.866
They've also asked us
to do an interesting way

49
00:01:27.056 --> 00:01:28.956
of playing back photos
in our application.

50
00:01:29.066 --> 00:01:31.406
And they've put together
the spec that shows a kind

51
00:01:31.406 --> 00:01:33.606
of a bouncing effect
where photos kind of fly

52
00:01:33.606 --> 00:01:36.366
in from behind the user and,
you know, bounce off-screen.

53
00:01:36.926 --> 00:01:37.926
>> Oh, that's a neat effect.

54
00:01:37.926 --> 00:01:39.356
I have-- we'll see what
we can do with that.

55
00:01:39.356 --> 00:01:41.106
>> I was thinking dynamics
that help with that.

56
00:01:41.106 --> 00:01:42.126
>> Oh, yeah, actually,
that's a good idea.

57
00:01:42.936 --> 00:01:44.116
>> Then the last thing
that showed us is

58
00:01:44.116 --> 00:01:45.566
in our home screen
of our application.

59
00:01:45.566 --> 00:01:46.866
They'd like to do some blurring

60
00:01:46.866 --> 00:01:48.206
and they put together
this really,

61
00:01:48.206 --> 00:01:50.686
really interesting looking
LensFlare that they'd like us

62
00:01:50.686 --> 00:01:53.376
to drop on photos because
everyone loves LensFlares.

63
00:01:53.376 --> 00:01:55.766
>> That one is a-- that flare
is a little [inaudible], man.

64
00:01:55.766 --> 00:01:56.416
I'll see what I can do.

65
00:01:56.416 --> 00:01:57.796
>> We'll see what
we can put together.

66
00:01:57.796 --> 00:01:58.596
>> All right, cool.

67
00:01:58.626 --> 00:02:00.596
>> So, why don't you go set up
the demo and I'll get started.

68
00:01:58.626 --> 00:02:00.596
>> So, why don't you go set up
the demo and I'll get started.

69
00:02:00.596 --> 00:02:01.376
>> All right, cool.

70
00:02:02.536 --> 00:02:05.036
>> Cool. So, we're going to
talk about three things today.

71
00:02:05.326 --> 00:02:07.326
We're going to start
off our talk by talking

72
00:02:07.326 --> 00:02:10.566
about how we can do custom
view controller transitions.

73
00:02:11.166 --> 00:02:13.606
After that, we'll move on to how
you can customize the appearance

74
00:02:13.606 --> 00:02:16.466
of your application using
things like UIAppearance

75
00:02:16.616 --> 00:02:18.746
and some new features
we've added to iOS 7

76
00:02:18.846 --> 00:02:20.716
for making images look
interesting in your app.

77
00:02:21.566 --> 00:02:23.136
Finally, we're going
to wrap things

78
00:02:23.136 --> 00:02:24.906
up by spending some
time talking about how

79
00:02:24.906 --> 00:02:29.156
to add realistic motion to your
application using UIKit Dynamics

80
00:02:29.486 --> 00:02:31.276
and the new motion effect APIs.

81
00:02:31.986 --> 00:02:33.376
So, let's get started by talking

82
00:02:33.376 --> 00:02:35.286
about custom view
controller transitions.

83
00:02:36.296 --> 00:02:39.376
This is something we've added in
iOS 7 that makes it really easy

84
00:02:39.376 --> 00:02:41.896
for you to customize and
make unique transitions

85
00:02:41.896 --> 00:02:44.056
in your application,
and we're using these

86
00:02:44.056 --> 00:02:45.806
across the operating
system as well.

87
00:02:46.296 --> 00:02:48.466
So, if you take a look at
a navigation controller

88
00:02:48.736 --> 00:02:51.166
like this one in mail, this
is actually an interactive

89
00:02:51.166 --> 00:02:53.226
transition where when
you start to scroll back

90
00:02:53.226 --> 00:02:55.606
from the left-to-right
edge gesture, you notice,

91
00:02:55.606 --> 00:02:57.736
the user can actually
interact with it and kind

92
00:02:57.736 --> 00:02:58.796
of pull it back and forth.

93
00:02:58.796 --> 00:03:01.886
And notice how the text
slides differently in the top

94
00:02:58.796 --> 00:03:01.886
And notice how the text
slides differently in the top

95
00:03:02.136 --> 00:03:04.276
and those two view controllers
move at different speeds

96
00:03:04.506 --> 00:03:05.626
across the transition.

97
00:03:06.566 --> 00:03:09.216
We create this using the
new view controller APIs.

98
00:03:09.986 --> 00:03:12.146
These are great way to make
things look interesting

99
00:03:12.146 --> 00:03:12.836
in your apps.

100
00:03:13.416 --> 00:03:15.676
There's a number of things
that we allow you to customize

101
00:03:15.826 --> 00:03:17.246
with those view controller
transitions.

102
00:03:18.116 --> 00:03:19.586
You can customize
both the present

103
00:03:19.996 --> 00:03:23.296
and dismiss animations review
controllers as well as pushing

104
00:03:23.296 --> 00:03:25.556
and popping things off
of your navigation stack.

105
00:03:26.536 --> 00:03:28.836
Now, in addition to
letting you customize all

106
00:03:28.836 --> 00:03:30.396
of these different
types of transitions,

107
00:03:30.926 --> 00:03:33.226
we're also giving you
the ability to make any

108
00:03:33.226 --> 00:03:35.486
of them interactive
or non-interactive.

109
00:03:36.096 --> 00:03:38.156
That way, you can decide if
you want just a fluid thing

110
00:03:38.156 --> 00:03:40.466
that always happens without
the user touching anything

111
00:03:40.746 --> 00:03:42.286
or if you want to build
something a little bit more

112
00:03:42.286 --> 00:03:44.126
advanced like a navigation
controller

113
00:03:44.126 --> 00:03:46.416
where the user can
actually feel it and play

114
00:03:46.416 --> 00:03:47.696
with it as it transitions.

115
00:03:48.316 --> 00:03:52.236
So, what do you need
to do if you want

116
00:03:52.236 --> 00:03:55.296
to customize a view controller
transition in your application?

117
00:03:55.966 --> 00:03:58.316
In this example, we have
our first view controller,

118
00:03:58.316 --> 00:03:59.976
we'll call this our
two view controller.

119
00:04:00.696 --> 00:04:02.596
When we're ready to do
a transition into that,

120
00:04:02.596 --> 00:04:04.606
that modal view visibility view,

121
00:04:05.056 --> 00:04:07.326
we're going to create
a two view controller,

122
00:04:07.596 --> 00:04:08.926
our photo detail view.

123
00:04:09.406 --> 00:04:12.166
So now, we have our two view
controllers, the one on the left

124
00:04:12.166 --> 00:04:14.656
that we're going to present
from, the one on the right

125
00:04:14.656 --> 00:04:16.426
that we're about to
present to the user.

126
00:04:17.286 --> 00:04:18.916
Once we've created
the view controller,

127
00:04:19.356 --> 00:04:21.875
we need to specify the
transitioning delegate.

128
00:04:23.006 --> 00:04:25.226
So, in this case, we're going
to tell our two view controller

129
00:04:25.226 --> 00:04:28.926
that the transitioning delegate
itself are fromViewController.

130
00:04:29.326 --> 00:04:30.976
That means our
fromViewController is going

131
00:04:30.976 --> 00:04:32.506
to be responsible for responding

132
00:04:32.506 --> 00:04:34.566
to how these transitions
need to happen.

133
00:04:35.436 --> 00:04:38.876
Once we've set that up, we need
to go ahead and say we're ready

134
00:04:38.876 --> 00:04:40.046
to present our view controller,

135
00:04:40.536 --> 00:04:43.106
and we do that by saying
presentViewController

136
00:04:43.166 --> 00:04:44.526
animated completion.

137
00:04:44.966 --> 00:04:47.486
This is the same API
that you're used to using

138
00:04:47.646 --> 00:04:49.216
for presenting the
view controllers.

139
00:04:49.796 --> 00:04:52.146
But in this case,
we've specified

140
00:04:52.146 --> 00:04:54.506
that you have a transitioning
delegate and that means

141
00:04:54.506 --> 00:04:57.206
that the system is going to
have to ask you how do you want

142
00:04:57.206 --> 00:04:58.206
to do that transition.

143
00:04:58.866 --> 00:05:01.596
And we do that by asking
you for AnimationController

144
00:04:58.866 --> 00:05:01.596
And we do that by asking
you for AnimationController

145
00:05:01.596 --> 00:05:02.766
for presented controller,

146
00:05:03.146 --> 00:05:05.286
presenting controller,
source controller.

147
00:05:05.696 --> 00:05:07.206
That's a lot of controllers
going on there.

148
00:05:07.696 --> 00:05:09.846
So, let's talk about what
those actually mean for you.

149
00:05:10.456 --> 00:05:12.176
The first is the
presented controller.

150
00:05:12.546 --> 00:05:13.446
This is what we're going

151
00:05:13.446 --> 00:05:16.236
to actually be presenting
on screen.

152
00:05:16.236 --> 00:05:17.956
It's the [inaudible]
we're about to present.

153
00:05:18.146 --> 00:05:19.896
That's the two view
controller on the right.

154
00:05:20.996 --> 00:05:22.476
Next is the presenting
controller.

155
00:05:22.866 --> 00:05:25.526
This is what we're going to be
presenting from, in this case,

156
00:05:25.526 --> 00:05:26.596
our fromViewController.

157
00:05:27.006 --> 00:05:29.676
The final case is the
source controller.

158
00:05:30.356 --> 00:05:33.216
The source controller in
most cases is the same view

159
00:05:33.216 --> 00:05:36.076
controller that we're presenting
from but occasionally,

160
00:05:36.076 --> 00:05:37.946
we have to do a little
bit of work to present

161
00:05:37.946 --> 00:05:40.506
from a different place in the
view cart controller hierarchy.

162
00:05:40.976 --> 00:05:43.466
So, we'll do the walking
through and let you know

163
00:05:43.466 --> 00:05:45.436
if we're presenting from
a slightly different case

164
00:05:45.586 --> 00:05:47.486
and we'll let you know that
with the source controller.

165
00:05:47.866 --> 00:05:49.686
But most of the time,
you don't need

166
00:05:49.686 --> 00:05:52.206
to do anything too interesting
with that particular argument.

167
00:05:52.376 --> 00:05:53.566
It's there for your information.

168
00:05:54.926 --> 00:05:56.696
So, we've been called
with a system asking

169
00:05:56.696 --> 00:05:58.066
for this animation controller.

170
00:05:58.666 --> 00:06:02.406
We're going to create a new
object, and that's an object

171
00:05:58.666 --> 00:06:02.406
We're going to create a new
object, and that's an object

172
00:06:02.406 --> 00:06:02.906
that responds

173
00:06:02.906 --> 00:06:05.356
to UIViewController
animated transitioning.

174
00:06:05.646 --> 00:06:07.766
It's a protocol that you need
to implement on this object

175
00:06:08.236 --> 00:06:10.676
that specifies how to
perform the animation.

176
00:06:11.326 --> 00:06:12.916
There's two methods that
you need to implement,

177
00:06:13.426 --> 00:06:16.166
transition-duration
and animate transition.

178
00:06:17.026 --> 00:06:19.866
Transition-duration, as
the name would suggest is

179
00:06:19.866 --> 00:06:22.356
to tell the system how long your
transition is going to take.

180
00:06:22.706 --> 00:06:25.616
That way, we can time things out
and make everything work nicely.

181
00:06:26.396 --> 00:06:29.236
Animate transition is
where you actually do all

182
00:06:29.236 --> 00:06:30.106
of the animations.

183
00:06:30.106 --> 00:06:31.616
So, that's where
you're going to want

184
00:06:31.616 --> 00:06:33.906
to get the two view
controllers out of a context

185
00:06:33.906 --> 00:06:36.236
and then you're going to need
to actually do the animations

186
00:06:36.236 --> 00:06:37.376
that you want to have happen

187
00:06:37.716 --> 00:06:39.366
to place your view
controllers on screen.

188
00:06:40.176 --> 00:06:42.436
Once we've created that
object, we'll return it back

189
00:06:42.436 --> 00:06:44.706
to the system and let
it do the transition.

190
00:06:44.706 --> 00:06:48.796
To help you make this a little
bit easier in your applications,

191
00:06:49.096 --> 00:06:52.356
we've created UI percent
driven interactive transition.

192
00:06:52.936 --> 00:06:54.196
This is an object
that we're get--

193
00:06:54.196 --> 00:06:58.316
making available in UIKit to
help make it easier for you

194
00:06:58.316 --> 00:07:00.176
to create interactive
transitions.

195
00:06:58.316 --> 00:07:00.176
to create interactive
transitions.

196
00:07:00.986 --> 00:07:02.456
It lets you update
the transition

197
00:07:02.506 --> 00:07:05.276
as it's happening based
on touch or other inputs

198
00:07:05.376 --> 00:07:07.176
that might be relevant
to your application,

199
00:07:07.326 --> 00:07:08.646
whatever makes sense for you

200
00:07:08.876 --> 00:07:10.856
and creates a great
experience for your users.

201
00:07:11.596 --> 00:07:14.596
And a couple of things that you
can vary while the transition is

202
00:07:14.596 --> 00:07:17.816
happening is the completion
speed and the completion curve.

203
00:07:18.246 --> 00:07:21.026
You can tweak the values of
those while the transition is

204
00:07:21.026 --> 00:07:23.886
in flight to make an even
more unique experience

205
00:07:23.886 --> 00:07:26.886
and a more unique
transition inside your app.

206
00:07:27.896 --> 00:07:30.746
So, Jim, if you remember
what our designer specs,

207
00:07:30.816 --> 00:07:33.296
they put together this
really great delete animation

208
00:07:33.346 --> 00:07:36.066
where we kind of destroy
the photo that's on screen.

209
00:07:36.476 --> 00:07:37.916
Have you had a chance to
put that together yet?

210
00:07:38.496 --> 00:07:39.656
>> Well, I've got it started.

211
00:07:39.806 --> 00:07:41.696
The animation isn't
quite complete yet

212
00:07:41.696 --> 00:07:43.346
but I got the transitioning
stuff working.

213
00:07:43.426 --> 00:07:44.386
You want me to show it to them?

214
00:07:44.386 --> 00:07:45.536
>> I'd love to see
what you have so far.

215
00:07:45.536 --> 00:07:48.366
>> All right, now here's our
exciting application that's

216
00:07:48.506 --> 00:07:49.616
on the store today.

217
00:07:49.676 --> 00:07:50.526
All right.

218
00:07:50.526 --> 00:07:52.916
So, we have bascially,
we have some runs

219
00:07:53.226 --> 00:07:54.156
that we've already ran through.

220
00:07:54.156 --> 00:07:58.036
And I'm going to select
the WWDC run and want to go

221
00:07:58.036 --> 00:08:01.346
and show all the photos that
we've taken from this run.

222
00:07:58.036 --> 00:08:01.346
and show all the photos that
we've taken from this run.

223
00:08:01.476 --> 00:08:04.316
This is obviously around
the campus and you can go

224
00:08:04.316 --> 00:08:05.666
and select one of
your photos here.

225
00:08:06.316 --> 00:08:07.646
That's a nice photo.

226
00:08:07.646 --> 00:08:10.276
We have a basic presentation
right there.

227
00:08:10.816 --> 00:08:12.326
And if you go ahead and
hit delete, you're going

228
00:08:13.056 --> 00:08:16.236
to get a nice little-- it's
a nice little burning effect.

229
00:08:16.236 --> 00:08:18.826
It's not quite what
we got there yet but--

230
00:08:19.506 --> 00:08:21.906
the scanline goes up,
removes the images.

231
00:08:21.906 --> 00:08:22.876
It's basic animation.

232
00:08:22.876 --> 00:08:25.126
There's no real dynamics
that's into it yet.

233
00:08:25.126 --> 00:08:26.126
It's doesn't move around a lot.

234
00:08:26.616 --> 00:08:29.026
But, it's a basic-- the
transition is actually working.

235
00:08:29.026 --> 00:08:31.106
So, let me go show you how that
actually is working so far.

236
00:08:31.436 --> 00:08:34.366
So, the photos that you saw
there are in a collection view.

237
00:08:34.366 --> 00:08:36.706
And so, in our collection
view, we simply--

238
00:08:37.166 --> 00:08:38.686
and collection view's
delegate method

239
00:08:38.686 --> 00:08:41.426
of didSelectItemAtIndexPath,
we're simply going

240
00:08:41.426 --> 00:08:44.265
to create a new instance of
the edit photo view controller.

241
00:08:44.336 --> 00:08:48.566
And at the next part, we're
going to go and create a couple

242
00:08:48.566 --> 00:08:50.286
of properties that when you
set on that view controller

243
00:08:50.366 --> 00:08:53.186
to basically do what
our app does.

244
00:08:53.216 --> 00:08:55.426
We need to know which run we're
talking about and which photo

245
00:08:55.426 --> 00:08:56.356
that we're interacting with.

246
00:08:57.236 --> 00:08:59.376
We also have a custom
delegation callback that's going

247
00:08:59.376 --> 00:09:01.826
to get called when that
user hits the delete button

248
00:08:59.376 --> 00:09:01.826
to get called when that
user hits the delete button

249
00:09:02.426 --> 00:09:05.346
and that is to let us know
that the user deleted the photo

250
00:09:05.656 --> 00:09:07.396
and it also dismisses
the view controller.

251
00:09:08.516 --> 00:09:10.796
Now, the important part
of this when dealing

252
00:09:10.796 --> 00:09:13.456
with custom transitions
are these two lines.

253
00:09:13.926 --> 00:09:16.666
The transitioning delegate
is what's going to be asked

254
00:09:16.666 --> 00:09:19.256
for if you have an animator
that you would like to use.

255
00:09:19.696 --> 00:09:20.616
In this case, we do.

256
00:09:21.136 --> 00:09:24.056
And the modal presentation
style has set the custom.

257
00:09:24.436 --> 00:09:26.116
And it's not required
that you set up the custom

258
00:09:26.116 --> 00:09:29.076
but in our case, we would like
to do that and when you set it

259
00:09:29.076 --> 00:09:31.946
to custom, you get the
opportunity to place both the

260
00:09:31.946 --> 00:09:34.326
from and the two view
controller on screen.

261
00:09:34.866 --> 00:09:37.436
You are responsible for
both animating them in

262
00:09:37.436 --> 00:09:38.426
and animating them out.

263
00:09:38.556 --> 00:09:40.556
And then, obviously
represent the view controller.

264
00:09:41.716 --> 00:09:44.276
Now, since we're just
concerned with the dismissal

265
00:09:44.276 --> 00:09:48.546
of our editing view controller,
if the user deleted the photo,

266
00:09:49.256 --> 00:09:50.886
we go ahead and we
create an instance

267
00:09:50.886 --> 00:09:52.196
of our delete photo animator.

268
00:09:52.616 --> 00:09:54.106
And if it's not being deleted,

269
00:09:54.106 --> 00:09:55.926
we just use the normal
presentation animator.

270
00:09:56.336 --> 00:09:58.206
So, let's go take a look at
what the delete photo animator

271
00:09:58.206 --> 00:09:58.886
actually does.

272
00:09:59.096 --> 00:10:01.586
Animation-- Transition-duration
is just two seconds.

273
00:09:59.096 --> 00:10:01.586
Animation-- Transition-duration
is just two seconds.

274
00:10:01.586 --> 00:10:03.666
Like Brandon, this just lets
the system know how long your

275
00:10:03.666 --> 00:10:04.566
animation is going to take.

276
00:10:05.076 --> 00:10:08.226
And then the second part
here is animateTransition.

277
00:10:08.626 --> 00:10:11.896
Now, in this method, we're going

278
00:10:11.896 --> 00:10:13.636
to pass you a transition
context.

279
00:10:14.026 --> 00:10:16.136
And in this context is
everything that you're going

280
00:10:16.136 --> 00:10:18.606
to need to know to
do your transition.

281
00:10:19.126 --> 00:10:21.446
Not only do you get the from
in the two view controller,

282
00:10:21.936 --> 00:10:24.756
you get, is this
transition animated.

283
00:10:24.756 --> 00:10:29.366
You also get the ability to
know the from and to positions

284
00:10:29.366 --> 00:10:31.126
of where we think
those view should land.

285
00:10:31.966 --> 00:10:34.736
You also get a critically
important method you'll need

286
00:10:34.736 --> 00:10:37.446
to call back called
completed transition.

287
00:10:37.626 --> 00:10:41.036
If you don't call this
method, we don't know

288
00:10:41.036 --> 00:10:42.556
that the animation
is actually finished.

289
00:10:42.676 --> 00:10:44.626
So, your transition
will actually just hang

290
00:10:44.936 --> 00:10:45.886
and I'll show you where we do

291
00:10:45.886 --> 00:10:47.446
that here just a
little bit lower.

292
00:10:47.586 --> 00:10:49.816
Now, there is a bunch
of animation code here

293
00:10:50.036 --> 00:10:55.016
that really doesn't matter for
the aspect of transitioning, so.

294
00:10:55.206 --> 00:10:57.246
But there are three points that
I'd like to point out here.

295
00:10:58.646 --> 00:11:03.666
The first is that we don't
really care where the two view--

296
00:10:58.646 --> 00:11:03.666
The first is that we don't
really care where the two view--

297
00:11:03.666 --> 00:11:04.806
we don't want to animate it in.

298
00:11:04.806 --> 00:11:06.906
We just want to place it
in its final position.

299
00:11:06.906 --> 00:11:09.236
So, that is our collection
view coming back

300
00:11:09.236 --> 00:11:11.126
as the front-most
view controller.

301
00:11:11.836 --> 00:11:14.236
So, we just asked the
transition in context

302
00:11:14.236 --> 00:11:15.946
for where we should place
that and we stick it

303
00:11:15.946 --> 00:11:17.416
in the container view.

304
00:11:18.396 --> 00:11:21.206
The second part is that
I'm using snapshotting,

305
00:11:21.256 --> 00:11:26.616
the snapshotting API to
create those little tiny boxes

306
00:11:26.616 --> 00:11:27.286
on screen.

307
00:11:27.746 --> 00:11:29.306
That's an image view
that holds an image

308
00:11:29.306 --> 00:11:33.026
and while we could have gone
through and re-rendered each one

309
00:11:33.026 --> 00:11:35.066
of those boxes as its own image,

310
00:11:35.066 --> 00:11:36.136
it's like an image
view in there.

311
00:11:36.556 --> 00:11:39.856
The snapshotting API is
actually faster in that regard.

312
00:11:39.856 --> 00:11:41.396
It's really performance
and it allows us

313
00:11:41.396 --> 00:11:43.176
to [inaudible] those
little boxes into--

314
00:11:43.176 --> 00:11:45.916
sort of create those little
boxes really, really quickly.

315
00:11:46.906 --> 00:11:48.156
And unfortunately,
it's commented

316
00:11:48.156 --> 00:11:49.946
out in the sample code
due to a name change

317
00:11:49.946 --> 00:11:51.406
between Seed 1 and Seed 2.

318
00:11:51.406 --> 00:11:52.976
So, I didn't want
to show errors.

319
00:11:53.316 --> 00:11:54.716
But Brandon will talk
to a little bit more

320
00:11:54.716 --> 00:11:56.276
about that after I'm done here.

321
00:11:58.536 --> 00:12:01.146
Finally, going through a
whole bunch of animation code,

322
00:11:58.536 --> 00:12:01.146
Finally, going through a
whole bunch of animation code,

323
00:12:01.586 --> 00:12:02.766
it's this line right here.

324
00:12:03.366 --> 00:12:05.726
When we are done
with our animation,

325
00:12:05.726 --> 00:12:07.606
when the scanline is
completed to the top

326
00:12:07.896 --> 00:12:10.096
and we're sufficiently happy
enough blocks have been

327
00:12:10.096 --> 00:12:12.446
destroyed, we call
transitionContext

328
00:12:12.446 --> 00:12:15.756
CompletedTransition and
in this, this system knows

329
00:12:15.786 --> 00:12:18.276
that your delegate
transition, it can tear down all

330
00:12:18.276 --> 00:12:20.656
of its context that it's
built up for you and then,

331
00:12:20.656 --> 00:12:23.066
it will return back to
the two view controller.

332
00:12:24.546 --> 00:12:25.386
>> That's looking great, Jim.

333
00:12:25.516 --> 00:12:25.856
>> Thanks.

334
00:12:25.856 --> 00:12:27.676
>> It's a really good start
on that custom transition.

335
00:12:28.006 --> 00:12:29.076
I think I'd like
to talk a bit more

336
00:12:29.076 --> 00:12:30.366
about snapshotting
now if you don't mind.

337
00:12:30.496 --> 00:12:31.046
>> That's a good idea.

338
00:12:31.556 --> 00:12:33.986
>> So, we've introduced
a fantastic new API

339
00:12:34.356 --> 00:12:36.866
in iOS 7 that's called
UISnapshotting.

340
00:12:37.346 --> 00:12:40.426
This is a major improvement
over rendering context

341
00:12:40.426 --> 00:12:41.996
that you're used
to using for trying

342
00:12:41.996 --> 00:12:43.076
to get snapshots of a view.

343
00:12:43.896 --> 00:12:46.796
What we give you back with the
new snapshotting API is the

344
00:12:46.796 --> 00:12:48.616
extremely fast representation

345
00:12:48.766 --> 00:12:50.716
of the currently rendered
contents of your view.

346
00:12:50.836 --> 00:12:52.946
We go really deep in and
pull that out for you.

347
00:12:53.276 --> 00:12:55.556
And like I said,
it's extremely fast.

348
00:12:56.066 --> 00:12:57.716
It's useful in a
couple of great places.

349
00:12:58.176 --> 00:13:00.486
As you just saw, we can do
some really interesting things

350
00:12:58.176 --> 00:13:00.486
As you just saw, we can do
some really interesting things

351
00:13:00.726 --> 00:13:03.146
with custom transitions and
the new snapshotting API.

352
00:13:03.866 --> 00:13:05.736
It's also a great
tool for making some

353
00:13:05.736 --> 00:13:08.396
of the new special effects
that you see across iOS 7.

354
00:13:09.426 --> 00:13:12.006
So, how much faster is this
than rendering context?

355
00:13:12.536 --> 00:13:16.256
To kind of demonstrate this to
you, we took a version of iPhoto

356
00:13:16.256 --> 00:13:19.616
for iOS and we've asked it
to render in context as well

357
00:13:19.616 --> 00:13:21.166
as using the new snapshot APIs.

358
00:13:21.756 --> 00:13:24.286
As you can see, this is a pretty
complicated view to render.

359
00:13:24.926 --> 00:13:27.176
If we render this with
rendering context,

360
00:13:27.546 --> 00:13:29.526
it took about 840 milliseconds.

361
00:13:29.726 --> 00:13:32.166
It's a really long time to
generate just a snapshot.

362
00:13:33.086 --> 00:13:37.376
To compare that, when we use the
new snapshot methods in iOS 7,

363
00:13:38.136 --> 00:13:39.876
we did the same in
56 milliseconds.

364
00:13:40.106 --> 00:13:42.446
It's an incredible improvement
for you and you should be able

365
00:13:42.446 --> 00:13:44.196
to make some incredibly
awesome effects

366
00:13:44.196 --> 00:13:46.756
with it once you can take
advantage of it in iOS 7.

367
00:13:47.106 --> 00:13:49.106
So, what does the API
for this look like?

368
00:13:49.846 --> 00:13:51.966
There's two key methods that
you should take a look at,

369
00:13:52.416 --> 00:13:55.066
snapshot view and
resizable snapshot view

370
00:13:55.066 --> 00:13:57.046
from rect with cap insets.

371
00:13:57.496 --> 00:14:00.336
Now, as Jim mentioned, it's
important to note in Seed 1,

372
00:13:57.496 --> 00:14:00.336
Now, as Jim mentioned, it's
important to note in Seed 1,

373
00:14:00.776 --> 00:14:03.406
these methods are snapshot
and resizable snapshot,

374
00:14:03.846 --> 00:14:07.596
they'll be this API you see
above for Seed 2 moving forward.

375
00:14:08.626 --> 00:14:11.176
There's a third bit of API
for UISnapshotting though

376
00:14:11.476 --> 00:14:13.546
that we've created for
a very special case,

377
00:14:14.076 --> 00:14:16.676
and that API is
drawViewHierarchyInRect.

378
00:14:17.206 --> 00:14:18.806
This will also be
available starting

379
00:14:18.806 --> 00:14:20.306
in Seed 2 going forwards.

380
00:14:20.876 --> 00:14:23.766
DrawViewHierarchyInRect is
still considerably faster

381
00:14:23.766 --> 00:14:26.096
than rendering context
but it's not quite

382
00:14:26.096 --> 00:14:27.666
as fast as snapshot view.

383
00:14:28.176 --> 00:14:31.266
To give you an illustration
of that, we can compare

384
00:14:31.266 --> 00:14:33.346
that on our usual
graph and rendering

385
00:14:33.346 --> 00:14:36.446
that complicated view hierarchy
took about 150 milliseconds.

386
00:14:36.856 --> 00:14:39.376
It's still considerably
faster than rendering context

387
00:14:39.716 --> 00:14:42.406
but almost three times
slower than snapshot view.

388
00:14:43.336 --> 00:14:46.466
So, why should you use this
drawViewHierarchyInRect?

389
00:14:47.426 --> 00:14:50.896
Well, you've probably noticed
iOS 7 takes a lot of advantage

390
00:14:50.896 --> 00:14:53.456
of these blurred effects
that you see behind toolbars

391
00:14:53.456 --> 00:14:55.106
and navigation bars and so on.

392
00:14:55.886 --> 00:14:59.676
This is your new API in iOS 7
to make static blurred effects

393
00:14:59.726 --> 00:15:02.216
that look the same as what
we do across the system.

394
00:14:59.726 --> 00:15:02.216
that look the same as what
we do across the system.

395
00:15:02.646 --> 00:15:03.516
So, how do you do that?

396
00:15:04.796 --> 00:15:05.566
The first thing you'll need

397
00:15:05.566 --> 00:15:09.476
to do is call UIGraphicsBegin
ImageContextWithOptions.

398
00:15:09.946 --> 00:15:12.766
This will make a new empty
image context with the size

399
00:15:12.766 --> 00:15:15.066
that you asked for to
start rendering into.

400
00:15:15.926 --> 00:15:17.096
Then you'll take your view

401
00:15:17.096 --> 00:15:19.476
and you call
drawViewHierarchyInRect.

402
00:15:19.616 --> 00:15:21.826
That will render
your views contents

403
00:15:22.186 --> 00:15:24.116
into that context
very, very quickly.

404
00:15:25.256 --> 00:15:27.176
Once you've done that, we
can get a new image out of

405
00:15:27.176 --> 00:15:29.166
that context for
future processing.

406
00:15:29.476 --> 00:15:32.366
That's as easy as
calling UIGraphicsGetImage

407
00:15:32.366 --> 00:15:33.666
FromCurrentImageContext.

408
00:15:34.526 --> 00:15:37.226
Once we have that image out,
we're done with the context

409
00:15:37.476 --> 00:15:40.276
so we can go ahead, go ahead and
end that, clean everything up.

410
00:15:40.276 --> 00:15:43.236
And then the last
part is applying

411
00:15:43.236 --> 00:15:44.706
that blur effect to our image.

412
00:15:45.366 --> 00:15:48.936
You notice I'm calling apply
light effect in the code above.

413
00:15:49.416 --> 00:15:52.776
This is a category on UIImage
that we're making available

414
00:15:52.836 --> 00:15:55.796
through a sample project
called image effects as well

415
00:15:55.796 --> 00:15:57.446
as in the sample code
from this session.

416
00:15:57.846 --> 00:15:59.606
Please feel free to
bring that category

417
00:15:59.606 --> 00:16:03.196
into your own applications and
use it to apply light, dark,

418
00:15:59.606 --> 00:16:03.196
into your own applications and
use it to apply light, dark,

419
00:16:03.196 --> 00:16:05.326
and very light effects
across your application.

420
00:16:05.506 --> 00:16:07.846
And that's how you can
make blurs in your apps.

421
00:16:08.056 --> 00:16:10.636
Next, let's talk about how
to customize the appearance

422
00:16:10.786 --> 00:16:13.506
of your applications using
a number of different tools

423
00:16:13.506 --> 00:16:15.616
and techniques that we
have available on iOS.

424
00:16:16.506 --> 00:16:19.226
So let's say, I have this
incredibly exciting application

425
00:16:19.366 --> 00:16:20.466
with three sliders in it.

426
00:16:20.926 --> 00:16:22.946
Now, I really don't want you
to rush out and like copy

427
00:16:22.946 --> 00:16:23.646
that on the App Store.

428
00:16:23.646 --> 00:16:24.786
This is all mine by the way.

429
00:16:25.686 --> 00:16:28.186
So, our sliders default
to a blue tint color.

430
00:16:28.576 --> 00:16:31.236
But my designer said, "We
actually want a red tint color."

431
00:16:31.916 --> 00:16:34.046
An easy way to do this that
we'd have it for a couple

432
00:16:34.046 --> 00:16:36.486
of years now is using
the appearance proxies.

433
00:16:37.096 --> 00:16:39.846
These are as easy as
calling appearance on some

434
00:16:39.846 --> 00:16:42.716
of the UIKit controls and then
setting various properties

435
00:16:42.716 --> 00:16:45.196
on them such as tint
color, and that means

436
00:16:45.196 --> 00:16:46.976
that whenever I make a
new slider in my app,

437
00:16:47.096 --> 00:16:49.496
it will automatically
inherit these appearance set

438
00:16:49.496 --> 00:16:50.246
of attributes.

439
00:16:50.996 --> 00:16:52.686
But what if my application
has a lot

440
00:16:52.686 --> 00:16:53.916
of different types of controls?

441
00:16:54.176 --> 00:16:56.406
I don't really want to have
to call appearance on all

442
00:16:56.406 --> 00:16:58.876
of these different controls
across my entire application.

443
00:16:59.666 --> 00:17:03.076
There's a new change in iOS
7 to the tintColor system

444
00:16:59.666 --> 00:17:03.076
There's a new change in iOS
7 to the tintColor system

445
00:17:03.376 --> 00:17:05.715
that makes this easy to
set a unified tint color

446
00:17:05.715 --> 00:17:06.236
across your app.

447
00:17:07.316 --> 00:17:10.165
When you call setTintColor
on say a window,

448
00:17:10.546 --> 00:17:12.736
all of its subviews will
inherit that tint color

449
00:17:12.886 --> 00:17:14.415
until something else lower

450
00:17:14.415 --> 00:17:16.556
in the view hierarchy
overrides that.

451
00:17:17.096 --> 00:17:18.616
So, if you like-- if
you would like your app

452
00:17:18.656 --> 00:17:21.806
to have a standard tint color
of red across your entire app,

453
00:17:22.336 --> 00:17:24.976
simply call setTintColor
on your window

454
00:17:24.976 --> 00:17:27.906
and everything will inherit
that appearance, that attribute.

455
00:17:28.906 --> 00:17:30.646
So, again, what do
these APIs look like?

456
00:17:31.256 --> 00:17:33.986
The UIAppearance proxies
have been around since iOS 5

457
00:17:33.986 --> 00:17:37.086
and you can call appearance
and appearanceWhenContainedIn.

458
00:17:37.576 --> 00:17:39.646
AppearanceWhenContainedIn
allows you

459
00:17:39.646 --> 00:17:41.346
to change your appearance based

460
00:17:41.346 --> 00:17:45.836
on what your controls are
contained in, what kind of view.

461
00:17:45.966 --> 00:17:49.156
We're changing tint color
and bar tint color in iOS 7

462
00:17:49.506 --> 00:17:50.646
as I was just explaining

463
00:17:50.776 --> 00:17:52.826
where tintColor will
impact things based

464
00:17:52.826 --> 00:17:53.746
on your view hierarchy.

465
00:17:54.426 --> 00:17:56.916
Bar tint colors appear--
it's not appearance,

466
00:17:56.916 --> 00:17:59.266
its behavior has changed
a little bit on iOS 7

467
00:17:59.776 --> 00:18:02.216
so that it's what you use
to specify the tint color

468
00:17:59.776 --> 00:18:02.216
so that it's what you use
to specify the tint color

469
00:18:02.216 --> 00:18:05.756
of an entire bar on iOS 7 rather
than tinting the contents of it.

470
00:18:05.756 --> 00:18:08.926
So that's how you can use
tintColor and appearance

471
00:18:08.926 --> 00:18:11.606
to make your apps have their
own unique look on iOS 7.

472
00:18:12.456 --> 00:18:15.816
We've also made some
changes to UIImage on iOS 7.

473
00:18:16.196 --> 00:18:19.266
We've added this new method
called imageWithRenderingMode.

474
00:18:19.406 --> 00:18:21.246
And there's a few
rendering modes

475
00:18:21.246 --> 00:18:23.076
that you can apply
to images on iOS 7.

476
00:18:23.636 --> 00:18:25.686
You can put them in
rendering mode automatic.

477
00:18:26.126 --> 00:18:28.796
This is what we'll give you by
default where we'll do our best

478
00:18:28.796 --> 00:18:30.896
to decide how to
render the images based

479
00:18:30.896 --> 00:18:32.046
on how you're using
them in your app.

480
00:18:33.136 --> 00:18:35.546
We're also allowing you to
customize these behaviors

481
00:18:35.846 --> 00:18:37.426
with rendering mode
always original

482
00:18:37.846 --> 00:18:39.756
and rendering mode
always template.

483
00:18:40.286 --> 00:18:42.506
Now, these names probably don't
have a lot of meaning to you,

484
00:18:42.816 --> 00:18:45.346
so I think I'd like to show
you what that actually means.

485
00:18:45.946 --> 00:18:47.606
This is my original
image of Carl.

486
00:18:47.926 --> 00:18:48.766
Carl is my friend.

487
00:18:49.566 --> 00:18:51.636
If we want to render
Carl into my application,

488
00:18:52.226 --> 00:18:54.446
if I put it on rendering
mode always original,

489
00:18:54.616 --> 00:18:56.486
it means that we'll
render it exactly

490
00:18:56.486 --> 00:18:59.376
as the original image was given
to us in all of his pink glory.

491
00:18:59.746 --> 00:19:02.766
But if I switched it over to
rendering mode always template,

492
00:18:59.746 --> 00:19:02.766
But if I switched it over to
rendering mode always template,

493
00:19:03.226 --> 00:19:05.946
we're only going to look at the
alpha channel of that image.

494
00:19:06.066 --> 00:19:08.176
We'll ignore the red,
green, and blue channels.

495
00:19:09.096 --> 00:19:12.296
We'll also take the tint color
of your application and apply it

496
00:19:12.296 --> 00:19:13.356
to that template image.

497
00:19:13.616 --> 00:19:16.886
So, if my application's tint
color is red, Carl becomes red.

498
00:19:17.326 --> 00:19:20.686
Similarly, if my tint color
is blue, Carl becomes blue.

499
00:19:22.716 --> 00:19:24.626
[laughter] The next thing
we'd like to talk about is how

500
00:19:24.626 --> 00:19:27.396
to use resizable
images with cap insets.

501
00:19:27.866 --> 00:19:30.046
In this example from
Siri on iOS 7,

502
00:19:30.356 --> 00:19:32.446
I'd like to call your
attention to the movie ratings.

503
00:19:32.906 --> 00:19:34.856
You notice, we say what
the rating of the movie is,

504
00:19:35.166 --> 00:19:36.696
and we draw this nice white box

505
00:19:36.696 --> 00:19:39.706
around the outside that's
very nicely fit to the text.

506
00:19:40.386 --> 00:19:44.256
We create that with UIImage
resizableImageWithCapInsets.

507
00:19:45.616 --> 00:19:47.786
In this example, I have
this very small image

508
00:19:47.786 --> 00:19:51.436
for my designers where we have
these corners that we want

509
00:19:51.436 --> 00:19:53.606
to keep the same shape
but we want to be able

510
00:19:53.606 --> 00:19:57.526
to scale the image to be very
large or more medium size

511
00:19:57.766 --> 00:19:59.106
without distorting the colors.

512
00:19:59.856 --> 00:20:03.506
You do this by specifying your
cap insets for the left, bottom,

513
00:19:59.856 --> 00:20:03.506
You do this by specifying your
cap insets for the left, bottom,

514
00:20:03.676 --> 00:20:07.436
right, and top to be how far
into the image that you want it

515
00:20:07.436 --> 00:20:08.506
to always stay the same.

516
00:20:08.906 --> 00:20:12.276
And this is made even easier
using the new asset catalogs

517
00:20:12.376 --> 00:20:14.016
in iOS or in Xcode 5.

518
00:20:15.046 --> 00:20:16.286
So, where's is this
a win for you?

519
00:20:16.586 --> 00:20:18.566
This is a big benefit
in your app

520
00:20:18.566 --> 00:20:21.516
because you can use a single
asset to style buttons

521
00:20:21.516 --> 00:20:24.596
of all types of different
sizes across your entire app.

522
00:20:24.846 --> 00:20:27.306
It also is a big win
for localization.

523
00:20:27.666 --> 00:20:30.926
So, as you have text in your
application and you have buttons

524
00:20:30.926 --> 00:20:32.196
with different lengths
of strings,

525
00:20:32.776 --> 00:20:35.156
the buttons will
automatically and cleanly resize

526
00:20:35.416 --> 00:20:37.916
to fit whatever string
your localization team puts

527
00:20:37.916 --> 00:20:39.686
into the app.

528
00:20:39.946 --> 00:20:42.956
So, going back to the specs from
our designers, they've asked us

529
00:20:42.956 --> 00:20:44.216
to use these custom buttons

530
00:20:44.216 --> 00:20:46.816
across our application
using a resizable image

531
00:20:47.146 --> 00:20:50.196
and they've also asked us to use
a tint color of puce in our app.

532
00:20:50.656 --> 00:20:52.596
Jim, do you remember what
the value is for puce?

533
00:20:52.596 --> 00:20:55.796
>> Uh, 204136153.

534
00:20:56.186 --> 00:20:56.736
>> Make it so.

535
00:20:56.736 --> 00:20:57.776
>> All right, cool.

536
00:20:59.666 --> 00:21:02.576
So, let's show you
what it looks like now.

537
00:20:59.666 --> 00:21:02.576
So, let's show you
what it looks like now.

538
00:21:03.276 --> 00:21:06.956
As you can see, we-- on
the first demo I had,

539
00:21:06.956 --> 00:21:07.756
the buttons are already
in there.

540
00:21:07.756 --> 00:21:08.816
So, they're still
already in there.

541
00:21:08.816 --> 00:21:13.356
But now, they all have the tint
color that everyone so loves.

542
00:21:13.356 --> 00:21:15.946
And then you know also the
navigation bar also has

543
00:21:15.986 --> 00:21:16.506
tint color.

544
00:21:16.806 --> 00:21:18.776
As we drill through the app,
everything that [inaudible]

545
00:21:18.866 --> 00:21:20.226
to the tint color
already has it.

546
00:21:20.226 --> 00:21:21.766
So, we changed one line of code

547
00:21:21.766 --> 00:21:24.596
and our entire application
gets themed with its color.

548
00:21:26.716 --> 00:21:29.096
And now, our designers actually
in our application wanted

549
00:21:29.096 --> 00:21:32.496
to have backgrounds to
be blurred in some cases

550
00:21:32.546 --> 00:21:35.466
and then not blurred in
other cases to give some--

551
00:21:35.466 --> 00:21:37.786
just have a little bit
more polish to our app.

552
00:21:38.086 --> 00:21:40.226
And you do that by
when you select one

553
00:21:40.306 --> 00:21:42.506
of your favorite photos
in your application,

554
00:21:42.506 --> 00:21:44.096
so let's go and choose that one.

555
00:21:44.856 --> 00:21:46.796
And we go ahead and we'll
set that as our background.

556
00:21:46.796 --> 00:21:48.116
And if you notice right now

557
00:21:48.146 --> 00:21:50.816
that the segment it controls
also picked up the tint color.

558
00:21:51.186 --> 00:21:53.336
And as I set the
background color,

559
00:21:53.436 --> 00:21:55.416
if I set the background image,

560
00:21:55.716 --> 00:21:58.226
the checkbox is also
a template image.

561
00:21:58.226 --> 00:22:00.536
So it will also pick
up the tint color.

562
00:21:58.226 --> 00:22:00.536
So it will also pick
up the tint color.

563
00:22:01.136 --> 00:22:03.716
As we go back, now we see

564
00:22:03.716 --> 00:22:06.036
that our background
has a nice tint effect

565
00:22:06.036 --> 00:22:06.986
or a blurring effect to it.

566
00:22:06.986 --> 00:22:07.396
Excuse me.

567
00:22:07.936 --> 00:22:09.796
And as we back up all the
way to the main screen,

568
00:22:10.136 --> 00:22:13.886
you'll see that the buttons
are actually getting blurred

569
00:22:13.886 --> 00:22:14.316
as well.

570
00:22:15.236 --> 00:22:18.136
So, let me show you how we
go about doing those effects.

571
00:22:18.376 --> 00:22:20.386
As Brandon mentioned, we wanted

572
00:22:20.386 --> 00:22:22.456
to set a default button
background for all

573
00:22:22.456 --> 00:22:22.936
of our buttons

574
00:22:22.936 --> 00:22:26.156
in our application unless
we had set a specific--

575
00:22:26.156 --> 00:22:28.076
some specific blurred
background.

576
00:22:28.476 --> 00:22:29.856
And so, we won't go
into this very much.

577
00:22:29.886 --> 00:22:31.616
But this is the code
that actually does that.

578
00:22:31.946 --> 00:22:35.836
We get our default button and
then we make resizable image

579
00:22:35.836 --> 00:22:39.426
with cap insets and we set a
5 point cap inset on the top,

580
00:22:39.426 --> 00:22:40.406
left, bottom, and right.

581
00:22:41.206 --> 00:22:42.816
And to give you some reference,

582
00:22:42.816 --> 00:22:46.446
this is actually the images
I'm using and it is very tiny.

583
00:22:46.446 --> 00:22:48.026
It's an 11 by 11 pixel image.

584
00:22:48.786 --> 00:22:50.126
And so, when we stretched that,

585
00:22:50.126 --> 00:22:52.206
only the center pixels
actually get stretched.

586
00:22:52.706 --> 00:22:56.966
And we set that using the
button, UIButton's appearance.

587
00:22:56.966 --> 00:22:59.516
We set the background image
for the normal control state.

588
00:22:59.766 --> 00:23:00.936
And now, all of our buttons

589
00:22:59.766 --> 00:23:00.936
And now, all of our buttons

590
00:23:00.936 --> 00:23:02.806
in our application
have the same look.

591
00:23:03.876 --> 00:23:06.216
Now to do tint color with
our lovely puce color,

592
00:23:06.216 --> 00:23:09.136
we just set the tint
color on the window

593
00:23:09.696 --> 00:23:12.156
and we could have done this
on each individual view.

594
00:23:12.156 --> 00:23:14.626
But then, if we needed to make
a change which designers tend

595
00:23:14.626 --> 00:23:17.106
to do every once
in a while, we--

596
00:23:17.436 --> 00:23:19.036
we'd have to go make
the change globally.

597
00:23:19.116 --> 00:23:20.846
In this way, we just
make one change

598
00:23:21.056 --> 00:23:23.016
and then we can tell them
it took several hours

599
00:23:23.016 --> 00:23:23.966
and it took seconds.

600
00:23:24.236 --> 00:23:27.086
Now, I'm moving on to getting
the blur for the buttons.

601
00:23:28.616 --> 00:23:31.576
Our launch view controller
is the first view controller

602
00:23:31.576 --> 00:23:33.676
that comes up when the
application is launched.

603
00:23:34.246 --> 00:23:35.916
And our designers
wanted the background

604
00:23:35.916 --> 00:23:38.306
to be the normal color but
they wanted the buttons

605
00:23:38.406 --> 00:23:40.436
to blur the content
that was behind them.

606
00:23:41.006 --> 00:23:44.376
And so, when this-- when this
View Controller comes up,

607
00:23:44.376 --> 00:23:46.136
it gives-- there's a
method called update in--

608
00:23:46.246 --> 00:23:48.036
one of my own methods
called update interface

609
00:23:48.186 --> 00:23:49.626
and if we have updated
the button,

610
00:23:49.626 --> 00:23:52.166
I have another convenience
method called applyBackground

611
00:23:52.166 --> 00:23:53.716
ToButtonSourceBlurFromView.

612
00:23:54.606 --> 00:23:57.266
And what this does is it
takes a button and a view

613
00:23:57.266 --> 00:23:58.406
that you want to blur from.

614
00:23:58.756 --> 00:24:01.456
And it basically just calls
drawViewHierarchyInRect

615
00:23:58.756 --> 00:24:01.456
And it basically just calls
drawViewHierarchyInRect

616
00:24:01.546 --> 00:24:03.996
and makes the blur and applies
it to the button background.

617
00:24:04.506 --> 00:24:09.426
And this is the bulk of the
work happens right here.

618
00:24:09.946 --> 00:24:12.206
As Brandon mentioned, we have
to start an image context

619
00:24:12.206 --> 00:24:14.856
with UIGraphicsBegin
ImageContextWithOptions,

620
00:24:15.476 --> 00:24:17.256
and we set that to
the size of the button

621
00:24:17.456 --> 00:24:18.716
because that's what
the size we need.

622
00:24:19.466 --> 00:24:22.406
But we also need to know the
buttons' coordinates inside the

623
00:24:22.486 --> 00:24:25.076
background views
coordinate space and we need

624
00:24:25.076 --> 00:24:27.136
that because you need
to position the view

625
00:24:27.486 --> 00:24:30.136
so that it draws
correctly into the context.

626
00:24:30.676 --> 00:24:32.586
If you didn't actually
reposition the view, would it--

627
00:24:32.586 --> 00:24:34.826
they both draw at 0,
0 inside the context.

628
00:24:35.186 --> 00:24:37.006
So, what you need to
do is in this case,

629
00:24:37.006 --> 00:24:39.856
we need to offset the left and
going to go offset to the--

630
00:24:40.026 --> 00:24:43.786
offset upwards so that the part
of the button that's hovering

631
00:24:43.786 --> 00:24:47.756
over is what actually gets
drawn into the context.

632
00:24:47.756 --> 00:24:49.866
Once that's done, we
call UIGraphicsGetImage

633
00:24:49.866 --> 00:24:52.466
FromCurrentImageContext
to get an image out of it

634
00:24:52.466 --> 00:24:53.896
and then we end the context.

635
00:24:54.206 --> 00:24:57.596
And then this is where
the blur magic happens.

636
00:24:57.716 --> 00:24:59.436
We're applying a light effect.

637
00:24:59.806 --> 00:25:01.776
And like Brandon mentioned,
this is going to be

638
00:24:59.806 --> 00:25:01.776
And like Brandon mentioned,
this is going to be

639
00:25:01.776 --> 00:25:03.646
in this sample code as well

640
00:25:03.646 --> 00:25:06.956
as another sample code that's
already on the developer sight.

641
00:25:06.956 --> 00:25:08.456
It's a fantastic amount of math.

642
00:25:08.656 --> 00:25:10.536
It's fun to go look at
but it really doesn't--

643
00:25:10.626 --> 00:25:11.926
it's not all that
interesting care.

644
00:25:12.196 --> 00:25:14.376
But I encourage you to all
go look at how it's done.

645
00:25:15.076 --> 00:25:17.066
But once we have that
image, that's not blurred,

646
00:25:17.066 --> 00:25:18.786
we set it as our
button's background image

647
00:25:19.096 --> 00:25:21.096
and that's how you
get blur in iOS 7.

648
00:25:21.566 --> 00:25:22.726
>> It's looking great, Jim.

649
00:25:23.246 --> 00:25:26.336
Would you like to get started on
that kind of flipbook animation

650
00:25:26.336 --> 00:25:27.996
that our designers put
to the spec together for?

651
00:25:28.106 --> 00:25:29.306
>> Yeah, I should
get started on that.

652
00:25:29.306 --> 00:25:30.876
>> I think UIDynamics
would be the way to go.

653
00:25:31.196 --> 00:25:33.396
So, let's start talking
about UIKit Dynamics.

654
00:25:33.836 --> 00:25:36.456
So, how can we make realistic
motion in your application?

655
00:25:37.066 --> 00:25:39.026
There's two parts of this
we'd like to talk about today.

656
00:25:39.436 --> 00:25:42.826
UIKit Dynamics as well as
the new motion effects APIs.

657
00:25:43.216 --> 00:25:44.826
Let's get started with Dynamics.

658
00:25:45.666 --> 00:25:49.656
The UIKit Dynamic system was
introduced in iOS 7 as a system

659
00:25:49.656 --> 00:25:52.636
that lets you mimic real
world physical behaviors

660
00:25:52.636 --> 00:25:55.236
in your application
and we backed UIKit

661
00:25:55.236 --> 00:25:57.356
with a physics engine to
help make that possible.

662
00:25:58.106 --> 00:26:01.426
Now, you can do a lot of really
cool things with UIKit Dynamics.

663
00:25:58.106 --> 00:26:01.426
Now, you can do a lot of really
cool things with UIKit Dynamics.

664
00:26:01.546 --> 00:26:03.986
You can do a lot of crazy
things with UIKit Dynamics.

665
00:26:04.396 --> 00:26:05.946
They best advice I'd
like to offer you

666
00:26:05.946 --> 00:26:08.056
with Dynamics is
it's really effective

667
00:26:08.056 --> 00:26:09.576
when you use it in moderation.

668
00:26:10.006 --> 00:26:13.196
It's really easy to go overboard
with it and it's really easy,

669
00:26:13.196 --> 00:26:16.266
you'll find, to have a small
value make a big change

670
00:26:16.266 --> 00:26:16.686
in your app.

671
00:26:17.566 --> 00:26:20.026
To help you make dynamics
possible in your app,

672
00:26:20.436 --> 00:26:22.046
we've brought along a number

673
00:26:22.046 --> 00:26:25.096
of really straightforward
behaviors that you can use.

674
00:26:25.856 --> 00:26:28.126
So, we've introduced
concepts like gravity.

675
00:26:29.696 --> 00:26:32.386
We've introduced
concepts like collisions

676
00:26:32.526 --> 00:26:34.256
where things will
bounce off of each other.

677
00:26:35.726 --> 00:26:39.406
We've added pushes where you
can do both instantaneous pushes

678
00:26:39.486 --> 00:26:41.296
which give a shove in
the direction as well

679
00:26:41.296 --> 00:26:44.186
as a continuous push that always
exerts a push in one direction.

680
00:26:45.256 --> 00:26:48.276
We've added snapping behavior
where you can have things snap

681
00:26:48.276 --> 00:26:50.106
to certain points
in a very nice way.

682
00:26:50.106 --> 00:26:55.166
And finally, we have attachments
where things will be touched

683
00:26:55.166 --> 00:26:56.646
to a point and will
kind of maintain

684
00:26:56.646 --> 00:26:57.946
that distance in
that attachment.

685
00:26:58.986 --> 00:27:00.276
So, what do you need to do

686
00:26:58.986 --> 00:27:00.276
So, what do you need to do

687
00:27:00.276 --> 00:27:02.426
to introduce dynamics
in your applications?

688
00:27:04.296 --> 00:27:06.386
It's not that difficult
to get started.

689
00:27:06.986 --> 00:27:10.256
The first thing you'll want to
do is create a dynamic allocator

690
00:27:10.516 --> 00:27:12.296
and you give it a reference
view that you're going

691
00:27:12.296 --> 00:27:14.056
to be doing your
dynamics effect in.

692
00:27:14.986 --> 00:27:18.046
After that, you need to
create a number of behaviors

693
00:27:18.216 --> 00:27:21.206
that define what the dynamics
engine should be doing.

694
00:27:21.646 --> 00:27:22.416
In this case, we're going

695
00:27:22.416 --> 00:27:24.206
to just make a simple
gravity behavior.

696
00:27:24.626 --> 00:27:27.006
And you notice, we give it
an array of items that we

697
00:27:27.006 --> 00:27:28.476
like that behavior to apply to.

698
00:27:29.196 --> 00:27:31.956
By default, we're making
all views opt into dynamics

699
00:27:31.956 --> 00:27:34.566
so you can add your views
into that list of items.

700
00:27:35.146 --> 00:27:37.706
You can also by default
have items

701
00:27:37.706 --> 00:27:39.936
in your collection views
animate with Dynamics.

702
00:27:40.246 --> 00:27:42.916
You can also implement this
protocol on your own classes

703
00:27:42.956 --> 00:27:45.106
if you'd like to make your
own very unique things

704
00:27:45.106 --> 00:27:46.966
that are opting into dynamics.

705
00:27:47.926 --> 00:27:51.056
Once we've created a behavior,
we can add it to our animator

706
00:27:51.306 --> 00:27:52.286
to put it in the scene.

707
00:27:52.786 --> 00:27:54.316
Everything that's
attached to our animators,

708
00:27:54.446 --> 00:27:56.296
all those behaviors
are going to be running

709
00:27:56.546 --> 00:27:58.306
and impacting your
application right away.

710
00:27:59.336 --> 00:28:01.316
>> Hey, Brandon, instead
of talking about Dynamics

711
00:27:59.336 --> 00:28:01.316
>> Hey, Brandon, instead
of talking about Dynamics

712
00:28:01.316 --> 00:28:03.976
on slides anymore, how about
I just them what it looks

713
00:28:03.976 --> 00:28:04.816
like on the device?

714
00:28:04.816 --> 00:28:05.966
>> That'd make a lot of sense.

715
00:28:05.966 --> 00:28:06.456
Go for it.

716
00:28:06.556 --> 00:28:07.586
>> So, we're going
to use dynamics

717
00:28:07.586 --> 00:28:08.886
in two different
places on our apps.

718
00:28:08.886 --> 00:28:11.436
Obviously, the first one is
net that [inaudible] effect

719
00:28:11.906 --> 00:28:13.876
which I've got it working
a little bit better.

720
00:28:13.926 --> 00:28:16.266
So, let's go pick a photo that
isn't really all that good.

721
00:28:17.596 --> 00:28:19.246
There is a photo of
a taxi that can go.

722
00:28:19.406 --> 00:28:23.236
And then what you can see now
is as the shred line goes up,

723
00:28:23.236 --> 00:28:25.646
each individual one of those
boxes gets a little bit

724
00:28:25.726 --> 00:28:27.536
of a dynamic effect added to it.

725
00:28:27.536 --> 00:28:29.366
We can go delete
another one to see it.

726
00:28:30.316 --> 00:28:32.996
So, the animation that was
happening before is still

727
00:28:32.996 --> 00:28:33.946
exactly the same.

728
00:28:33.946 --> 00:28:37.026
But now, as that scanline
goes up and it hits a row,

729
00:28:37.256 --> 00:28:39.146
each one of the boxes
on that row gets added

730
00:28:39.146 --> 00:28:40.376
to a gravity behavior.

731
00:28:41.066 --> 00:28:43.216
And then, each one of
those also gets a push

732
00:28:43.216 --> 00:28:45.346
in a general random
upwards direction

733
00:28:45.346 --> 00:28:47.606
of some minor amount
of magnitude.

734
00:28:47.606 --> 00:28:48.656
And that gives them the effect

735
00:28:48.656 --> 00:28:50.166
that they're being
popped off like that.

736
00:28:50.166 --> 00:28:53.216
It looks like the line
is burning through them

737
00:28:53.216 --> 00:28:54.096
and tearing them apart.

738
00:28:54.666 --> 00:28:57.866
So, it's getting pretty close
to what the designers want.

739
00:28:57.866 --> 00:28:59.356
They may want to iterate
on that a little bit.

740
00:28:59.836 --> 00:29:01.306
But the other place
that we really wanted

741
00:28:59.836 --> 00:29:01.306
But the other place
that we really wanted

742
00:29:01.306 --> 00:29:05.376
to use Dynamics was in our
flipbook in how we show photos

743
00:29:05.496 --> 00:29:07.286
that we've taken during
the run to our users.

744
00:29:07.656 --> 00:29:09.596
I mean, you can go through and
swipe but this thing is going

745
00:29:09.596 --> 00:29:11.076
to take a picture
every three seconds.

746
00:29:11.076 --> 00:29:13.006
So, you're going to swipe
through thousands of photos.

747
00:29:13.836 --> 00:29:14.746
Not very interesting.

748
00:29:15.376 --> 00:29:16.966
So, instead, what we're
going to do is we're going

749
00:29:16.966 --> 00:29:17.916
to make a flipbook effect.

750
00:29:18.606 --> 00:29:20.756
And what this is actually
doing is it's just iterating

751
00:29:20.756 --> 00:29:23.226
through every photo that you
took while you were walking

752
00:29:23.226 --> 00:29:23.866
around the campus.

753
00:29:24.146 --> 00:29:27.456
Surprising a little code
make this happen as far

754
00:29:27.516 --> 00:29:28.686
as Dynamics is concerned.

755
00:29:29.406 --> 00:29:31.236
What's actually happening is
in the upper left hand corner,

756
00:29:31.236 --> 00:29:33.036
we basically placed
a view on the screen

757
00:29:33.476 --> 00:29:36.276
and through some CAAnimation
or view-- a UIViewAnimation,

758
00:29:36.276 --> 00:29:38.686
we just set the alpha
and the transform.

759
00:29:38.686 --> 00:29:41.936
And then we give a little bit
of a shove, instantaneous push

760
00:29:41.936 --> 00:29:43.926
so that it will land in the
light pole in the middle.

761
00:29:43.926 --> 00:29:46.526
And that light pole
is a boundary that--

762
00:29:46.526 --> 00:29:49.016
it's provided by UICollision.

763
00:29:49.526 --> 00:29:52.626
And then, because things on
our simulation are bouncy,

764
00:29:52.756 --> 00:29:55.206
it bounces off and in the
second part of that bounce,

765
00:29:55.206 --> 00:29:59.366
there is some more animation
to shrink the view down

766
00:29:59.366 --> 00:30:00.976
and animate its alpha
out to zero.

767
00:29:59.366 --> 00:30:00.976
and animate its alpha
out to zero.

768
00:30:01.616 --> 00:30:04.376
Now, this is all fine
and good and everything

769
00:30:04.376 --> 00:30:06.096
but Dynamics really,
we want you guys

770
00:30:06.096 --> 00:30:10.076
to make your applications
more immersive with Dynamics.

771
00:30:10.076 --> 00:30:11.676
We don't want you just
make things jiggle

772
00:30:11.676 --> 00:30:14.556
and bounce and fly around.

773
00:30:14.956 --> 00:30:17.386
So, Dynamics are really
meant to be interactive.

774
00:30:17.386 --> 00:30:19.206
So, while this is running,
if someone was like saying,

775
00:30:19.206 --> 00:30:21.756
well that's a really cool tree,
you should be able to grab it

776
00:30:23.086 --> 00:30:25.646
and pull out photos and make--
so that the user can look at it

777
00:30:25.646 --> 00:30:27.096
and say, "Well, it's a
really nice minivan."

778
00:30:27.456 --> 00:30:28.106
I know, geez.

779
00:30:28.656 --> 00:30:29.226
There's another one.

780
00:30:29.496 --> 00:30:30.666
But, you get the idea.

781
00:30:30.946 --> 00:30:32.426
The simulation never stopped.

782
00:30:32.426 --> 00:30:34.596
You just added new
behaviors to it.

783
00:30:35.086 --> 00:30:37.556
So, while this thing is
running, you can do all sorts

784
00:30:37.556 --> 00:30:40.896
of different interesting
and unique behaviors just

785
00:30:40.896 --> 00:30:43.246
by changing what the
animator is doing.

786
00:30:43.246 --> 00:30:44.966
So, let's go-- take a look

787
00:30:44.966 --> 00:30:47.256
at what this flipbook
looks like in code.

788
00:30:47.546 --> 00:30:49.516
So, we have a flipbook
View Controller

789
00:30:49.516 --> 00:30:51.086
that represents what I
just showed on screen.

790
00:30:51.846 --> 00:30:54.366
And in our viewDidLoad, we're
going to create an animator

791
00:30:54.846 --> 00:30:56.226
and [inaudible] the
reference view

792
00:30:56.226 --> 00:30:58.316
of our view controllers
content view.

793
00:30:58.576 --> 00:31:01.046
And then we create a
simple gravity behavior

794
00:30:58.576 --> 00:31:01.046
And then we create a
simple gravity behavior

795
00:31:01.046 --> 00:31:03.196
and we give it a little bit more
gravity 'cause I want things

796
00:31:03.706 --> 00:31:04.806
to fall quicker.

797
00:31:05.836 --> 00:31:07.776
And then we create a
collision behavior,

798
00:31:08.116 --> 00:31:09.606
and there's two reasons
to create this.

799
00:31:09.606 --> 00:31:12.196
One, we needed that boundary
in the light pole so it--

800
00:31:12.196 --> 00:31:14.926
the view or the image could
bounce off of something.

801
00:31:15.486 --> 00:31:17.706
But we also need to know
when it bounced off of it.

802
00:31:17.946 --> 00:31:21.756
And UICollisionBehavior
will actually tell you

803
00:31:22.636 --> 00:31:25.186
that through one of
its delegate methods.

804
00:31:25.186 --> 00:31:30.146
Second, we needed more
springiness in our simulation.

805
00:31:30.556 --> 00:31:32.036
By default, normal thing--

806
00:31:32.036 --> 00:31:35.506
everything in UIDynamics
has an elasticity of zero.

807
00:31:35.506 --> 00:31:37.066
So it means it's not
really bouncy at all.

808
00:31:37.396 --> 00:31:42.416
And so, to affect this, the
Dynamics, you create an instance

809
00:31:42.416 --> 00:31:44.126
of UIDynamic item behavior.

810
00:31:44.436 --> 00:31:46.776
And in this way, you can
actually change the properties

811
00:31:46.776 --> 00:31:49.726
of any individual item or
a whole collection of items

812
00:31:49.726 --> 00:31:53.446
in your simulation by changing
the properties on this behavior.

813
00:31:53.826 --> 00:31:56.766
So, in this case, we set the
elasticity all the way up to one

814
00:31:56.826 --> 00:31:58.386
and then we add all three

815
00:31:58.386 --> 00:32:00.076
of those behaviors
directly to our animator.

816
00:31:58.386 --> 00:32:00.076
of those behaviors
directly to our animator.

817
00:32:03.096 --> 00:32:07.226
Then, as we iterate through
the photos, there's a bunch

818
00:32:07.226 --> 00:32:09.316
of code here that gets the
photo and places it on screen

819
00:32:09.316 --> 00:32:10.546
which isn't terribly
interesting.

820
00:32:11.376 --> 00:32:12.826
This is the push.

821
00:32:14.076 --> 00:32:16.606
We instantiate the push
behavior with our--

822
00:32:16.606 --> 00:32:18.596
with the view that
represents our image.

823
00:32:19.316 --> 00:32:20.936
We make the mode instantaneous

824
00:32:20.936 --> 00:32:22.286
so it doesn't continue
to push it.

825
00:32:22.776 --> 00:32:26.176
And then, we just basically push
it to the left a little bit.

826
00:32:26.296 --> 00:32:28.356
That is all the momentum
we're actually pushing

827
00:32:28.356 --> 00:32:29.006
on to that view.

828
00:32:29.006 --> 00:32:31.316
Everything else happens
from this initial push.

829
00:32:32.366 --> 00:32:33.916
And finally, we add
that container,

830
00:32:33.916 --> 00:32:36.356
that image to the other
behaviors that are already

831
00:32:36.356 --> 00:32:37.316
in play in the animator.

832
00:32:39.656 --> 00:32:42.516
Now, down here is
the delegate method

833
00:32:42.516 --> 00:32:43.586
from our CollisionBehavior.

834
00:32:43.676 --> 00:32:45.496
CollisionBehavior
endedContextFor

835
00:32:45.496 --> 00:32:46.936
ItemWithBoundaryIdentifier.

836
00:32:47.516 --> 00:32:50.536
I love our names sometimes.

837
00:32:50.536 --> 00:32:52.756
This is important for us
because of two things.

838
00:32:52.756 --> 00:32:55.566
One, we needed to place that
view that you guys are focusing

839
00:32:55.566 --> 00:32:56.826
on so that the images don't look

840
00:32:56.826 --> 00:32:58.516
like they're just bouncing
all over the place.

841
00:32:59.246 --> 00:33:02.326
And two, we needed to
complete the second part

842
00:32:59.246 --> 00:33:02.326
And two, we needed to
complete the second part

843
00:33:02.326 --> 00:33:06.046
of our animation, the
fading out of the view

844
00:33:06.116 --> 00:33:08.286
and of the-- in the scale of it.

845
00:33:09.566 --> 00:33:12.126
You also noticed that
in the views animation--

846
00:33:12.126 --> 00:33:14.176
the view animations
completion block, we're going

847
00:33:14.176 --> 00:33:16.136
and removing the item
from all the behaviors

848
00:33:16.136 --> 00:33:18.576
that it was attached to before
we remove it from the superview.

849
00:33:19.136 --> 00:33:20.366
And this is important to note

850
00:33:20.736 --> 00:33:23.906
because while your
views can be off-screen

851
00:33:23.906 --> 00:33:25.726
and still being processed
by Dynamics,

852
00:33:25.726 --> 00:33:28.356
if they're not actually
imparting anything in your scene

853
00:33:28.746 --> 00:33:32.616
or they're not having any kind
of effect on what the user sees,

854
00:33:32.616 --> 00:33:35.356
it's in your best interest
to remove those views

855
00:33:35.576 --> 00:33:37.296
and those behaviors
from the animation.

856
00:33:37.606 --> 00:33:40.696
Otherwise, a view you can
imagine that's falling forever,

857
00:33:40.776 --> 00:33:43.096
the system has to track
that and more tracking

858
00:33:43.096 --> 00:33:44.786
of more space means more memory.

859
00:33:45.236 --> 00:33:49.376
So, when a view no longer is
needed, go ahead and remove it

860
00:33:49.606 --> 00:33:50.876
from the behavior
and the behaviors

861
00:33:50.876 --> 00:33:53.156
from the animation
and all is good.

862
00:33:53.636 --> 00:33:57.106
And one final thing I want to
point out with the grabbing

863
00:33:57.246 --> 00:34:00.296
of the view, that was done
with no animation at all.

864
00:33:57.246 --> 00:34:00.296
of the view, that was done
with no animation at all.

865
00:34:00.576 --> 00:34:04.666
That was all just an
attachment behavior and gravity.

866
00:34:05.466 --> 00:34:09.656
So, how do we know to remove
that behavior and the view

867
00:34:09.656 --> 00:34:12.076
from the screen if there's
no completion block.

868
00:34:12.985 --> 00:34:15.876
Well, we're going to use another
dynamic item behavior here

869
00:34:15.876 --> 00:34:17.326
and I called it off-screen
behavior,

870
00:34:17.946 --> 00:34:20.076
and it's not actually
going to impart any kind

871
00:34:20.076 --> 00:34:22.696
of behavioral changes
on the scene.

872
00:34:22.996 --> 00:34:24.956
What it's going to do
is it's simply going

873
00:34:24.956 --> 00:34:28.516
to call its action block, and
the action block is something

874
00:34:28.516 --> 00:34:30.706
that we call every time
the scene is updated.

875
00:34:31.896 --> 00:34:35.196
This block is a way that you
can interact with your scene

876
00:34:35.196 --> 00:34:38.696
for this behavior or for any
other part of the simulation.

877
00:34:39.346 --> 00:34:42.436
And so, in this case,
as the view is dropping,

878
00:34:42.436 --> 00:34:42.966
we check to see

879
00:34:42.966 --> 00:34:44.786
if our containers frame
has falling outside

880
00:34:44.786 --> 00:34:46.946
of the windows bounds, and
when that actually happens,

881
00:34:47.025 --> 00:34:48.585
we know that we're
no longer on screen

882
00:34:48.846 --> 00:34:51.116
and we can actually remove
all of our container view,

883
00:34:51.116 --> 00:34:54.446
the following container
view from the behavior,

884
00:34:54.876 --> 00:34:55.936
from the gravity behavior.

885
00:34:56.216 --> 00:34:58.896
We can move our own off-screen
behavior from the animator

886
00:34:58.896 --> 00:35:01.476
and then we can remove the
container from the superview.

887
00:34:58.896 --> 00:35:01.476
and then we can remove the
container from the superview.

888
00:35:02.826 --> 00:35:03.476
Pretty cool, huh?

889
00:35:03.666 --> 00:35:04.506
>> That's looking really cool.

890
00:35:04.506 --> 00:35:06.166
I'm really digging
the flipbook animation

891
00:35:06.166 --> 00:35:07.026
that you have going on there.

892
00:35:07.106 --> 00:35:07.396
>> Thanks.

893
00:35:08.516 --> 00:35:09.586
>> The next thing
we'd like to talk

894
00:35:09.586 --> 00:35:12.026
about is how we can
create motion effects

895
00:35:12.026 --> 00:35:13.026
in your applications.

896
00:35:13.356 --> 00:35:15.336
Now, one of my favorite
things that we added

897
00:35:15.336 --> 00:35:18.056
in iOS 7 is the sense
of parallax

898
00:35:18.056 --> 00:35:20.566
where you can see how icons
move around on the home screen,

899
00:35:20.746 --> 00:35:22.756
alert views float
above other views.

900
00:35:23.216 --> 00:35:25.416
It's a really cool way
that we use to show--

901
00:35:25.416 --> 00:35:27.936
give users the sense of
depth in your applications

902
00:35:27.936 --> 00:35:29.386
and across the entire system.

903
00:35:30.126 --> 00:35:32.376
So, as a reminder, this
is what that looks like.

904
00:35:32.726 --> 00:35:34.656
We have an alert view
floating above some tabs

905
00:35:34.656 --> 00:35:36.476
in that really cool
new Safari tab view.

906
00:35:36.926 --> 00:35:38.806
And if you pay attention
to the top and bottom

907
00:35:38.806 --> 00:35:41.316
of the alert view, as the
screen tilts up and down,

908
00:35:41.726 --> 00:35:44.376
you notice how you can actually
see behind the alert view.

909
00:35:44.516 --> 00:35:45.636
It really gives you a sense

910
00:35:45.636 --> 00:35:48.866
that it's actually a layer
that's floating above the tabs.

911
00:35:49.696 --> 00:35:52.356
These are made possible
using UIMotionEffect.

912
00:35:52.986 --> 00:35:56.046
This is the API that you all
can use to create effects just

913
00:35:56.046 --> 00:35:59.396
like you see on the home screen
or action sheets, alert views

914
00:35:59.396 --> 00:36:01.626
and so on and across
the entire system.

915
00:35:59.396 --> 00:36:01.626
and so on and across
the entire system.

916
00:36:02.576 --> 00:36:05.646
Now you can think of these
similarly to CAAnimations.

917
00:36:06.066 --> 00:36:08.176
CAAnimation takes
time as an input.

918
00:36:08.626 --> 00:36:11.496
UIMotionEffects take
device motion as an input.

919
00:36:12.266 --> 00:36:15.016
We've done a ton of work to
optimize these behind the scenes

920
00:36:15.256 --> 00:36:18.066
to have a very minimal
impact on the user's battery.

921
00:36:18.436 --> 00:36:20.246
So we would really
encourage you to take the time

922
00:36:20.246 --> 00:36:22.716
to use UIMotionEffects
rather than trying

923
00:36:22.716 --> 00:36:23.866
to roll your own system.

924
00:36:24.716 --> 00:36:27.096
So to help you understand
how motion effects work,

925
00:36:27.466 --> 00:36:29.726
you really need to
understand what the inputs are

926
00:36:29.726 --> 00:36:30.676
to device motion.

927
00:36:31.106 --> 00:36:32.606
So as you tilt your
phone to the right,

928
00:36:33.046 --> 00:36:34.456
you're getting a
positive 1 effect.

929
00:36:34.566 --> 00:36:37.126
As you tilt it to the
left, a negative 1 effect.

930
00:36:37.126 --> 00:36:39.766
As you tilt it down,
you get a positive 1.

931
00:36:40.186 --> 00:36:42.326
And tilting up, you get
a negative 1 effect.

932
00:36:43.256 --> 00:36:43.846
Make sense?

933
00:36:44.766 --> 00:36:46.416
Let's do it again
just to make sure.

934
00:36:47.876 --> 00:36:49.756
So again as you tilt
right you get plus 1,

935
00:36:50.036 --> 00:36:51.926
tilting left gives
you a negative value.

936
00:36:52.306 --> 00:36:53.856
Tilting down gives you a plus 1.

937
00:36:54.246 --> 00:36:56.076
Tilting up gives you
a negative value.

938
00:36:56.746 --> 00:36:58.876
And what you're looking at there
is how your thumb is actually

939
00:36:58.876 --> 00:37:00.176
hovering above the screen

940
00:36:58.876 --> 00:37:00.176
hovering above the screen

941
00:37:00.466 --> 00:37:02.096
and how you actually
see different parts

942
00:37:02.096 --> 00:37:05.026
of the screen behind your
thumb as you tilt the device.

943
00:37:05.426 --> 00:37:07.586
To help make this easier
in your application,

944
00:37:07.986 --> 00:37:10.496
we've provided
UIInterpolatingMotionEffect.

945
00:37:11.206 --> 00:37:13.416
This is something that we're
providing as part of UIKit

946
00:37:13.686 --> 00:37:16.886
that makes it easy to adopt the
motion effects in your apps.

947
00:37:17.636 --> 00:37:20.456
It's very easy for you to use
interpolating motion effects

948
00:37:20.736 --> 00:37:23.606
to interpolate between the
minimum and the maximum value

949
00:37:23.756 --> 00:37:25.686
that you define when you
create the motion effect.

950
00:37:26.686 --> 00:37:29.206
You know, what we apply
the animations to is

951
00:37:29.206 --> 00:37:30.546
to a key path that you provide.

952
00:37:31.106 --> 00:37:33.306
We can apply motion
effects to anything

953
00:37:33.306 --> 00:37:35.596
that is animatable by CA.

954
00:37:36.576 --> 00:37:38.676
The interpolating
motion effect is going

955
00:37:38.676 --> 00:37:41.676
to automatically update
based on the device motion

956
00:37:41.676 --> 00:37:43.346
as your users interact
with the screen.

957
00:37:43.886 --> 00:37:46.456
And all you need to do to
make this work is attach them

958
00:37:46.456 --> 00:37:48.736
to a UIView anywhere in
your-- outside your app,

959
00:37:48.736 --> 00:37:51.046
and we'll start applying
motion effects to it.

960
00:37:51.456 --> 00:37:52.636
It's really that simple.

961
00:37:53.276 --> 00:37:55.576
If you want to do some
more advanced things,

962
00:37:55.796 --> 00:37:58.176
there's a couple other bits
of API for motion effect.

963
00:37:58.766 --> 00:38:00.636
The first is UIMotionEffect
group.

964
00:37:58.766 --> 00:38:00.636
The first is UIMotionEffect
group.

965
00:38:01.146 --> 00:38:03.626
You want to group every motion
effect that you want to attach

966
00:38:03.626 --> 00:38:05.966
to a view into a single
motion effect group

967
00:38:05.966 --> 00:38:08.306
so that we can evaluate
them simultaneously.

968
00:38:09.636 --> 00:38:10.936
Now you're probably
already thinking

969
00:38:10.936 --> 00:38:12.256
of these really cool ways

970
00:38:12.256 --> 00:38:13.786
to take advantage
of motion effects.

971
00:38:14.046 --> 00:38:16.556
And some of you are probably
thinking, "Well, that's great

972
00:38:16.556 --> 00:38:18.736
but I want more than just
a simple interpolation."

973
00:38:19.246 --> 00:38:21.996
Luckily we have a solution for
you, and that's the ability

974
00:38:21.996 --> 00:38:23.616
to create your own
motion effects.

975
00:38:24.076 --> 00:38:26.366
The method that you need
to implement is keypads

976
00:38:26.366 --> 00:38:28.316
and relative values
for viewer offset.

977
00:38:29.256 --> 00:38:30.836
The viewer offset
that we call you

978
00:38:30.836 --> 00:38:33.256
with is what we're just
playing with with our phones,

979
00:38:33.456 --> 00:38:36.036
that plus 1 to minus
1 on each axis.

980
00:38:37.016 --> 00:38:38.906
You return back to
us a dictionary

981
00:38:39.016 --> 00:38:41.576
with keypads and
relative values.

982
00:38:41.936 --> 00:38:45.126
Those keypads are the set of
pads that you want your effects

983
00:38:45.126 --> 00:38:48.326
to be applied to and the
relative values are what you

984
00:38:48.326 --> 00:38:51.106
actually want that value to
be as the name would suggest.

985
00:38:51.636 --> 00:38:54.416
This allows you to do a number
of incredibly cool things

986
00:38:54.416 --> 00:38:56.606
with motion effects
in your applications.

987
00:38:57.606 --> 00:38:59.286
So, what we want to
do with motion effects

988
00:38:59.286 --> 00:39:01.406
in our app are a couple
of interesting things.

989
00:38:59.286 --> 00:39:01.406
in our app are a couple
of interesting things.

990
00:39:02.026 --> 00:39:03.576
The first thing our
designers want us

991
00:39:03.576 --> 00:39:06.056
to do is apply some motion
effects to the buttons

992
00:39:06.056 --> 00:39:08.836
on our home screen to give
them a sense of depth of rising

993
00:39:08.836 --> 00:39:10.156
above that background view.

994
00:39:10.576 --> 00:39:11.986
It's the same thing that you see

995
00:39:11.986 --> 00:39:14.146
on the home screen
of your iOS devices.

996
00:39:14.946 --> 00:39:17.026
They also put that lens
flare into our effect

997
00:39:17.026 --> 00:39:19.176
because everyone loves
JJ Abrams lens flares.

998
00:39:19.566 --> 00:39:22.346
But we thought why don't I
go a little bit beyond that

999
00:39:22.436 --> 00:39:24.486
and actually make
that lens flare come

1000
00:39:24.486 --> 00:39:25.636
to life in our application.

1001
00:39:26.126 --> 00:39:28.606
So, Jim, why don't we see
what we can do with that?

1002
00:39:28.926 --> 00:39:29.356
>> All right.

1003
00:39:29.356 --> 00:39:31.386
What I came up with is not
exactly what our develop--

1004
00:39:31.386 --> 00:39:34.086
our designers came up with
because that's clearly shopped

1005
00:39:34.086 --> 00:39:35.456
and I'm not going to be
able to do that, so--

1006
00:39:35.896 --> 00:39:37.966
But what we came up with
I think is a lot cooler.

1007
00:39:38.446 --> 00:39:40.556
So, you can see that
before I pick up the device

1008
00:39:40.556 --> 00:39:43.196
that we have I think
reasonable effects

1009
00:39:43.196 --> 00:39:44.366
in [inaudible] of a lens flare.

1010
00:39:44.616 --> 00:39:47.116
And so when I pick up the
device that you'll notice though

1011
00:39:47.116 --> 00:39:49.226
as I start moving the
device in the next motion,

1012
00:39:49.226 --> 00:39:51.476
not only do you see the buttons
move but you actually see

1013
00:39:51.476 --> 00:39:52.896
that the lens flare is
actually moving along

1014
00:39:52.896 --> 00:39:54.616
like a diagonal line.

1015
00:39:54.976 --> 00:39:56.386
And you can also, it's
kind of hard to tell

1016
00:39:56.386 --> 00:39:57.756
but if you move really far

1017
00:39:57.756 --> 00:40:02.456
that the colors become much more
subdued and much more brighter.

1018
00:39:57.756 --> 00:40:02.456
that the colors become much more
subdued and much more brighter.

1019
00:40:02.456 --> 00:40:04.576
And then if I go in the
wide axis, the buttons move

1020
00:40:04.576 --> 00:40:06.796
and then the color actually
also changes on as well.

1021
00:40:07.116 --> 00:40:09.316
So as you actually move a little
bit, it's a little distracting

1022
00:40:09.316 --> 00:40:11.456
with the buttons, but the
lens flare effect is actually

1023
00:40:11.456 --> 00:40:11.906
pretty cool.

1024
00:40:12.256 --> 00:40:14.516
And this is all done
through UIMotionEffect,

1025
00:40:15.186 --> 00:40:16.846
and let me show you
what that looks like.

1026
00:40:17.266 --> 00:40:18.206
We'll start off with how we get

1027
00:40:18.206 --> 00:40:19.786
that altitude effect
on the buttons.

1028
00:40:20.896 --> 00:40:22.616
Now we're going to do this
in the same exact spot

1029
00:40:22.616 --> 00:40:24.006
where we had a blurred
red button.

1030
00:40:24.006 --> 00:40:25.576
So we're in our launch
view controller.

1031
00:40:26.246 --> 00:40:29.066
And so what we need to do is
we need to create two instances

1032
00:40:29.066 --> 00:40:30.956
of an
UIInterpolatingMotionEffect,

1033
00:40:31.116 --> 00:40:35.036
one for the x-axis and
one for the y-axis.

1034
00:40:35.036 --> 00:40:38.766
So we create one with a key path
of center.x and we set its type

1035
00:40:38.826 --> 00:40:43.796
to UIInterpolatingMotionEffect
TypeTiltAlongHorizontalAxis.

1036
00:40:43.946 --> 00:40:47.326
And we give it a minimum
and maximum relative value

1037
00:40:47.326 --> 00:40:48.436
of negative 10 and 10.

1038
00:40:48.846 --> 00:40:52.476
And what that means is that
wherever center.x is normally

1039
00:40:52.476 --> 00:40:54.906
for that view, it won't
deviate more than 10 points

1040
00:40:54.906 --> 00:40:56.456
in either direction
on the x-axis.

1041
00:40:57.176 --> 00:40:58.646
And now, we-- and
we do the same thing

1042
00:40:58.646 --> 00:40:59.936
for the y-axis right below it.

1043
00:40:59.936 --> 00:41:00.966
It's the exact same code.

1044
00:40:59.936 --> 00:41:00.966
It's the exact same code.

1045
00:41:01.016 --> 00:41:04.016
The only thing that's changed
is the key path is now center.y

1046
00:41:04.446 --> 00:41:06.086
and the type is vertical access.

1047
00:41:06.756 --> 00:41:09.256
And because we want
these to be evaluated

1048
00:41:09.256 --> 00:41:12.256
at exactly the same time, we
create a motion effect group.

1049
00:41:12.476 --> 00:41:14.696
We add both of those
motion effects

1050
00:41:14.696 --> 00:41:16.366
and then we add that
to the button.

1051
00:41:16.726 --> 00:41:20.236
So each button has its own
grouping of motion effects.

1052
00:41:20.236 --> 00:41:23.246
And that's how each button
moves like it has some altitude

1053
00:41:23.246 --> 00:41:24.646
above the view it's below.

1054
00:41:24.646 --> 00:41:27.326
Now the LensFlare
is not something

1055
00:41:27.326 --> 00:41:29.446
that was easily just done
through interpolation.

1056
00:41:29.746 --> 00:41:32.016
But it wasn't terribly
difficult to get done.

1057
00:41:32.876 --> 00:41:35.366
So we created a view
called lens flare view.

1058
00:41:35.706 --> 00:41:38.336
And in its initialization
we have a thing,

1059
00:41:38.446 --> 00:41:40.636
a method called
addFlareToEndpoint.

1060
00:41:40.926 --> 00:41:43.446
And that's basically a nice way
of saying that I created a line

1061
00:41:43.446 --> 00:41:46.666
from the top left and I
made it go down at an angle.

1062
00:41:47.086 --> 00:41:49.766
And we create these
lens flare blob views

1063
00:41:50.086 --> 00:41:52.426
that represent each
individual blob along that line.

1064
00:41:52.906 --> 00:41:55.236
The next thing that we do
is we create a random color

1065
00:41:55.236 --> 00:41:58.206
and we create an instance
of our custom subclass

1066
00:41:58.206 --> 00:42:01.326
of UIMotionEvent called lens
flare color motion effect.

1067
00:41:58.206 --> 00:42:01.326
of UIMotionEvent called lens
flare color motion effect.

1068
00:42:01.326 --> 00:42:03.316
And it's a pretty simple class.

1069
00:42:04.236 --> 00:42:06.016
With the color, once
we initialized with it,

1070
00:42:06.016 --> 00:42:08.506
we pull out the components
that we're interested,

1071
00:42:08.506 --> 00:42:09.496
the hue and the brightness.

1072
00:42:10.136 --> 00:42:12.466
And then we implement key
paths and relative values

1073
00:42:12.466 --> 00:42:15.666
for viewer offset because
we map a horizontal movement

1074
00:42:15.666 --> 00:42:18.296
to brightness and we map our
vertical movement to the hue.

1075
00:42:19.106 --> 00:42:21.326
And we do some exciting
math to get a--

1076
00:42:21.326 --> 00:42:23.516
compute a new color value
based off the viewer offset.

1077
00:42:24.296 --> 00:42:25.286
We create a new color

1078
00:42:25.386 --> 00:42:30.196
and because our lens flare blobs
layers are actually CAShape

1079
00:42:30.196 --> 00:42:31.966
layers, the key path
that we need

1080
00:42:31.966 --> 00:42:33.696
to return is layer.fillColor

1081
00:42:34.186 --> 00:42:36.086
and then we just give it the
new color that we created.

1082
00:42:36.086 --> 00:42:38.396
And that's it, that's
how you can get the color

1083
00:42:38.396 --> 00:42:40.376
to actually map to
move in on your device.

1084
00:42:41.746 --> 00:42:43.906
Now, the motion is
even more simple.

1085
00:42:44.996 --> 00:42:47.806
We need the instance of lens
flare diagonal motion effect

1086
00:42:47.806 --> 00:42:50.006
which is also another
subclass of UIMotionEffect.

1087
00:42:50.006 --> 00:42:52.736
And again we implement key paths

1088
00:42:52.736 --> 00:42:54.496
and relative values
for viewer offset.

1089
00:42:54.976 --> 00:42:56.396
And again we do some more math

1090
00:42:56.396 --> 00:42:57.726
to basically interpolate
a value.

1091
00:42:59.066 --> 00:43:02.456
But what instead of looking
at both x and y, we just cared

1092
00:42:59.066 --> 00:43:02.456
But what instead of looking
at both x and y, we just cared

1093
00:43:02.456 --> 00:43:05.196
about the horizontal
access-- axis, excuse me.

1094
00:43:05.666 --> 00:43:09.616
And what we did was we
applied our computation to it

1095
00:43:09.616 --> 00:43:12.696
but then we rotated that point,
and actually 45 degrees or so.

1096
00:43:12.696 --> 00:43:15.596
And then from that,
we are actually able

1097
00:43:15.596 --> 00:43:18.456
to get not only x movement
but y movement as well.

1098
00:43:18.906 --> 00:43:23.946
And we simply send center.x
and center.y to that rotated x

1099
00:43:23.946 --> 00:43:25.116
and rotated y on that view.

1100
00:43:25.386 --> 00:43:28.276
And then that's how that, those
views move all along that line.

1101
00:43:28.836 --> 00:43:31.586
It's a really neat effect and
it's important to really realize

1102
00:43:31.586 --> 00:43:32.976
that motion effects are more

1103
00:43:32.976 --> 00:43:34.976
than just moving things
around the device.

1104
00:43:36.096 --> 00:43:37.016
>> That's looking great, Jim.

1105
00:43:37.016 --> 00:43:39.476
I think motion effects are a
really cool way that we can use

1106
00:43:39.476 --> 00:43:41.056
to make all of our
apps come alive

1107
00:43:41.056 --> 00:43:42.826
within our customers' devices,

1108
00:43:42.826 --> 00:43:44.626
make things really feel
interesting and engaging.

1109
00:43:44.756 --> 00:43:44.936
>> Yeah.

1110
00:43:45.186 --> 00:43:47.336
>> So let's go ahead and wrap
things up from today's talk.

1111
00:43:47.676 --> 00:43:50.026
We've shown you a lot of really
cool stuff that you can use

1112
00:43:50.026 --> 00:43:53.516
in your applications to make
things look great on iOS 7.

1113
00:43:53.716 --> 00:43:56.366
If you want to customize
transitions in your application,

1114
00:43:56.626 --> 00:43:58.576
you can do that using
the new UIViewController

1115
00:43:58.576 --> 00:43:59.786
transitioning systems.

1116
00:44:00.316 --> 00:44:03.186
You can set your applications
wide appearance using tintColor

1117
00:44:03.186 --> 00:44:06.086
as well as taking advantage
of the UIAppearance proxies

1118
00:44:06.086 --> 00:44:08.076
that we introduced in iOS 5.

1119
00:44:08.746 --> 00:44:11.436
Images are a great way to make
things look interesting as well,

1120
00:44:11.436 --> 00:44:14.386
and the new template images
are a huge win for you

1121
00:44:14.436 --> 00:44:16.806
in making things
look unique and get

1122
00:44:16.806 --> 00:44:18.746
that custom unique
tint color in your apps

1123
00:44:18.886 --> 00:44:20.996
across the entire
system in an easy way.

1124
00:44:21.756 --> 00:44:24.246
UIKit Dynamics are a great
way to make things come alive

1125
00:44:24.486 --> 00:44:27.036
and feel very realistic
and you can take advantage

1126
00:44:27.036 --> 00:44:29.456
of motion effect to really
make your apps come alive

1127
00:44:29.456 --> 00:44:32.056
in the user's hands while
they're using their device.

1128
00:44:32.326 --> 00:44:34.896
If you didn't make it to some
of these sessions earlier

1129
00:44:34.896 --> 00:44:36.396
in the week, I would
highly encourage you

1130
00:44:36.396 --> 00:44:37.356
to check out the videos.

1131
00:44:37.686 --> 00:44:39.736
These are all some great
talks that explain how to go

1132
00:44:39.736 --> 00:44:41.666
into more depth in
some of these APIs.

1133
00:44:41.666 --> 00:44:43.496
And if you have other questions,

1134
00:44:43.876 --> 00:44:46.846
there's some great documentation
online and please e-mail Jake,

1135
00:44:46.996 --> 00:44:48.976
he loves hearing from you
guys every single day.

1136
00:44:48.976 --> 00:44:49.946
Thanks for attending WWDC.

1137
00:44:50.016 --> 00:44:52.000
[Applause]
