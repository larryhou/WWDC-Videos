
1
00:00:12.596 --> 00:00:15.086
>> Good morning and
welcome to session 508.

2
00:00:15.276 --> 00:00:16.155
I'm Brad Ford.

3
00:00:16.596 --> 00:00:18.886
I'm an Engineer in the
Camera Software Group.

4
00:00:20.086 --> 00:00:22.336
And hopefully you're not
here to learn about Swift,

5
00:00:22.336 --> 00:00:24.516
because we're going to
talk about cameras today,

6
00:00:24.836 --> 00:00:28.666
specifically camera developments
on Yosemite and iOS 8.

7
00:00:28.666 --> 00:00:31.136
If you want to hear about that
you've come to the right place.

8
00:00:35.596 --> 00:00:37.766
If you're new to Camera
Capture in general on OS X

9
00:00:38.096 --> 00:00:41.376
or iOS we invite you to review
our past sessions from WWDC.

10
00:00:41.376 --> 00:00:45.366
They're available right
within your WWDC app or online

11
00:00:45.366 --> 00:00:46.836
at developer.apple.com.

12
00:00:47.436 --> 00:00:49.896
They provide great background
information for today's talk

13
00:00:49.896 --> 00:00:52.186
and they also show you the
progression of our API set

14
00:00:52.186 --> 00:00:53.276
over the last four years.

15
00:00:53.806 --> 00:00:56.946
And seeing as we're so close

16
00:00:56.946 --> 00:00:59.736
to lunchtime we thought we'd
present you a little menu

17
00:00:59.736 --> 00:01:00.326
of our own.

18
00:00:59.736 --> 00:01:00.326
of our own.

19
00:01:00.866 --> 00:01:02.816
We'll begin with
a light appetizer

20
00:01:02.816 --> 00:01:06.646
of Yosemite camera developments
and iOS updates followed

21
00:01:06.646 --> 00:01:09.166
by our manual camera
controls main course

22
00:01:09.446 --> 00:01:10.616
and then we'll finish things off

23
00:01:10.616 --> 00:01:13.006
with some tasty bracketed
capture for dessert.

24
00:01:13.526 --> 00:01:18.726
There is a lot to digest
here so let's get going.

25
00:01:18.796 --> 00:01:21.926
First up is Capture in AVKit.

26
00:01:22.766 --> 00:01:27.416
AVKit is sort of like
AppKit except it's for audio

27
00:01:27.416 --> 00:01:29.926
and video thus the name AVKit.

28
00:01:29.926 --> 00:01:33.146
It is to AV Foundation as
AppKit is to Foundation.

29
00:01:33.496 --> 00:01:35.876
So, it provides view
classes and standard UI

30
00:01:36.486 --> 00:01:39.576
for common media operations
like media playback

31
00:01:39.576 --> 00:01:41.496
and now for capture as well.

32
00:01:42.196 --> 00:01:47.486
Here's a first look at
what AVCaptureView looks

33
00:01:47.486 --> 00:01:48.516
like on OS X.

34
00:01:48.986 --> 00:01:52.086
It's a standardized UI for
capture and it's built on top

35
00:01:52.086 --> 00:01:53.756
of AV Foundation's
capture classes.

36
00:01:53.756 --> 00:01:58.256
If it looks similar to QuickTime
Player 10, that's no mistake.

37
00:01:58.256 --> 00:02:01.256
It's QuickTime Player 10
actually uses an AVCaptureView

38
00:01:58.256 --> 00:02:01.256
It's QuickTime Player 10
actually uses an AVCaptureView

39
00:02:01.386 --> 00:02:02.166
in Yosemite.

40
00:02:03.016 --> 00:02:06.056
Let's take a quick look
around the feature set.

41
00:02:06.856 --> 00:02:11.736
It provides a nice HUD
with standard UI for record

42
00:02:11.736 --> 00:02:15.556
and volume controls and
an optional drop down menu

43
00:02:15.626 --> 00:02:17.696
for audio and video
capture device picking.

44
00:02:18.176 --> 00:02:21.036
Now, for a quick refresher

45
00:02:21.036 --> 00:02:23.466
on how AVFoundation's
capture classes work.

46
00:02:23.916 --> 00:02:25.996
At the center of our
capture universe is an AV

47
00:02:25.996 --> 00:02:26.916
capture session.

48
00:02:27.546 --> 00:02:29.806
That's the object that you
tell to start and stop running.

49
00:02:30.426 --> 00:02:32.356
It doesn't do anything
very interesting, however,

50
00:02:32.356 --> 00:02:33.836
until you provide
it with some input.

51
00:02:34.676 --> 00:02:36.816
We represent these
as AVCaptureInputs.

52
00:02:36.816 --> 00:02:41.256
Here I have an AVCapture camera
and a microphone as devices

53
00:02:42.326 --> 00:02:43.846
and the data needs
to flow somewhere.

54
00:02:43.916 --> 00:02:46.696
And we represent these
as AVCaptureOutputs.

55
00:02:46.806 --> 00:02:50.076
Here I have a concrete
AVCaptureMovieFileOutput,

56
00:02:50.416 --> 00:02:52.036
which is used for
writing movie files.

57
00:02:52.826 --> 00:02:56.366
The connections from inputs to
outputs flow through the session

58
00:02:56.756 --> 00:02:57.546
and are referred

59
00:02:57.546 --> 00:03:00.006
to as AVCaptureConnections
in our API set.

60
00:02:57.546 --> 00:03:00.006
to as AVCaptureConnections
in our API set.

61
00:03:00.606 --> 00:03:03.226
Now, let's refer all this
back to the new AVCaptureView.

62
00:03:03.486 --> 00:03:04.356
How does that all work?

63
00:03:05.356 --> 00:03:07.666
Well, in the default
case, the simple case,

64
00:03:09.156 --> 00:03:12.536
you just instantiate an
AVCaptureView and all

65
00:03:12.536 --> 00:03:14.376
of this is taken
care of for you.

66
00:03:14.626 --> 00:03:16.696
You either instantiate it
or drop it into your NIB

67
00:03:16.696 --> 00:03:19.606
and it will manage that
AVCapture session for you.

68
00:03:20.146 --> 00:03:22.936
All you need to do is implement
a single delegate method

69
00:03:23.226 --> 00:03:25.866
to make recording work
and it looks like this.

70
00:03:26.356 --> 00:03:28.966
There's a single
method, which gets called

71
00:03:29.116 --> 00:03:30.936
when someone clicks
on the Record button.

72
00:03:31.796 --> 00:03:35.206
In the simple case all you need
do is pass the file output,

73
00:03:35.776 --> 00:03:36.466
the call

74
00:03:36.466 --> 00:03:39.286
to startRecordingToOutputFile
and you're done.

75
00:03:39.716 --> 00:03:41.776
You have a fully
functioning recording UI.

76
00:03:43.596 --> 00:03:45.476
The second case is the custom

77
00:03:45.996 --> 00:03:48.396
or slightly more
complicated mode of running.

78
00:03:49.016 --> 00:03:51.416
In this mode of running
you provide your own

79
00:03:51.416 --> 00:03:54.276
AVCaptureSession
configured to your liking.

80
00:03:54.816 --> 00:03:57.726
So, you could set it with a
custom AVCaptureSession preset,

81
00:03:57.786 --> 00:04:00.946
a custom frame rate,
anything that you'd like.

82
00:03:57.786 --> 00:04:00.946
a custom frame rate,
anything that you'd like.

83
00:04:01.456 --> 00:04:04.286
AVCaptureView will
still manage the inputs

84
00:04:04.286 --> 00:04:08.416
for you and provide the UI.

85
00:04:08.616 --> 00:04:09.966
That's it for AVCaptureView.

86
00:04:09.966 --> 00:04:13.106
Let's move on to a great new
feature called iOS Screen

87
00:04:13.106 --> 00:04:15.166
Recording on OS X.

88
00:04:15.446 --> 00:04:16.596
Try to wrap your
brain around that.

89
00:04:18.386 --> 00:04:22.166
New in Yosemite you can plug
your iPhone or iOS device

90
00:04:22.266 --> 00:04:25.956
into a Mac and it shows
up as a selectable camera.

91
00:04:26.936 --> 00:04:29.256
So, you can do stuff like
this in QuickTime Player.

92
00:04:29.546 --> 00:04:30.976
You have the standard
recording UI.

93
00:04:31.516 --> 00:04:35.546
[ Applause ]

94
00:04:36.046 --> 00:04:37.746
And you can record what's
happening on your iOS screen

95
00:04:37.746 --> 00:04:40.496
and then you can publish
for instance a how-to video,

96
00:04:41.516 --> 00:04:44.066
give something to your mom to
show her how to do something

97
00:04:44.646 --> 00:04:48.746
or you can do an app
preview, which we'll talk

98
00:04:48.746 --> 00:04:49.426
about more in a minute.

99
00:04:49.966 --> 00:04:51.796
There are some special
considerations, however.

100
00:04:52.406 --> 00:04:54.946
First of all, iOS
devices are presented

101
00:04:54.946 --> 00:04:58.376
as CoreMedia IO DAL
plug-ins the same way

102
00:04:58.376 --> 00:05:00.876
as any third party
camera interface.

103
00:04:58.376 --> 00:05:00.876
as any third party
camera interface.

104
00:05:01.696 --> 00:05:03.116
But, we consider them special,

105
00:05:03.116 --> 00:05:06.096
because they're really a screen
grabbing device not a live

106
00:05:06.146 --> 00:05:06.766
camera feed.

107
00:05:07.156 --> 00:05:08.846
So, we don't want to
confuse shipping apps

108
00:05:08.876 --> 00:05:12.736
by having this weird camera show
up suddenly and unexpectedly.

109
00:05:13.016 --> 00:05:15.726
Therefore, you need to opt
in to get this behavior

110
00:05:15.816 --> 00:05:20.106
to see iOS devices as
AVCapture devices in your app

111
00:05:20.106 --> 00:05:21.206
and this is how you do it.

112
00:05:21.486 --> 00:05:23.106
There's a single property
call that you make

113
00:05:23.466 --> 00:05:26.776
on the CoreMedia IO
system object telling it

114
00:05:26.816 --> 00:05:29.336
to allow screen capture devices.

115
00:05:29.786 --> 00:05:32.176
Once you've opted in, if
you iterate through the list

116
00:05:32.176 --> 00:05:35.626
of AVCapture devices you'll
find your iOS devices there.

117
00:05:35.626 --> 00:05:40.436
And as you plug them in or
unplug them they'll come and go.

118
00:05:41.186 --> 00:05:44.666
There is in fact, a whole
session devoted to this topic

119
00:05:44.896 --> 00:05:47.776
and its tomorrow at
3:15 in Russian Hill.

120
00:05:48.666 --> 00:05:50.636
Also, if you'd like to
learn more specifically

121
00:05:50.636 --> 00:05:53.246
about how the DAL part
works, we invite you to come

122
00:05:53.246 --> 00:05:56.376
and visit us in the labs.

123
00:05:56.376 --> 00:05:57.756
All right, that's
it for Yosemite.

124
00:05:57.826 --> 00:06:00.726
Let's move on to our iOS
8 Capture Enhancements.

125
00:05:57.826 --> 00:06:00.726
Let's move on to our iOS
8 Capture Enhancements.

126
00:06:01.646 --> 00:06:05.026
First up, machine-readable
codes aka barcodes.

127
00:06:05.756 --> 00:06:07.276
Last year we introduced support

128
00:06:07.276 --> 00:06:09.856
for barcode detection during
real-time video capture

129
00:06:10.296 --> 00:06:13.236
and we support a long list of
bar codes as you can see here.

130
00:06:14.716 --> 00:06:17.896
In iOS 8 we're supporting
three new symbology types,

131
00:06:18.026 --> 00:06:21.956
Data Matrix, Interleaved
2 of 5 and ITF14.

132
00:06:24.086 --> 00:06:27.666
Next up, we're continuing
with our efforts

133
00:06:27.666 --> 00:06:30.046
to provide greater
transparency to users.

134
00:06:30.496 --> 00:06:33.006
If you'll recall in iOS
7, for the first time,

135
00:06:33.076 --> 00:06:34.886
these dialogues showed up.

136
00:06:35.346 --> 00:06:36.816
The first time your app tries

137
00:06:36.846 --> 00:06:39.596
to use the microphone you
get the microphone dialogue

138
00:06:40.296 --> 00:06:43.066
and in some regions the
first time your app attempts

139
00:06:43.066 --> 00:06:45.736
to use the camera, it would
show the second dialogue.

140
00:06:46.186 --> 00:06:47.956
We only showed that
dialogue in regions

141
00:06:47.956 --> 00:06:49.496
where it was required by law.

142
00:06:50.106 --> 00:06:53.366
In iOS 8, however, we're
requiring user consent

143
00:06:53.486 --> 00:06:55.866
to use the camera or
mic in all regions.

144
00:06:55.956 --> 00:06:59.226
A couple of reasons for that,
it's a good thing for you

145
00:06:59.226 --> 00:07:02.186
as developers, because you
get a more consistent behavior

146
00:06:59.226 --> 00:07:02.186
as developers, because you
get a more consistent behavior

147
00:07:02.426 --> 00:07:03.986
across all regions.

148
00:07:03.986 --> 00:07:05.266
It's easier to debug your code.

149
00:07:05.706 --> 00:07:08.456
And for us it's great, because
we have a more consistent

150
00:07:08.456 --> 00:07:10.496
platform experience
and people feel

151
00:07:10.496 --> 00:07:12.556
like their privacy
is being respected.

152
00:07:13.726 --> 00:07:16.206
You can refer back to
last year's session 610

153
00:07:16.386 --> 00:07:18.906
for coding examples of how
to deal with these dialogues.

154
00:07:20.536 --> 00:07:22.816
All right, I hope you
enjoyed the appetizer,

155
00:07:22.816 --> 00:07:24.976
because it's time
for the main course.

156
00:07:25.496 --> 00:07:29.606
We've done this for
four years now, I think.

157
00:07:29.606 --> 00:07:31.376
AVFoundation came
out four years ago.

158
00:07:31.376 --> 00:07:34.476
And so for four years you've
been coming to the labs.

159
00:07:34.476 --> 00:07:37.296
You've been talking to us,
filing enhancement requests,

160
00:07:37.296 --> 00:07:39.726
filing bug reports and
we read all of them.

161
00:07:39.726 --> 00:07:41.376
There have been some
really interesting

162
00:07:41.376 --> 00:07:41.976
enhancement requests.

163
00:07:49.156 --> 00:07:51.276
In fact, there have been a
lot of enhancement requests.

164
00:07:52.186 --> 00:07:58.446
No, like a lot of enhancement
requests and it turns out a lot

165
00:07:58.446 --> 00:08:01.526
of you want the same
things and we listen.

166
00:07:58.446 --> 00:08:01.526
of you want the same
things and we listen.

167
00:08:01.766 --> 00:08:03.566
We read all of those bug reports

168
00:08:03.746 --> 00:08:06.456
and so we know what the
majority of you want.

169
00:08:07.686 --> 00:08:11.676
Your top two feature
requests were direct access

170
00:08:11.676 --> 00:08:15.406
to the H.264 video encoder
during real-time capture

171
00:08:15.736 --> 00:08:17.636
and manual camera controls.

172
00:08:18.136 --> 00:08:19.976
Good news, you're getting
both of them in iOS 8.

173
00:08:20.516 --> 00:08:26.026
[ Applause ]

174
00:08:26.526 --> 00:08:28.376
So, H.264 video encoder.

175
00:08:29.256 --> 00:08:30.956
We're introducing
support for access

176
00:08:30.986 --> 00:08:34.566
to the hardware H.264 video
encoder via the video toolbox

177
00:08:34.566 --> 00:08:36.856
APIs, which have already
been available on Mac OS X,

178
00:08:37.176 --> 00:08:39.066
but now they're available
on iOS as well.

179
00:08:39.616 --> 00:08:41.686
What this means for you
as a capture client is

180
00:08:41.686 --> 00:08:43.796
if you're using a video
data output you get

181
00:08:43.796 --> 00:08:44.846
uncompressed buffers.

182
00:08:44.846 --> 00:08:46.036
Now, you can compress them.

183
00:08:46.476 --> 00:08:50.256
You can do I-frame
insertion, bitrate adjustment,

184
00:08:50.256 --> 00:08:52.006
choose what kind
of GOPs you want,

185
00:08:52.156 --> 00:08:54.316
a whole lot of features
at your disposal.

186
00:08:55.716 --> 00:08:58.336
There is in fact, too much
to talk about at one session

187
00:08:58.336 --> 00:09:02.426
so we're going to do it again
tomorrow, Thursday 11:30

188
00:08:58.336 --> 00:09:02.426
so we're going to do it again
tomorrow, Thursday 11:30

189
00:09:02.426 --> 00:09:05.826
where we'll just talk about the
specifics of H.264 encoding.

190
00:09:06.426 --> 00:09:09.246
Don't miss it.

191
00:09:09.516 --> 00:09:12.306
Now onto the meat of the matter,
which is manual camera controls.

192
00:09:12.866 --> 00:09:16.596
Our aim here is nothing short of
making iOS the premier platform

193
00:09:16.886 --> 00:09:18.746
for computational
and pro photography.

194
00:09:19.386 --> 00:09:24.456
Now, when I say manual
controls what does that evoke?

195
00:09:24.456 --> 00:09:26.006
What sort of picture
comes to your mind?

196
00:09:26.676 --> 00:09:29.886
Is it something like this,

197
00:09:31.876 --> 00:09:34.106
lots of dangerous
looking knobs and buttons?

198
00:09:35.566 --> 00:09:36.076
Well, it's true.

199
00:09:36.076 --> 00:09:38.046
Manual camera controls
aren't for everyone.

200
00:09:38.496 --> 00:09:41.906
It's the age-old problem,
automatic versus manual.

201
00:09:42.346 --> 00:09:45.406
Well, our automatic controls
work great for most apps

202
00:09:45.776 --> 00:09:47.956
and manual controls
offer a greater degree

203
00:09:47.956 --> 00:09:50.586
of creative control and
more freedom to experiment.

204
00:09:51.176 --> 00:09:53.716
But, with great power
comes great responsibility.

205
00:09:53.926 --> 00:09:57.026
So, while we're providing the
power you must provide the

206
00:09:57.026 --> 00:09:58.906
responsibility and
the common sense.

207
00:09:59.476 --> 00:10:01.716
The manual shifter sure
makes for a fun drive,

208
00:09:59.476 --> 00:10:01.716
The manual shifter sure
makes for a fun drive,

209
00:10:01.936 --> 00:10:04.546
but it's not going to prevent
you from going from second gear

210
00:10:04.546 --> 00:10:06.806
into fifth or forgetting
to push the clutch in

211
00:10:06.806 --> 00:10:07.836
and grinding your gears.

212
00:10:08.056 --> 00:10:08.956
You see where I'm
going with that.

213
00:10:10.816 --> 00:10:13.286
All right, we're going to talk
about four things in particular,

214
00:10:13.546 --> 00:10:18.196
focus, exposure, exposure
compensation and white balance.

215
00:10:20.006 --> 00:10:23.786
Again, referring to our
diagram of AVCapture objects all

216
00:10:23.786 --> 00:10:25.866
of the manual control
APIs I'm going to talk

217
00:10:25.866 --> 00:10:26.826
about are implemented

218
00:10:26.826 --> 00:10:29.456
in a single class,
the AVCaptureDevice.

219
00:10:29.976 --> 00:10:32.786
First up is manual focus.

220
00:10:34.476 --> 00:10:37.376
Focus refers to the sharpness
of objects in the frame

221
00:10:37.956 --> 00:10:39.966
and we have a great
autofocus mechanism.

222
00:10:40.336 --> 00:10:44.246
Its job is to try to keep the
most important things sharp.

223
00:10:44.646 --> 00:10:47.016
But, with manual focus you've
got some more creative control.

224
00:10:47.346 --> 00:10:50.586
For instance, you could allow
a pro photographer to soften

225
00:10:50.586 --> 00:10:54.566
up the image such as right here
or do a dramatic focus pull.

226
00:10:55.026 --> 00:10:56.336
You as a developer might want

227
00:10:56.336 --> 00:10:58.546
to develop your own
focus stacking algorithm,

228
00:10:58.546 --> 00:11:01.266
so you can pull different
objects in and out of focus.

229
00:10:58.546 --> 00:11:01.266
so you can pull different
objects in and out of focus.

230
00:11:02.006 --> 00:11:05.566
If you're a scientist or a
writer of medical applications,

231
00:11:05.926 --> 00:11:06.406
you might want

232
00:11:06.406 --> 00:11:08.376
to programmatically
move the lens position

233
00:11:08.376 --> 00:11:10.096
around for experiments.

234
00:11:11.306 --> 00:11:12.436
Here's how it works.

235
00:11:12.926 --> 00:11:15.486
You've got a subject, here
it's the candle on the left

236
00:11:16.226 --> 00:11:17.826
and you've got a
sensor on the right.

237
00:11:18.456 --> 00:11:21.596
In the middle there's a lens
and the job of the lens is

238
00:11:21.596 --> 00:11:24.226
to focus light rays
onto the sensor.

239
00:11:24.876 --> 00:11:27.906
Focus is altered by
moving the lens nearer

240
00:11:27.906 --> 00:11:29.446
or farther from the sensor.

241
00:11:29.916 --> 00:11:32.116
And the farther the
lens is from the sensor,

242
00:11:32.506 --> 00:11:34.146
distant objects look sharper.

243
00:11:34.296 --> 00:11:35.436
So, here we've got a problem.

244
00:11:35.776 --> 00:11:37.236
The candle image is blurry

245
00:11:37.566 --> 00:11:40.036
because our lens is focusing
light rays from the candle

246
00:11:40.336 --> 00:11:41.396
in front of the sensor.

247
00:11:41.956 --> 00:11:45.246
But, as we move the lens
closer to the sensor we see

248
00:11:45.246 --> 00:11:46.746
that the candle image
becomes sharp,

249
00:11:46.746 --> 00:11:48.906
because the light rays
converge in the right place.

250
00:11:50.676 --> 00:11:52.546
Now, let's talk a
few focus terms.

251
00:11:53.436 --> 00:11:54.796
First is depth of field.

252
00:11:55.616 --> 00:11:58.456
This is the distance between
the nearest and farthest objects

253
00:11:58.456 --> 00:12:00.476
that can be judged
to be in focus.

254
00:11:58.456 --> 00:12:00.476
that can be judged
to be in focus.

255
00:12:01.036 --> 00:12:04.276
At the near end we have
what's called macro

256
00:12:04.676 --> 00:12:08.066
and that's the closest distance
at which the lens can focus.

257
00:12:08.176 --> 00:12:10.516
At the far end is infinity.

258
00:12:11.906 --> 00:12:15.436
Somewhere in between there is
a sweet spot called hyperfocal

259
00:12:15.436 --> 00:12:18.236
distance and that's the distance

260
00:12:18.286 --> 00:12:20.686
that maximizes your
depth of field.

261
00:12:21.126 --> 00:12:23.746
Because if you find this
position and focus there,

262
00:12:24.036 --> 00:12:26.326
everything from infinity to half

263
00:12:26.326 --> 00:12:30.336
of the hyperfocal distance
is going to be sharp.

264
00:12:30.476 --> 00:12:31.976
The last is lens position

265
00:12:32.036 --> 00:12:33.836
and that's what makes
all this magic happen.

266
00:12:34.236 --> 00:12:37.136
When you move the lens position
you are moving the distance

267
00:12:37.136 --> 00:12:40.166
of the lens from the sensor
and therefore altering focus.

268
00:12:41.346 --> 00:12:42.146
Now, quickly let's talk

269
00:12:42.146 --> 00:12:44.746
about what you can do
already in iOS 7 and earlier.

270
00:12:45.616 --> 00:12:48.846
We provide great automatic
controls in a AVCaptureDevice.

271
00:12:49.136 --> 00:12:53.386
Three modes: locked,
one shot autofocus,

272
00:12:53.456 --> 00:12:56.636
which sweeps the lens
position through all ranges

273
00:12:56.636 --> 00:12:58.786
until it finds sharp focus
and then parks it there.

274
00:12:59.636 --> 00:13:02.506
And continuous autofocus,
which gives the camera freedom

275
00:12:59.636 --> 00:13:02.506
And continuous autofocus,
which gives the camera freedom

276
00:13:02.506 --> 00:13:05.296
to refocus anytime it
thinks the scene has become

277
00:13:05.296 --> 00:13:06.266
sufficiently blurry.

278
00:13:07.576 --> 00:13:14.376
We also provide, there
we go, a focus point

279
00:13:14.376 --> 00:13:15.746
of interest, which is settable.

280
00:13:15.836 --> 00:13:18.156
It lets you tap to focus
on a particular area

281
00:13:18.576 --> 00:13:20.406
so that it becomes sharp.

282
00:13:20.406 --> 00:13:23.806
And you can also know
when the lens is moving

283
00:13:23.986 --> 00:13:27.146
by key value observing the
isAdjustingFocus property.

284
00:13:28.096 --> 00:13:31.036
Last year we offered
some specialty modifiers

285
00:13:31.036 --> 00:13:31.926
for autofocus.

286
00:13:33.196 --> 00:13:36.756
The first is range restriction
and that hints the AF algorithm

287
00:13:36.756 --> 00:13:38.886
to limit its search
to a particular range.

288
00:13:39.866 --> 00:13:43.016
The near range is good if you
have something that only wants

289
00:13:43.016 --> 00:13:44.636
to search up close,
for instance,

290
00:13:44.676 --> 00:13:46.216
a barcode scanning app.

291
00:13:46.696 --> 00:13:49.806
We also have the far
range, which is good

292
00:13:49.806 --> 00:13:53.846
for distant objects such
as oh, barcodes painted

293
00:13:53.846 --> 00:13:54.716
on the sides of buildings.

294
00:13:55.666 --> 00:14:00.356
And then finally we have smooth
autofocus, which is a modifier

295
00:13:55.666 --> 00:14:00.356
And then finally we have smooth
autofocus, which is a modifier

296
00:14:00.356 --> 00:14:03.176
that slows down the AF
algorithm and steps it

297
00:14:03.176 --> 00:14:06.406
in smaller increments so that it
avoids the throbbing artifacts

298
00:14:06.466 --> 00:14:08.876
that you don't want to see
when you're recording a video.

299
00:14:10.236 --> 00:14:14.556
Now, new in iOS 8 we
allow full manual control

300
00:14:14.556 --> 00:14:18.026
of the lens position when you're
locking focus and we allow you

301
00:14:18.026 --> 00:14:20.516
to key value observe
the exact lens position

302
00:14:20.566 --> 00:14:22.246
at any time, in any focus mode.

303
00:14:23.356 --> 00:14:26.506
But, I think a demo is worth a
thousand words so let me call

304
00:14:26.506 --> 00:14:28.986
up Aparna from the
Camera Software Team

305
00:14:28.986 --> 00:14:29.556
to give you a demo.

306
00:14:29.556 --> 00:14:29.976
Take it away, Aparna.

307
00:14:30.516 --> 00:14:34.576
[ Applause ]

308
00:14:35.076 --> 00:14:35.666
>> Thanks Brad.

309
00:14:36.196 --> 00:14:36.956
Hi everyone.

310
00:14:36.956 --> 00:14:37.466
I'm Aparna.

311
00:14:37.686 --> 00:14:39.626
I'm an engineer in the
Camera Software Team.

312
00:14:39.626 --> 00:14:41.726
I'm very excited to be
here and show the demo

313
00:14:41.726 --> 00:14:43.006
for manual focus control.

314
00:14:43.006 --> 00:14:46.576
So, I have the app on here

315
00:14:46.576 --> 00:14:48.996
and there are two
modes, auto unlock.

316
00:14:48.996 --> 00:14:50.716
The auto is same as today,

317
00:14:51.026 --> 00:14:54.776
but I have the lens position
slider here whose values are

318
00:14:54.776 --> 00:14:56.816
updated based on the key values

319
00:14:56.816 --> 00:14:59.666
for the lens position
property during the autofocus.

320
00:15:00.446 --> 00:15:05.276
So, as you can see I'm trying
to focus on this flower here.

321
00:15:05.276 --> 00:15:06.936
The lens position is changing.

322
00:15:07.336 --> 00:15:12.906
Now, if I want to focus at Brad
here, I have to move my phone

323
00:15:13.306 --> 00:15:15.066
and bring Brad in focus.

324
00:15:16.106 --> 00:15:19.256
Now, let me switch to
the new Locked mode.

325
00:15:19.256 --> 00:15:21.546
Here I have full control
on the lens position

326
00:15:21.826 --> 00:15:23.376
so I can move my slider

327
00:15:23.376 --> 00:15:25.756
and bring my target
of interest in focus.

328
00:15:26.366 --> 00:15:30.266
So, I am going to move the
slider here and frame a scene

329
00:15:30.266 --> 00:15:35.396
with Brad in focus
and I can take a shot

330
00:15:35.396 --> 00:15:38.276
and I can change
the slider position,

331
00:15:38.276 --> 00:15:42.476
I mean the lens position and
bring the flower in focus.

332
00:15:42.916 --> 00:15:45.976
So, that's manual focus
control in iOS 8, thank you.

333
00:15:46.516 --> 00:15:52.276
[ Applause ]

334
00:15:52.776 --> 00:15:53.726
>> Great, thank you Aparna.

335
00:15:55.586 --> 00:15:56.906
That magic was all provided

336
00:15:56.906 --> 00:15:59.776
for by this magical
lensPosition property,

337
00:15:59.776 --> 00:16:02.076
which was being key-value
observed and that's how you saw

338
00:15:59.776 --> 00:16:02.076
which was being key-value
observed and that's how you saw

339
00:16:02.076 --> 00:16:04.516
that slider flying all over
the place every time the lens

340
00:16:04.516 --> 00:16:05.046
was moving.

341
00:16:05.896 --> 00:16:07.646
It's a key-value
observable property

342
00:16:08.376 --> 00:16:11.836
and its range is
from zero to one.

343
00:16:12.216 --> 00:16:16.226
Zero means macro or the
closest that the lens can focus.

344
00:16:17.236 --> 00:16:20.376
One means completely
stretched out or the farthest

345
00:16:20.376 --> 00:16:23.486
that it can park,
which may be infinity

346
00:16:23.486 --> 00:16:26.266
or it may be beyond infinity
and we'll talk about that later.

347
00:16:28.676 --> 00:16:31.746
Instead of a simple setter
property AVCaptureDevice

348
00:16:31.776 --> 00:16:33.376
provides a compound setter,

349
00:16:34.396 --> 00:16:37.276
setFocusModeLocked
WithLensPosition

350
00:16:37.546 --> 00:16:38.366
completionHandler.

351
00:16:38.496 --> 00:16:41.106
That's a mouthful, but it
does three important things.

352
00:16:41.746 --> 00:16:44.766
It locks focus at an
explicit lens position

353
00:16:45.456 --> 00:16:48.796
and it calls you back when
the command has completed

354
00:16:49.136 --> 00:16:51.086
and it does so with a timestamp.

355
00:16:51.606 --> 00:16:53.976
And that sync time is
the presentation time

356
00:16:54.336 --> 00:16:56.816
of the first video frame,
which reflects your change.

357
00:16:57.156 --> 00:16:58.846
This is far superior

358
00:16:58.846 --> 00:17:00.936
to the adjusting focus
key-value observation

359
00:16:58.846 --> 00:17:00.936
to the adjusting focus
key-value observation

360
00:17:00.936 --> 00:17:02.286
because you know exactly

361
00:17:02.586 --> 00:17:05.316
which frame you can
synchronize this with.

362
00:17:06.376 --> 00:17:09.866
Now, the sync time is
on the timeline or clock

363
00:17:09.866 --> 00:17:11.246
of the AVCaptureDevice.

364
00:17:11.626 --> 00:17:14.695
That's important, because if
you're going to synchronize it

365
00:17:14.695 --> 00:17:17.136
with things coming out of
an output you will need

366
00:17:17.136 --> 00:17:19.246
to sync the time to
a different clock.

367
00:17:19.726 --> 00:17:22.506
AVCaptureVideoDataOutput
buffers are going to be

368
00:17:22.506 --> 00:17:25.896
on the AVCapture session's
master clocks timeline.

369
00:17:26.715 --> 00:17:30.066
The way you would do it is
by using CMSync services.

370
00:17:30.406 --> 00:17:34.356
Here I've taken the time
provided and the master clock

371
00:17:34.426 --> 00:17:37.436
from the session and I call
CMSyncConvertTime to go

372
00:17:37.436 --> 00:17:40.246
from the device clock
to the master clock

373
00:17:40.396 --> 00:17:42.706
and now I have my
synchronization point

374
00:17:42.776 --> 00:17:43.706
for output buffers.

375
00:17:45.966 --> 00:17:48.836
Next, there's a special
lens position parameter

376
00:17:48.836 --> 00:17:51.406
that you can pass to that
setter called current.

377
00:17:51.496 --> 00:17:55.426
And what that does is say I want
you to set the lens position

378
00:17:55.426 --> 00:17:57.216
to exactly where it is right now

379
00:17:57.346 --> 00:17:58.426
and then tell me
when you're done.

380
00:17:58.936 --> 00:18:00.846
So, it will lock it in
the position where it is,

381
00:17:58.936 --> 00:18:00.846
So, it will lock it in
the position where it is,

382
00:18:00.846 --> 00:18:03.036
but it does so without
avoiding race conditions.

383
00:18:03.406 --> 00:18:06.176
Imagine if you tried to get the
lens position and then set it.

384
00:18:06.726 --> 00:18:08.116
Well, if the lens is moving

385
00:18:08.116 --> 00:18:09.606
at the time you may
have actually set it

386
00:18:09.606 --> 00:18:11.916
to the wrong point, because
it will now jump back

387
00:18:11.916 --> 00:18:13.056
to an undesired position.

388
00:18:14.556 --> 00:18:16.136
So, the following
two are equivalent.

389
00:18:16.766 --> 00:18:19.556
If you set it with the new
flavor using the current

390
00:18:19.616 --> 00:18:22.746
property and no
completionHandler it's the same

391
00:18:22.746 --> 00:18:24.506
as calling the old
focus mode locked.

392
00:18:25.946 --> 00:18:29.346
Now, why did we choose to
go with unit-less values,

393
00:18:29.566 --> 00:18:32.436
scalar values from zero
one rather than a distance

394
00:18:32.436 --> 00:18:33.516
in meters, for instance?

395
00:18:34.146 --> 00:18:36.286
The reason lies in
our implementation

396
00:18:36.346 --> 00:18:38.016
on focus on iOS devices.

397
00:18:38.426 --> 00:18:41.446
The lens is physically moved
with a spring and a magnet.

398
00:18:42.776 --> 00:18:45.126
That means that there is
some hysteresis involved

399
00:18:45.126 --> 00:18:49.186
when it moves, or bounce, and
that bounce prevents precise,

400
00:18:49.186 --> 00:18:51.816
repeatable positioning
at a particular distance.

401
00:18:52.346 --> 00:18:54.396
And also, that means

402
00:18:54.426 --> 00:18:56.576
that gravity will
affect spring stretch.

403
00:18:56.606 --> 00:18:59.326
So, a lens position of
.5 will be different

404
00:18:59.326 --> 00:19:03.826
if you're pointing it straight
out versus up versus down.

405
00:18:59.326 --> 00:19:03.826
if you're pointing it straight
out versus up versus down.

406
00:19:04.436 --> 00:19:07.676
Also, the lens position distance
may vary from device to device

407
00:19:07.756 --> 00:19:10.056
or over time as the
spring stretches out more.

408
00:19:10.466 --> 00:19:12.006
For all these reasons,
we chose to go

409
00:19:12.006 --> 00:19:15.656
with the scalar value instead
of an absolute distance.

410
00:19:15.976 --> 00:19:17.936
And I'd like to caution
you to not try

411
00:19:17.936 --> 00:19:20.696
to correlate lens position
with a particular distance,

412
00:19:20.726 --> 00:19:22.496
because as I said,
it changes depending

413
00:19:22.496 --> 00:19:25.746
on gravity and other factors.

414
00:19:26.776 --> 00:19:30.176
Next up is how to help
users achieve sharp focus.

415
00:19:31.136 --> 00:19:33.626
One inherent problem with having
a small device is is it has a

416
00:19:33.626 --> 00:19:34.476
small screen

417
00:19:34.866 --> 00:19:38.176
and AVCaptureVideoPreviewLayer
is not at the resolution

418
00:19:38.176 --> 00:19:40.676
of the buffers that you're
getting from the camera usually.

419
00:19:40.996 --> 00:19:43.636
It's at screen resolution
meaning that it's scaled down.

420
00:19:44.046 --> 00:19:47.366
So, how can you help people
know if they're in good focus?

421
00:19:47.366 --> 00:19:52.466
A couple possible techniques,
you could zoom the AV cap-

422
00:19:52.466 --> 00:19:55.026
using AVCaptureDevice you could
zoom the video preview layer

423
00:19:55.026 --> 00:19:58.116
up so that people
can see larger pixels

424
00:19:58.116 --> 00:19:59.266
and make a better decision

425
00:20:00.106 --> 00:20:03.326
or if you're using a video data
output you're getting the buffer

426
00:20:03.326 --> 00:20:05.336
so you could compute
your own focus score

427
00:20:05.666 --> 00:20:07.786
and then highlight the
areas that are sharp.

428
00:20:07.956 --> 00:20:08.976
That's sometimes
called focus peaking.

429
00:20:09.076 --> 00:20:13.696
That's it for our first
third of manual controls,

430
00:20:13.696 --> 00:20:15.366
now onto manual exposure.

431
00:20:17.816 --> 00:20:20.206
Exposure refers to the
brightness of an image,

432
00:20:20.566 --> 00:20:24.616
which means how much light hits
the sensor and for how long.

433
00:20:25.586 --> 00:20:28.616
Our auto exposure tries really
hard to keep the scene well lit.

434
00:20:28.816 --> 00:20:29.476
That's its job.

435
00:20:30.076 --> 00:20:33.326
With manual exposure again
you've got some more freedom.

436
00:20:33.326 --> 00:20:35.566
You can go for a more
stylized look like here.

437
00:20:35.926 --> 00:20:39.416
You could go for instance, from
something unrealistically bright

438
00:20:39.896 --> 00:20:43.346
to something kind of ghostly
dark or somewhere in between.

439
00:20:43.456 --> 00:20:44.986
You could get some motion blur.

440
00:20:45.226 --> 00:20:46.486
You could provide some grain.

441
00:20:47.546 --> 00:20:49.226
Manual exposure also allows you

442
00:20:49.226 --> 00:20:52.466
to devise your own alternate
auto exposure algorithm

443
00:20:52.526 --> 00:20:53.776
to Apple's if you prefer.

444
00:20:55.386 --> 00:20:58.486
Now, when talking about exposure
you have to draw a triangle.

445
00:20:58.626 --> 00:20:59.716
That's the way we do things.

446
00:21:00.276 --> 00:21:01.986
There are three components
to exposure

447
00:21:02.506 --> 00:21:08.436
and they are shutter speed,
ISO and lens aperture.

448
00:21:10.216 --> 00:21:11.296
First up, shutter speed.

449
00:21:12.296 --> 00:21:15.006
Shutter speed is the length
of the time that shutter-

450
00:21:15.006 --> 00:21:16.646
that the shutter is
open to let light in.

451
00:21:16.856 --> 00:21:18.956
In a conventional camera
there is a physical shutter,

452
00:21:19.206 --> 00:21:21.446
which opens and for all
the time that it's open,

453
00:21:21.446 --> 00:21:23.966
it's letting light into
that dark room and then

454
00:21:24.136 --> 00:21:26.516
when it closes that's
all the light you get.

455
00:21:26.876 --> 00:21:27.726
So, looking at the picture

456
00:21:27.726 --> 00:21:30.006
on the left you see
a short exposure.

457
00:21:30.416 --> 00:21:33.336
It lets in less light, because
it's open for less time,

458
00:21:33.746 --> 00:21:34.816
but the image is crisp.

459
00:21:35.036 --> 00:21:38.106
The motion is crisp compared
to the image on the left,

460
00:21:38.426 --> 00:21:43.396
which lets in more light so it
has the- it can be brighter.

461
00:21:43.966 --> 00:21:46.346
But, it also lets
in more motion blur,

462
00:21:46.346 --> 00:21:47.496
because it's open for longer.

463
00:21:48.206 --> 00:21:51.246
Long exposures are great for
photographing stationary scenes

464
00:21:51.246 --> 00:21:54.356
in low light, but they're not
so good when shooting things

465
00:21:54.356 --> 00:21:56.416
that move around a lot
like, say, my kids.

466
00:21:57.596 --> 00:22:00.146
Shutter speed is
measured in seconds.

467
00:21:57.596 --> 00:22:00.146
Shutter speed is
measured in seconds.

468
00:22:00.716 --> 00:22:03.726
The second one is ISO and
that's a borrowed term

469
00:22:03.926 --> 00:22:06.326
from film photography if
you've ever done that.

470
00:22:06.676 --> 00:22:08.146
It refers to the sensitivity

471
00:22:08.146 --> 00:22:09.986
of the chemicals in
the film to light.

472
00:22:10.576 --> 00:22:13.286
So, a higher ISO film
is more sensitive

473
00:22:13.286 --> 00:22:14.736
to light than a low ISO film.

474
00:22:15.536 --> 00:22:19.396
And as you can see from the
higher ISO image a higher ISO

475
00:22:19.396 --> 00:22:21.176
number means it's
going to be brighter.

476
00:22:21.286 --> 00:22:22.256
It's more sensitive.

477
00:22:22.746 --> 00:22:26.706
But, it does that at the cost
of introducing some noise

478
00:22:26.706 --> 00:22:29.146
or grain into the photo.

479
00:22:29.146 --> 00:22:31.906
So, as you can see
in the cloth flower

480
00:22:31.906 --> 00:22:34.796
on the right there is definitely
more grain to the image,

481
00:22:35.136 --> 00:22:39.426
more noise compared to
the one on the left.

482
00:22:39.896 --> 00:22:41.146
The third component of-

483
00:22:41.206 --> 00:22:43.586
in the exposure triangle
is lens aperture.

484
00:22:44.556 --> 00:22:46.326
It's the size of
the lens opening,

485
00:22:46.326 --> 00:22:48.516
meaning how much can
it physically open

486
00:22:48.516 --> 00:22:50.166
to let more light in.

487
00:22:50.266 --> 00:22:53.196
On iOS cameras, the
lens aperture is fixed

488
00:22:53.196 --> 00:22:54.736
on all products that
we have shipped.

489
00:22:55.166 --> 00:22:59.136
So, that means practically on
iOS the only two things we have

490
00:22:59.136 --> 00:23:01.356
to play with are
shutter speed and ISO.

491
00:22:59.136 --> 00:23:01.356
to play with are
shutter speed and ISO.

492
00:23:01.966 --> 00:23:06.936
Now, what have we- what
do we support currently

493
00:23:06.936 --> 00:23:08.126
in iOS 7 and earlier?

494
00:23:08.506 --> 00:23:12.276
We have two exposure modes that
we support, the locked mode,

495
00:23:12.596 --> 00:23:13.756
or the continuous mode.

496
00:23:14.426 --> 00:23:15.986
And continuous, as
you might expect,

497
00:23:15.986 --> 00:23:20.346
just continuously adjusts
the scene to get it well lit.

498
00:23:21.216 --> 00:23:23.446
There is also an
exposurePointOfInterest settable

499
00:23:23.446 --> 00:23:25.776
property that you can
use to tap to expose

500
00:23:26.146 --> 00:23:29.056
if you've got a complicated
scene with various objects

501
00:23:29.056 --> 00:23:30.996
that are light and
dark you can tell it

502
00:23:30.996 --> 00:23:32.536
which thing you want
to expose on.

503
00:23:33.696 --> 00:23:36.826
And finally, you can know when
exposure is being adjusted

504
00:23:36.826 --> 00:23:38.626
through this key-value
observable property.

505
00:23:40.136 --> 00:23:42.996
Now, new in iOS 8 we're
introducing support

506
00:23:42.996 --> 00:23:46.136
for fully manual
exposure or what we call

507
00:23:46.136 --> 00:23:48.236
in the API, custom exposure.

508
00:23:49.086 --> 00:23:50.956
In custom mode you can get,

509
00:23:50.956 --> 00:23:55.476
set and key-value observe
ISO and shutter speed.

510
00:23:55.796 --> 00:23:58.696
Now, we refer to shutter
speed as exposure duration

511
00:23:58.986 --> 00:24:02.476
in the API set since our cameras
don't have a physical shutter.

512
00:23:58.986 --> 00:24:02.476
in the API set since our cameras
don't have a physical shutter.

513
00:24:03.066 --> 00:24:05.046
I'll use those two
terms interchangeably

514
00:24:05.046 --> 00:24:07.426
from here on out.

515
00:24:08.156 --> 00:24:09.466
I feel a demo coming on.

516
00:24:10.036 --> 00:24:11.626
Let's have Matt Calhoun come up

517
00:24:11.706 --> 00:24:14.536
and show us how manual
exposure works in AVCam, Matt.

518
00:24:15.516 --> 00:24:20.236
[ Applause ]

519
00:24:20.736 --> 00:24:21.366
>> Thank you Brad.

520
00:24:21.836 --> 00:24:23.226
My name is Matthew Calhoun.

521
00:24:23.226 --> 00:24:25.446
I'm also an engineer on
the Camera Software Team

522
00:24:26.226 --> 00:24:30.886
and I'm very excited to show
you our manual exposure API

523
00:24:30.976 --> 00:24:31.696
in action.

524
00:24:32.736 --> 00:24:35.266
So, let me switch over
to the exposure mode

525
00:24:35.906 --> 00:24:37.426
of our demo application

526
00:24:37.606 --> 00:24:42.726
and we've got this nice
romantic scene prepared.

527
00:24:43.406 --> 00:24:46.676
And you'll notice
that-let me go back

528
00:24:46.676 --> 00:24:48.746
into focus mode and
put us in auto.

529
00:24:49.536 --> 00:24:50.366
Now, we're in focus.

530
00:24:50.846 --> 00:24:52.506
You'll notice that there
are a few more controls

531
00:24:52.506 --> 00:24:53.696
in the exposure view.

532
00:24:54.756 --> 00:24:56.906
But, I'd first like
to draw your attention

533
00:24:56.956 --> 00:24:58.926
to the middle two sliders.

534
00:24:58.926 --> 00:25:00.726
There's Duration
and there's ISO.

535
00:24:58.926 --> 00:25:00.726
There's Duration
and there's ISO.

536
00:25:01.596 --> 00:25:04.986
And Duration, as Brad said, you
can think of as shutter speed.

537
00:25:05.356 --> 00:25:09.626
And ISO, if this were a film
camera it would be film speed,

538
00:25:09.626 --> 00:25:11.706
but in this case
it's the gain applied

539
00:25:11.756 --> 00:25:14.006
to the sensor coming
off the signal

540
00:25:14.076 --> 00:25:15.746
or the signal coming
off the sensor.

541
00:25:16.596 --> 00:25:19.186
And you'll see since we're
in Auto Mode right now

542
00:25:20.106 --> 00:25:23.826
as I move the device
around you will see duration

543
00:25:23.826 --> 00:25:25.926
and ISO changing.

544
00:25:27.096 --> 00:25:31.616
That is the auto exposure
algorithm in action trying

545
00:25:31.616 --> 00:25:34.516
to achieve a perfect
exposure by changing duration

546
00:25:34.516 --> 00:25:36.396
and ISO as the scene changes.

547
00:25:37.816 --> 00:25:40.286
And as it does that I'd
like to draw your attention

548
00:25:40.406 --> 00:25:43.276
to the slider above
Duration, which is Offset.

549
00:25:44.306 --> 00:25:46.896
So, that's sort of
our exposure meter.

550
00:25:47.476 --> 00:25:49.956
That's the- that
represents the difference

551
00:25:49.956 --> 00:25:52.976
between our target exposure
and our actual exposure

552
00:25:53.366 --> 00:25:56.186
and since we're in Auto
Mode that should be hovering

553
00:25:56.186 --> 00:25:58.176
around zero all the
time, unless we're

554
00:25:58.176 --> 00:26:00.726
in some extreme lighting
situation

555
00:25:58.176 --> 00:26:00.726
in some extreme lighting
situation

556
00:26:00.726 --> 00:26:03.536
that we can't meet
the target exposure.

557
00:26:04.166 --> 00:26:12.476
So, I'm going to lock the tripod
on this scene now and you'll see

558
00:26:12.476 --> 00:26:15.016
that we're pretty well
exposed on the flowers now.

559
00:26:15.016 --> 00:26:20.786
But, what if I want to enhance
the drama in this scene?

560
00:26:20.786 --> 00:26:23.376
Well, that's exactly what
manual controls are for.

561
00:26:23.376 --> 00:26:26.846
So, I'm going to switch
over to Custom Mode

562
00:26:26.846 --> 00:26:29.326
and you may have noticed that
the sliders, the Duration

563
00:26:29.326 --> 00:26:31.306
and ISO sliders became
enabled now.

564
00:26:32.026 --> 00:26:36.886
So, that means that I can let's
see, let's get as little noise

565
00:26:36.886 --> 00:26:40.426
in this scene as possible
by lowering the ISO.

566
00:26:40.476 --> 00:26:44.486
And then since this
scene is static and I'm

567
00:26:44.486 --> 00:26:53.056
on a tripod I can crank up
the Duration or lower and sort

568
00:26:53.056 --> 00:26:57.386
of get what wouldn't be
considered a perfect exposure,

569
00:26:57.386 --> 00:27:01.356
but may be perhaps a
more artistic exposure

570
00:26:57.386 --> 00:27:01.356
but may be perhaps a
more artistic exposure

571
00:27:02.346 --> 00:27:03.736
and that is manual
exposure, thanks.

572
00:27:03.736 --> 00:27:03.976
>> Thanks Matt.

573
00:27:04.516 --> 00:27:09.626
[ Applause ]

574
00:27:10.126 --> 00:27:10.736
Great demo.

575
00:27:11.706 --> 00:27:14.936
So, let's talk about how
continuous auto exposure works.

576
00:27:15.216 --> 00:27:18.196
I want to do that, because to
understand manual exposure you

577
00:27:18.196 --> 00:27:21.566
really need to visualize how our
auto exposure internals work.

578
00:27:22.426 --> 00:27:23.466
Here's a peek under the hood.

579
00:27:23.946 --> 00:27:26.776
First, there is an auto
exposure or AE block

580
00:27:27.626 --> 00:27:31.916
and its job is calculating
ideal exposure and it's fed

581
00:27:32.146 --> 00:27:34.006
with metering stats
continuously.

582
00:27:35.156 --> 00:27:38.256
So, it knows how far off of
that exposure target it is.

583
00:27:39.086 --> 00:27:42.596
Then its job is to calculate
the right mixture of ISO

584
00:27:42.596 --> 00:27:44.666
and duration to get
the scene well lit.

585
00:27:45.116 --> 00:27:47.196
That's the AE loop,
constant feedback

586
00:27:47.196 --> 00:27:49.506
through the metering
stats, constant adjustment

587
00:27:49.506 --> 00:27:50.546
through ISO and duration.

588
00:27:51.816 --> 00:27:54.666
In the locked exposure
mode, which we've had now

589
00:27:54.666 --> 00:27:58.236
for several releases, that
AE block is still there.

590
00:27:58.236 --> 00:27:59.056
It's still active.

591
00:27:59.996 --> 00:28:02.136
So, it's still able to
set ISO and Duration,

592
00:27:59.996 --> 00:28:02.136
So, it's still able to
set ISO and Duration,

593
00:28:02.346 --> 00:28:04.416
but the difference is
the metering stats engine

594
00:28:04.416 --> 00:28:05.276
is disconnected.

595
00:28:05.616 --> 00:28:07.636
So, ISO and Duration are
never going to change,

596
00:28:07.636 --> 00:28:09.036
because the metering
isn't changing.

597
00:28:10.436 --> 00:28:13.936
Now, the new custom exposure
mode, in iOS 8 we allow you

598
00:28:13.996 --> 00:28:15.806
to manually control
ISO and Duration

599
00:28:15.806 --> 00:28:17.586
with a new mode called Custom.

600
00:28:18.456 --> 00:28:21.776
You set ISO and Duration
together in that one setter,

601
00:28:21.776 --> 00:28:23.426
which by now should
look pretty familiar

602
00:28:24.296 --> 00:28:27.686
and there's a completionHandler
that's fired on the first frame

603
00:28:27.686 --> 00:28:28.826
where the change is reflected.

604
00:28:29.616 --> 00:28:31.246
There are two special
parameters.

605
00:28:32.476 --> 00:28:35.526
The first one means
don't touch the Duration.

606
00:28:35.526 --> 00:28:36.496
Keep it where it is.

607
00:28:36.496 --> 00:28:38.926
I only want to mess
around with ISO

608
00:28:39.006 --> 00:28:41.406
and the second one is
keep the ISO where it is.

609
00:28:41.476 --> 00:28:44.666
So, you could have a slider UI
where you're only adjusting ISO

610
00:28:44.666 --> 00:28:46.176
or only adjusting Duration.

611
00:28:48.456 --> 00:28:52.876
Now, we have supported
ranges: min and maxes for ISO

612
00:28:52.876 --> 00:28:54.016
and exposure duration.

613
00:28:54.396 --> 00:28:58.246
Those vary according to the
device format so take note.

614
00:28:58.636 --> 00:29:01.986
They're implemented in the
AVCaptureDeviceFormat not

615
00:28:58.636 --> 00:29:01.986
They're implemented in the
AVCaptureDeviceFormat not

616
00:29:01.986 --> 00:29:03.556
in the AVCaptureDevice.

617
00:29:04.186 --> 00:29:09.756
Min and max ISO and min and max
ExposureDuration tell you the

618
00:29:09.756 --> 00:29:12.346
limits that you can use to
set these two properties

619
00:29:12.756 --> 00:29:15.806
and do use them otherwise we'll
throw an exception if you try

620
00:29:15.806 --> 00:29:18.036
to set an out of range value.

621
00:29:19.286 --> 00:29:22.206
Also, as you might expect, we
have three observable properties

622
00:29:22.206 --> 00:29:25.316
for the three elements in
the exposure triangle: ISO,

623
00:29:25.546 --> 00:29:27.656
exposureDuration
and lensAperture.

624
00:29:28.356 --> 00:29:29.656
LensAperture I'll remind you,

625
00:29:29.656 --> 00:29:31.326
you can key-value
observe it all day long.

626
00:29:31.426 --> 00:29:32.736
It's never going to change.

627
00:29:34.456 --> 00:29:36.806
Now, how does custom
exposure mode work?

628
00:29:37.446 --> 00:29:39.726
Well again, we have that
auto exposure block.

629
00:29:39.726 --> 00:29:40.446
It's still there.

630
00:29:41.526 --> 00:29:43.396
The metering stats are connected

631
00:29:43.546 --> 00:29:45.736
so it's being fed
real-time stats

632
00:29:45.736 --> 00:29:48.076
about how far off it
is from ideal exposure.

633
00:29:48.326 --> 00:29:50.276
So, it can still
compute a target offset,

634
00:29:50.276 --> 00:29:51.556
which you can use as a meter.

635
00:29:52.146 --> 00:29:54.266
The difference is ISO
and Duration are cut off

636
00:29:54.726 --> 00:29:56.486
and that's where you come in.

637
00:29:56.486 --> 00:29:59.346
You get to set them
directly using these APIs,

638
00:29:59.646 --> 00:30:02.726
but you can still use the target
offset to know how you're doing.

639
00:29:59.646 --> 00:30:02.726
but you can still use the target
offset to know how you're doing.

640
00:30:03.226 --> 00:30:08.446
All right, now let's
talk about a close cousin

641
00:30:08.446 --> 00:30:11.156
of manual exposure, which
is exposure compensation.

642
00:30:12.946 --> 00:30:14.956
Exposure compensation
is a modifier

643
00:30:14.956 --> 00:30:16.436
to our auto exposure block.

644
00:30:16.996 --> 00:30:20.336
It lets you bias the AE
algorithm towards something

645
00:30:20.336 --> 00:30:22.026
slightly darker or
slightly brighter.

646
00:30:22.026 --> 00:30:23.706
It's kind of like a gentler,

647
00:30:23.796 --> 00:30:25.776
kinder version of
manual controls.

648
00:30:25.776 --> 00:30:27.736
So, if you don't want to
get your hands really dirty,

649
00:30:27.736 --> 00:30:31.506
but you still want to affect
our AE algorithm somewhat,

650
00:30:31.706 --> 00:30:32.846
you can use this instead.

651
00:30:33.766 --> 00:30:38.226
So, it biases the decision of
the AE algorithm as I said,

652
00:30:38.606 --> 00:30:41.336
towards something brighter or
darker and this can be used

653
00:30:41.336 --> 00:30:43.946
in the Continuous AE mode
or in the locked mode.

654
00:30:45.026 --> 00:30:47.436
The way it's expressed
is in f-stops.

655
00:30:47.436 --> 00:30:50.506
If you've used a DSLR you'll
be familiar with this.

656
00:30:50.506 --> 00:30:56.096
An f-stop or exposure value
is double the brightness

657
00:30:56.096 --> 00:30:58.096
if you're going in
the positive direction

658
00:30:58.566 --> 00:31:00.356
and it's half the
brightness if you're going

659
00:30:58.566 --> 00:31:00.356
and it's half the
brightness if you're going

660
00:31:00.356 --> 00:31:01.316
in the negative direction.

661
00:31:03.516 --> 00:31:05.276
I know you all are going
to have a conniption fit

662
00:31:05.496 --> 00:31:08.976
if you don't get another demo
right now so take it away Matt.

663
00:31:09.516 --> 00:31:14.736
[ Applause ]

664
00:31:15.236 --> 00:31:21.846
>> Okay, so let's go back
into Auto mode and we're going

665
00:31:21.846 --> 00:31:24.276
to do something similar
to what we just did

666
00:31:24.276 --> 00:31:25.406
with Manual controls,

667
00:31:25.406 --> 00:31:28.916
except this this time I
don't really want to think

668
00:31:28.916 --> 00:31:31.706
about a specific shutter
speed or a specific ISO.

669
00:31:31.706 --> 00:31:34.006
I just want the AE
algorithm to handle it.

670
00:31:34.276 --> 00:31:36.716
But, I do want to make the
scene lighter or darker.

671
00:31:37.406 --> 00:31:40.506
So, that's exactly what
this last slider is for.

672
00:31:41.536 --> 00:31:46.846
I simply move it to the left
to lower the exposure target

673
00:31:48.076 --> 00:31:52.606
or move it to the
right to increase it.

674
00:31:53.316 --> 00:31:58.076
And that exposure target is
locked in at a higher value now.

675
00:31:58.076 --> 00:32:02.996
So, you'll see as I
move the device around,

676
00:31:58.076 --> 00:32:02.996
So, you'll see as I
move the device around,

677
00:32:02.996 --> 00:32:04.076
let me lower it a little bit.

678
00:32:04.486 --> 00:32:08.396
You should see Exposure
and Duration still updating

679
00:32:08.396 --> 00:32:09.806
in response to scene changes.

680
00:32:10.626 --> 00:32:14.946
But, they are being updated to
meet a lower exposure target.

681
00:32:16.246 --> 00:32:19.056
So, I also would like to
show you how this works

682
00:32:19.056 --> 00:32:19.826
in Locked mode.

683
00:32:19.826 --> 00:32:26.946
It's very similar except that
in Locked mode we only respond

684
00:32:26.946 --> 00:32:29.346
to changes in the bias.

685
00:32:29.576 --> 00:32:31.776
So, Duration and
ISO will get updated

686
00:32:31.846 --> 00:32:34.156
if I change the exposure target.

687
00:32:34.306 --> 00:32:38.216
But, once I stop changing that
target if I move the device

688
00:32:38.216 --> 00:32:40.746
around and point at
different scenes, Duration

689
00:32:40.746 --> 00:32:42.326
and ISO will not change.

690
00:32:42.986 --> 00:32:44.856
That is exposure compensation.

691
00:32:45.486 --> 00:32:45.966
>> Cool.

692
00:32:46.286 --> 00:32:46.436
>> Thanks.

693
00:32:46.586 --> 00:32:46.926
>> Thank you Matt.

694
00:32:47.516 --> 00:32:52.886
[ Applause ]

695
00:32:53.386 --> 00:32:58.156
>> Exposure compensation is
supported in all exposure modes.

696
00:32:59.116 --> 00:33:02.086
And by now you should be very
familiar with this pattern.

697
00:32:59.116 --> 00:33:02.086
And by now you should be very
familiar with this pattern.

698
00:33:02.686 --> 00:33:06.306
We have a compound setter,
setExposureTargetBias.

699
00:33:06.306 --> 00:33:08.246
We don't call it exposure
compensation in the API.

700
00:33:08.436 --> 00:33:09.686
We call it target bias.

701
00:33:10.376 --> 00:33:12.246
And you're provided
a completionHandler

702
00:33:12.586 --> 00:33:15.496
on the first frame where your
change has been reflected.

703
00:33:17.466 --> 00:33:21.286
The supported range, min and
max ExposureTargetBias are a

704
00:33:21.286 --> 00:33:23.686
constant right now
on all devices.

705
00:33:24.156 --> 00:33:27.796
The min is minus eight
and the max is plus eight,

706
00:33:28.296 --> 00:33:31.026
but that may change in the
future so we do encourage you

707
00:33:31.026 --> 00:33:34.136
to use these min and max
TargetBiasValues before

708
00:33:34.136 --> 00:33:34.576
a setting.

709
00:33:35.196 --> 00:33:37.736
We will throw an exception if
you use an out of range value.

710
00:33:39.506 --> 00:33:41.616
There are some key-value
observable getters.

711
00:33:42.356 --> 00:33:44.636
ExposureTargetBias is
again what we're calling

712
00:33:44.636 --> 00:33:45.856
exposure compensation.

713
00:33:46.256 --> 00:33:48.706
That will never change
unless you change it.

714
00:33:48.956 --> 00:33:52.006
So, exposureTargetBias
is zero unless you set it

715
00:33:52.006 --> 00:33:52.556
to something else.

716
00:33:53.576 --> 00:33:56.606
The exposureTargetOffset,
as Matt just showed you,

717
00:33:56.926 --> 00:34:00.126
is the thing that hovers
around zero usually if you're

718
00:33:56.926 --> 00:34:00.126
is the thing that hovers
around zero usually if you're

719
00:34:00.126 --> 00:34:02.816
in a well-mannered environment.

720
00:34:03.166 --> 00:34:05.716
It's able to a good enough
job to get the scene well-lit,

721
00:34:05.856 --> 00:34:08.335
and when it's well-lit,
targetOffset is at zero.

722
00:34:08.786 --> 00:34:12.255
When you're at some extreme
condition the targetOffset might

723
00:34:12.255 --> 00:34:12.866
move around.

724
00:34:13.235 --> 00:34:16.746
You can use it as a meter.

725
00:34:17.396 --> 00:34:19.936
Now, let's talk about how
exposure compensation works

726
00:34:19.936 --> 00:34:21.485
with our familiar diagram now.

727
00:34:22.626 --> 00:34:24.565
In Continuous Auto
Exposure mode,

728
00:34:25.396 --> 00:34:29.206
we have again the metering stats
providing real-time information

729
00:34:29.206 --> 00:34:31.766
to the block and its
setting ISO and Duration.

730
00:34:32.966 --> 00:34:36.775
Now, you can bias that
decision of the AE block

731
00:34:36.775 --> 00:34:38.446
by setting a new target bias.

732
00:34:39.106 --> 00:34:44.255
The AE block uses those metered
stats plus your bias to set ISO

733
00:34:44.255 --> 00:34:47.085
and Duration to a
new Target Offset.

734
00:34:47.085 --> 00:34:49.746
Now, that offset is
influenced by your bias.

735
00:34:50.036 --> 00:34:53.556
So, if you set a bias of plus
one then the Target Offset will

736
00:34:53.556 --> 00:34:59.236
hit zero when the plus one
target has been reached.

737
00:34:59.666 --> 00:35:01.696
Now, let's look at the
Locked Exposure mode.

738
00:34:59.666 --> 00:35:01.696
Now, let's look at the
Locked Exposure mode.

739
00:35:01.696 --> 00:35:02.856
And this is pretty cool

740
00:35:02.856 --> 00:35:04.856
that even though it's
locked you can still kind

741
00:35:04.966 --> 00:35:06.406
of influence the exposure.

742
00:35:07.296 --> 00:35:09.876
The metering stats are
disconnected so normally ISO

743
00:35:09.876 --> 00:35:11.576
and Duration will
not change at all.

744
00:35:11.576 --> 00:35:12.156
It's locked.

745
00:35:12.786 --> 00:35:15.616
But, you can still set
bias and when you do

746
00:35:16.456 --> 00:35:19.956
that it will now need to
fluctuate ISO and Duration

747
00:35:20.026 --> 00:35:22.546
to meet that bias and
it will report all

748
00:35:22.546 --> 00:35:24.586
of that in the Target Offset.

749
00:35:26.156 --> 00:35:29.116
If you'd like to see a great
use of exposure compensation,

750
00:35:29.766 --> 00:35:33.216
look no further than Apple's
own camera app in iOS 8.

751
00:35:33.816 --> 00:35:37.056
You might have noticed by now
that if you tap, when you tap

752
00:35:37.056 --> 00:35:38.756
to expose, you're
presented with a new UI.

753
00:35:39.126 --> 00:35:41.696
It's sort of a brightness
UI with a little sun in it

754
00:35:42.296 --> 00:35:44.926
and that shows you that
you can swipe up or down

755
00:35:45.426 --> 00:35:48.216
to bias exposure up or down.

756
00:35:48.466 --> 00:35:50.026
So, it's influencing
the AE algorithm

757
00:35:50.026 --> 00:35:52.096
to pick something a little bit
brighter or a little bit darker.

758
00:35:52.616 --> 00:35:53.046
Try it out.

759
00:35:53.046 --> 00:35:54.986
It's really pretty cool.

760
00:35:56.016 --> 00:35:58.466
All right, two down, one to go.

761
00:35:59.076 --> 00:36:00.656
Let's talk about
Manual White Balance.

762
00:35:59.076 --> 00:36:00.656
Let's talk about
Manual White Balance.

763
00:36:02.676 --> 00:36:05.846
White balance is all
about making the color

764
00:36:05.846 --> 00:36:07.876
in your photos look realistic.

765
00:36:09.116 --> 00:36:11.476
Sounds simple enough
right, but it's not.

766
00:36:12.306 --> 00:36:14.986
Different light sources have
different color temperatures.

767
00:36:15.596 --> 00:36:18.196
For instance, daylight
casts kind

768
00:36:18.196 --> 00:36:22.056
of a bluish tint whereas an
incandescent light would give

769
00:36:22.056 --> 00:36:24.586
you something warmer
like a yellowish tint.

770
00:36:25.116 --> 00:36:28.916
Now, our brain is really good at
adjusting to these color tints,

771
00:36:29.476 --> 00:36:30.956
but cameras can't do that.

772
00:36:31.666 --> 00:36:34.646
So, under a blue light source,
your camera needs to compensate

773
00:36:34.646 --> 00:36:37.396
for that by boosting
up the opposite colors,

774
00:36:37.396 --> 00:36:39.236
to boost up the red
to compensate.

775
00:36:39.236 --> 00:36:44.126
All right, this is the nerdiest
slide you'll see here today.

776
00:36:44.956 --> 00:36:49.246
This is a CIE 1931
chromaticity diagram.

777
00:36:49.706 --> 00:36:50.596
You don't need to know that.

778
00:36:51.536 --> 00:36:54.866
But, it shows us all the
colors visible to a human being

779
00:36:55.146 --> 00:36:59.266
from pure blue, to bright
green on top, to bright red.

780
00:37:00.126 --> 00:37:04.566
And any point on the diagram
can be plotted with a little X

781
00:37:04.566 --> 00:37:07.586
and Y value, as shown
here by these axes.

782
00:37:08.256 --> 00:37:11.366
Take into account here that this
is 2D color we're talking about,

783
00:37:11.366 --> 00:37:13.086
so brightness is orthogonal.

784
00:37:13.086 --> 00:37:14.626
We're just talking about color.

785
00:37:15.336 --> 00:37:18.676
So, on the X axis and
on the Y axis from zero

786
00:37:18.676 --> 00:37:21.806
to one you can plot any
point on that color diagram.

787
00:37:22.136 --> 00:37:24.356
And as you can see there are
going to be some crazy values

788
00:37:24.356 --> 00:37:28.186
that are outside the range of
human visibility and, therefore,

789
00:37:28.186 --> 00:37:30.016
they can't be faithfully
represented

790
00:37:30.116 --> 00:37:31.686
or reproduced by a camera.

791
00:37:32.646 --> 00:37:34.976
Also note that there is a
narrower range there that's

792
00:37:34.976 --> 00:37:37.516
represented by a
tight little curve

793
00:37:38.626 --> 00:37:42.016
and that curve there is
called the Planckian locus.

794
00:37:42.306 --> 00:37:43.396
You also don't need
to know that.

795
00:37:43.466 --> 00:37:46.006
But, every time you say
Planckian locus an angel get

796
00:37:46.006 --> 00:37:46.656
its wings.

797
00:37:48.356 --> 00:37:51.446
This little curve here
expresses the color temperatures

798
00:37:51.446 --> 00:37:55.496
in degrees Kelvin with higher
numbers on the blue side,

799
00:37:55.646 --> 00:37:58.286
that's hotter and lower
numbers on the red side

800
00:37:58.776 --> 00:38:00.666
in degrees Kelvin again.

801
00:37:58.776 --> 00:38:00.666
in degrees Kelvin again.

802
00:38:01.616 --> 00:38:04.576
And these are useful for
typical lighting situations.

803
00:38:04.576 --> 00:38:06.096
In typical lighting situations,

804
00:38:06.446 --> 00:38:08.776
the light will go right
along this nice curve.

805
00:38:09.516 --> 00:38:12.356
Sometimes though you have
mixed lighting conditions

806
00:38:12.396 --> 00:38:14.396
and it's not quite
as cut and dry

807
00:38:14.396 --> 00:38:16.156
as just moving along that curve.

808
00:38:16.666 --> 00:38:18.946
Sometimes you need to shift
a little bit to deviate

809
00:38:18.946 --> 00:38:20.916
from the nice curve,
because there is a little bit

810
00:38:20.916 --> 00:38:22.996
of a green shift
or a magenta shift

811
00:38:23.536 --> 00:38:25.656
in that's what those little
tick marks are up there.

812
00:38:26.496 --> 00:38:29.246
So, the Planckian locus is
talking about temperature

813
00:38:29.246 --> 00:38:32.076
and the little hash
marks off of it are tint.

814
00:38:32.536 --> 00:38:36.976
That's adjusting for red
or magenta or green shift.

815
00:38:39.206 --> 00:38:41.676
Now, what possible
uses might you have

816
00:38:41.676 --> 00:38:42.986
for manual white balance?

817
00:38:43.426 --> 00:38:45.746
Well, our auto white balance
does a pretty good job.

818
00:38:45.746 --> 00:38:47.966
It's trying to guess what
your lighting source is

819
00:38:48.036 --> 00:38:51.386
and compensate for casts
that might be coming off

820
00:38:51.386 --> 00:38:52.346
of that lighting source.

821
00:38:52.906 --> 00:38:54.776
But, it's not perfect.

822
00:38:54.956 --> 00:38:56.036
It might make mistakes.

823
00:38:56.036 --> 00:38:59.646
If you have manual white balance
you can do a manual temperature

824
00:38:59.646 --> 00:39:00.226
and tint UI.

825
00:38:59.646 --> 00:39:00.226
and tint UI.

826
00:39:01.056 --> 00:39:02.666
You could come up
with some presets

827
00:39:03.026 --> 00:39:04.426
for standard lighting conditions

828
00:39:04.426 --> 00:39:05.956
and give the power
back to the user.

829
00:39:06.556 --> 00:39:08.396
You could use a gray
card to assist

830
00:39:08.396 --> 00:39:11.976
in doing a neutral white
balance or you just might want

831
00:39:11.976 --> 00:39:13.626
to do some crazy color cast

832
00:39:13.626 --> 00:39:15.686
and have little green
men in your pictures.

833
00:39:17.766 --> 00:39:20.186
IOS devices compensate
for color casts

834
00:39:20.406 --> 00:39:22.906
by boosting the opposite
color gain.

835
00:39:23.296 --> 00:39:25.516
So for instance, if a scene
has too much blue it's

836
00:39:25.516 --> 00:39:29.346
over on the left side, then
the red gain must be boosted

837
00:39:29.346 --> 00:39:32.236
up a lot and the green
a little to compensate.

838
00:39:32.606 --> 00:39:37.326
These gain values are calibrated
for our devices so they are said

839
00:39:37.326 --> 00:39:40.236
to be device-dependent
gain values rather

840
00:39:40.236 --> 00:39:42.776
than device-independent values

841
00:39:42.776 --> 00:39:44.546
such as are represented
on this diagram.

842
00:39:46.376 --> 00:39:47.966
Okay, what do we
already support?

843
00:39:48.166 --> 00:39:50.436
Similar to exposure,
we have a locked mode

844
00:39:50.436 --> 00:39:52.576
and a continuous
whiteBalanceMode,

845
00:39:53.136 --> 00:39:54.986
which continuously
tries to adjust

846
00:39:54.986 --> 00:39:58.826
for the lighting
source conditions.

847
00:40:00.586 --> 00:40:04.126
And we let you know when the
white balance is being adjusted.

848
00:40:05.116 --> 00:40:08.766
New in iOS 8 we give
you full manual control

849
00:40:08.766 --> 00:40:10.936
of the device RGB gains.

850
00:40:11.386 --> 00:40:14.686
This isn't, you know, just a
baby sort of temp and tint UI.

851
00:40:14.866 --> 00:40:16.196
This is full control.

852
00:40:16.776 --> 00:40:20.536
You can key-value observe
those device RGB gains.

853
00:40:21.176 --> 00:40:25.716
And we also have support for
white balance using a gray card.

854
00:40:25.716 --> 00:40:26.966
We'll get into that more later

855
00:40:28.266 --> 00:40:30.246
and we provide conversion
routines to get you

856
00:40:30.356 --> 00:40:36.106
from chromaticity values,
X and Y values to our gains

857
00:40:36.436 --> 00:40:39.836
or from temperature tint
along that Planckian locus.

858
00:40:40.366 --> 00:40:41.776
Another angel just
got its wings.

859
00:40:43.896 --> 00:40:46.256
All right, I think it's
time for a demo of this.

860
00:40:46.476 --> 00:40:49.936
Let's bring up both Matt
and Aparna to give us a demo

861
00:40:49.936 --> 00:40:50.996
of manual white balance.

862
00:40:51.366 --> 00:40:51.946
Take it away guys.

863
00:40:52.516 --> 00:40:57.516
[ Applause ]

864
00:40:58.016 --> 00:41:02.726
>> Okay, let's put exposure back
into Auto mode now and switch

865
00:40:58.016 --> 00:41:02.726
>> Okay, let's put exposure back
into Auto mode now and switch

866
00:41:02.726 --> 00:41:04.146
over to the white balance view.

867
00:41:04.406 --> 00:41:07.866
And I'd like to show you just a
few of things that are possible

868
00:41:07.866 --> 00:41:09.526
with the manual white
balance API.

869
00:41:10.986 --> 00:41:14.236
So, we got a common theme
here, we've got a Mode switch

870
00:41:14.236 --> 00:41:17.206
at the top and then a couple
of sliders and then a button

871
00:41:17.206 --> 00:41:18.606
that I'll talk about
in just a moment.

872
00:41:19.856 --> 00:41:26.066
The sliders are for temperature
and tint and, as Brad explained,

873
00:41:26.126 --> 00:41:29.516
one goes between yellow cast
and blue cast and one goes

874
00:41:29.516 --> 00:41:31.986
between green and
purple or magenta.

875
00:41:32.906 --> 00:41:35.976
And since we're in Auto
mode and we have somewhat

876
00:41:35.976 --> 00:41:38.826
of a mixed lighting
situation here in Moscone,

877
00:41:39.536 --> 00:41:42.986
you can see the auto white
balance algorithm subtly

878
00:41:42.986 --> 00:41:47.926
changing these values as
I move the device around.

879
00:41:48.636 --> 00:41:52.616
But, what's more fun is
to go into the Locked mode

880
00:41:53.016 --> 00:41:54.856
so that we can change
them ourselves

881
00:41:54.856 --> 00:41:57.796
and let me point at
the flowers here.

882
00:41:58.676 --> 00:42:03.306
So, in manual mode, you can
really see that we can go

883
00:41:58.676 --> 00:42:03.306
So, in manual mode, you can
really see that we can go

884
00:42:03.306 --> 00:42:08.316
between a yellowish cast, a
bluish cast and, with tint,

885
00:42:08.486 --> 00:42:14.366
we can go between a magenta
cast and a greenish cast.

886
00:42:15.796 --> 00:42:20.146
So, now let's go back to
Auto mode and let's talk

887
00:42:20.146 --> 00:42:22.956
about another use case that
we've enabled, which is the use

888
00:42:22.956 --> 00:42:26.286
of a gray card to
lock white balance

889
00:42:26.346 --> 00:42:28.966
at an appropriate value
for a neutral gray.

890
00:42:29.066 --> 00:42:34.926
So, you'll see down here,
we've got a yellow gray button.

891
00:42:35.866 --> 00:42:37.276
How's that for cognitive
dissonance?

892
00:42:37.766 --> 00:42:44.996
So, normally the auto white
balance algorithm does not

893
00:42:44.996 --> 00:42:47.756
assume that you are pointing
your camera at a gray card.

894
00:42:47.756 --> 00:42:49.826
In fact, it really has
no way of knowing that.

895
00:42:49.866 --> 00:42:51.426
So, that's what this
gray button is for.

896
00:42:52.306 --> 00:42:54.456
When we tap this
button we are going

897
00:42:54.456 --> 00:42:59.746
to tell it-we are telling
the API essentially, "Okay,

898
00:42:59.746 --> 00:43:00.936
we are looking at a gray card.

899
00:42:59.746 --> 00:43:00.936
we are looking at a gray card.

900
00:43:01.106 --> 00:43:03.116
Give us the correct
values and then we're going

901
00:43:03.116 --> 00:43:04.636
to lock at those values."

902
00:43:04.636 --> 00:43:09.296
So, you should see a subtle,
in this light, change.

903
00:43:09.296 --> 00:43:15.706
Let me go back to Auto and again
a subtle change in the color

904
00:43:15.706 --> 00:43:17.836
of the scene when I
tap the gray button.

905
00:43:17.836 --> 00:43:19.556
And notice that we've
gone automatically

906
00:43:19.556 --> 00:43:21.486
from Auto to Locked mode.

907
00:43:22.336 --> 00:43:24.006
That is manual white balance.

908
00:43:24.516 --> 00:43:24.976
Thanks, Brad.

909
00:43:25.516 --> 00:43:30.516
[ Applause ]

910
00:43:31.016 --> 00:43:34.000
[ Silence ]

911
00:43:34.106 --> 00:43:34.986
>> Awesome demos.

912
00:43:37.706 --> 00:43:40.266
Alright, manual white
balance is my favorite

913
00:43:40.436 --> 00:43:44.296
of the three new camera control
APIs and that's because we got

914
00:43:44.296 --> 00:43:47.516
to introduce some new C
structs, always a good day

915
00:43:47.516 --> 00:43:50.296
when you can introduce
a C struct.

916
00:43:51.016 --> 00:43:54.046
We don't want you to set red,
green and blue individually.

917
00:43:54.046 --> 00:43:57.346
They need to be set as a team
so therefore we need a struct

918
00:43:57.566 --> 00:44:00.006
for red gain, green
gain and blue gain.

919
00:43:57.566 --> 00:44:00.006
for red gain, green
gain and blue gain.

920
00:44:00.006 --> 00:44:01.066
You set them all at once.

921
00:44:02.266 --> 00:44:05.466
Of course, there is a
max that you can set.

922
00:44:05.686 --> 00:44:07.726
On all our devices
it's currently four.

923
00:44:08.006 --> 00:44:10.076
That's the max white
balance gain you can set.

924
00:44:10.706 --> 00:44:15.976
And so the legal range
is from one to four.

925
00:44:16.176 --> 00:44:19.206
That may change in the future,
so do use maxWhiteBalanceGain.

926
00:44:20.616 --> 00:44:24.636
Also as you saw from the UI that
Matt and Aparna just showed you,

927
00:44:25.006 --> 00:44:27.566
the temp and tint sliders were
moving around in Auto mode.

928
00:44:27.566 --> 00:44:29.926
That's because they
were observing the

929
00:44:29.926 --> 00:44:32.626
deviceWhiteBalanceGains
and then converting them

930
00:44:32.626 --> 00:44:33.736
into temperature and tint.

931
00:44:34.176 --> 00:44:34.286
So,

932
00:44:34.286 --> 00:44:37.146
these deviceWhiteBalanceGains
are key-value observable

933
00:44:37.516 --> 00:44:41.906
and update constantly in
your-in the Auto mode.

934
00:44:42.616 --> 00:44:45.386
So, here is what
the API set looks

935
00:44:45.386 --> 00:44:47.016
like for manual white balance.

936
00:44:47.626 --> 00:44:49.476
You set the white
balance mode to "locked"

937
00:44:49.776 --> 00:44:52.746
with explicit RGB gain values.

938
00:44:53.346 --> 00:44:56.496
Again, these are
device-dependent gain values not

939
00:44:56.496 --> 00:44:58.946
device-independent
chromaticity values.

940
00:44:59.636 --> 00:45:03.216
There is also a current special
parameter that you can set

941
00:44:59.636 --> 00:45:03.216
There is also a current special
parameter that you can set

942
00:45:03.216 --> 00:45:05.476
if you just want to lock
where it is right now.

943
00:45:07.126 --> 00:45:09.456
Now, about those
conversion routines.

944
00:45:10.276 --> 00:45:12.236
Of course, we need
structs for them too.

945
00:45:12.236 --> 00:45:15.706
When we're talking about
chromaticity values or the X

946
00:45:15.706 --> 00:45:19.296
and Y on that chromaticity
diagram they go from a min

947
00:45:19.296 --> 00:45:20.856
of zero to a max of one.

948
00:45:21.136 --> 00:45:22.546
Remember, not all
of them will fall

949
00:45:22.546 --> 00:45:25.376
within human perceivable color

950
00:45:25.376 --> 00:45:28.346
and then there's also
temperature and tint

951
00:45:28.416 --> 00:45:30.636
as a struct, which
can be set together.

952
00:45:31.256 --> 00:45:34.066
Temperature is a floating
point value in Kelvin

953
00:45:34.616 --> 00:45:39.446
and tint is an offset for red,
or magenta, from zero to 150.

954
00:45:40.516 --> 00:45:44.186
Positive values go in
the green direction,

955
00:45:44.186 --> 00:45:45.716
negative in the magenta
direction.

956
00:45:46.856 --> 00:45:48.986
Now, to convert them
unfortunately you need

957
00:45:48.986 --> 00:45:51.246
to be very verbose so I need

958
00:45:51.246 --> 00:45:54.616
to use three lines per
function call, but bear with me.

959
00:45:55.066 --> 00:45:59.346
The first one is, when you
have RGB gains from the device

960
00:45:59.346 --> 00:46:01.496
and you want to turn
those into X,

961
00:45:59.346 --> 00:46:01.496
and you want to turn
those into X,

962
00:46:01.496 --> 00:46:03.856
Y chromaticity values,
you call this.

963
00:46:04.946 --> 00:46:07.416
There is also, to go
in the other direction,

964
00:46:07.456 --> 00:46:09.816
you can provide X and Y
values and we'll convert them

965
00:46:09.816 --> 00:46:12.196
into our device-dependent
RGZB gain values.

966
00:46:13.036 --> 00:46:16.086
Also, you can take our gains
and turn them into temperature

967
00:46:16.086 --> 00:46:18.176
and tint and vice versa.

968
00:46:18.926 --> 00:46:22.586
Now, note that our conversion
routines are more accurate the

969
00:46:22.586 --> 00:46:25.806
closer you are to that curve,
to the Planckian locus.

970
00:46:26.526 --> 00:46:32.136
The farther away you get the
crazier results might get.

971
00:46:33.106 --> 00:46:34.906
As I said, some X
and Y temperature

972
00:46:34.906 --> 00:46:39.406
and tint combinations will yield
out of range RGB gain values.

973
00:46:39.796 --> 00:46:41.396
But, we're not going
to hide that from you.

974
00:46:41.786 --> 00:46:45.676
If you call a conversion method
with a crazy X and Y value,

975
00:46:45.926 --> 00:46:47.246
we are going to convert it

976
00:46:47.246 --> 00:46:51.536
to the corresponding device RGB
gain value without clamping it.

977
00:46:52.266 --> 00:46:55.416
But, that might not be a
legal value that you can use

978
00:46:55.416 --> 00:46:58.386
when setting the white balance
gains on the AVCaptureDevice.

979
00:46:58.706 --> 00:47:02.826
So, when using these conversion
utilities you must do your own

980
00:46:58.706 --> 00:47:02.826
So, when using these conversion
utilities you must do your own

981
00:47:02.826 --> 00:47:03.596
range checking.

982
00:47:03.596 --> 00:47:06.926
You must check for out of range
values otherwise an exception

983
00:47:06.926 --> 00:47:07.416
will be thrown.

984
00:47:09.326 --> 00:47:11.576
Now, let's talk about
the gray card support

985
00:47:11.576 --> 00:47:13.016
or what we call Gray world.

986
00:47:13.746 --> 00:47:14.836
What is Gray world?

987
00:47:15.226 --> 00:47:18.696
It is not the land of
perpetual depression.

988
00:47:19.136 --> 00:47:22.766
It is-think of it
as an alternative

989
00:47:22.886 --> 00:47:24.876
to our auto white
balance algorithm.

990
00:47:25.686 --> 00:47:30.106
AWB is very complicated
and preferenced.

991
00:47:30.226 --> 00:47:32.536
That's because it needs to
make guesses all the time

992
00:47:32.586 --> 00:47:35.786
about what the lighting sources
are, but it can be tricked.

993
00:47:35.846 --> 00:47:39.166
If for instance, you have
predominantly red in your scene

994
00:47:39.166 --> 00:47:41.506
like a scene of autumn
leaves it might think

995
00:47:41.506 --> 00:47:42.816
that that's your lighting source

996
00:47:42.816 --> 00:47:45.096
when in fact it's just
predominantly the color

997
00:47:45.096 --> 00:47:45.696
in the scene.

998
00:47:46.466 --> 00:47:48.876
It needs to make
those assumptions

999
00:47:48.876 --> 00:47:50.396
and sometimes it guesses wrong.

1000
00:47:50.516 --> 00:47:53.636
Well, you can remove the
guesswork by using a gray card.

1001
00:47:54.366 --> 00:47:57.736
And so the gray world is-think
of it as a parallel universe

1002
00:47:58.056 --> 00:48:01.346
of AWB values that are
computed all the time

1003
00:47:58.056 --> 00:48:01.346
of AWB values that are
computed all the time

1004
00:48:01.726 --> 00:48:04.516
as if you had a gray card
in front of the camera.

1005
00:48:05.156 --> 00:48:07.826
So, you can get the
regular device RGB gains

1006
00:48:08.186 --> 00:48:11.716
or you can get the alternate
gray world gains at any time.

1007
00:48:12.726 --> 00:48:17.236
And what it does is try to
make white look neutral white.

1008
00:48:17.936 --> 00:48:20.276
So, if you have a gray card
and you have a UI for this,

1009
00:48:20.276 --> 00:48:21.916
you can really take
the guesswork out.

1010
00:48:24.096 --> 00:48:28.416
It does assume that that neutral
subject or gray card fills

1011
00:48:28.416 --> 00:48:32.686
at least 50 percent of
the center of the frame.

1012
00:48:32.876 --> 00:48:35.616
Now, how might you
do this in a UI?

1013
00:48:36.726 --> 00:48:39.666
Well, you could prompt the user
to put a gray card in front

1014
00:48:39.666 --> 00:48:43.296
of the camera then you could
wait for the gains to settle

1015
00:48:43.296 --> 00:48:47.146
down for a minute and then
sample the gray world device

1016
00:48:47.146 --> 00:48:51.886
white balance gains property
and then lock white balance mode

1017
00:48:52.166 --> 00:48:54.086
with those gray world gains.

1018
00:48:54.566 --> 00:48:57.476
Now, you know you have a neutral
white and you've taken all

1019
00:48:57.476 --> 00:49:00.186
of the guesswork out of AWB.

1020
00:48:57.476 --> 00:49:00.186
of the guesswork out of AWB.

1021
00:49:01.146 --> 00:49:02.886
That's it for the
manual controls.

1022
00:49:03.186 --> 00:49:05.346
Let's talk about where all
three of these are supported.

1023
00:49:06.546 --> 00:49:08.896
Manual focus, it's
supported everywhere,

1024
00:49:09.106 --> 00:49:10.826
everywhere where you
can focus our camera,

1025
00:49:11.106 --> 00:49:13.656
you can use the manual
controls all the way back

1026
00:49:13.656 --> 00:49:14.716
to an iPhone 4s.

1027
00:49:16.346 --> 00:49:19.666
Manual exposure and manual
white balance: no restrictions.

1028
00:49:19.876 --> 00:49:23.616
You can use them on all iOS
devices supported in iOS 8.

1029
00:49:25.136 --> 00:49:29.266
Also, the talk has generally
been geared towards digital

1030
00:49:29.266 --> 00:49:30.816
photography, still photography,

1031
00:49:31.266 --> 00:49:34.316
but you can use these
manual controls

1032
00:49:34.606 --> 00:49:38.116
with any AVCaptureSession
preset or any active format.

1033
00:49:38.386 --> 00:49:40.116
So, they're equally applicable

1034
00:49:40.116 --> 00:49:42.616
to video recording,
barcode scanning.

1035
00:49:42.866 --> 00:49:46.626
You can set manual
controls for any use case.

1036
00:49:46.826 --> 00:49:48.696
Whew, are you stuffed yet?

1037
00:49:49.506 --> 00:49:51.726
Is there any room
for dessert at all?

1038
00:49:51.816 --> 00:49:53.856
I hope so, because you're
going to want to hear

1039
00:49:53.856 --> 00:49:54.826
about bracketed capture.

1040
00:49:57.476 --> 00:49:59.796
Think of this as a twist
on the manual controls

1041
00:49:59.796 --> 00:50:00.976
that we've spent the
bulk of the talk on.

1042
00:49:59.796 --> 00:50:00.976
that we've spent the
bulk of the talk on.

1043
00:50:03.826 --> 00:50:06.726
All of the AVCaptureDevice
manual controls happen

1044
00:50:06.726 --> 00:50:07.336
in real time.

1045
00:50:08.406 --> 00:50:11.496
You set an exposure, it
executes your command.

1046
00:50:11.936 --> 00:50:15.586
That's great, but sometimes
you need to capture a moment

1047
00:50:15.586 --> 00:50:18.066
in time a variety
of different ways.

1048
00:50:18.666 --> 00:50:21.156
You need to capture one
picture but you want

1049
00:50:21.156 --> 00:50:22.286
to set different settings.

1050
00:50:22.806 --> 00:50:25.736
So, wouldn't it be great if
you could preprogram the camera

1051
00:50:26.266 --> 00:50:29.646
to give you several images
in a row of the same scene,

1052
00:50:29.876 --> 00:50:32.486
but with different exposure
values for each one.

1053
00:50:32.916 --> 00:50:36.716
And then issue that command and
have it execute that command

1054
00:50:36.716 --> 00:50:39.076
as a group and then give you
those three or four images back.

1055
00:50:40.006 --> 00:50:41.846
That's exactly what
bracketed capture is.

1056
00:50:42.476 --> 00:50:47.546
It's a burst of still images
taken with varied settings

1057
00:50:47.546 --> 00:50:48.506
from picture to picture.

1058
00:50:49.966 --> 00:50:53.596
Some common examples would
be an exposure bracket,

1059
00:50:53.596 --> 00:50:54.566
two different flavors.

1060
00:50:54.806 --> 00:50:57.736
The first is an auto
exposure bracket

1061
00:50:57.926 --> 00:51:01.886
where you are differing the
bias from image to image,

1062
00:50:57.926 --> 00:51:01.886
where you are differing the
bias from image to image,

1063
00:51:02.266 --> 00:51:04.396
minus two, zero, plus two.

1064
00:51:05.136 --> 00:51:08.006
Some reasons for doing
that might be if you want

1065
00:51:08.046 --> 00:51:12.266
to do some highlight recovery
such as an HDR fusion algorithm.

1066
00:51:12.476 --> 00:51:13.986
You could take an
underexposed image,

1067
00:51:13.986 --> 00:51:15.986
an overexposed image,
fuse them together.

1068
00:51:17.066 --> 00:51:19.996
The other case is manual
where you have full control

1069
00:51:19.996 --> 00:51:22.856
over shutter speed and ISO and
you set those independently

1070
00:51:22.856 --> 00:51:24.206
for each image in the bracket.

1071
00:51:25.216 --> 00:51:26.186
Why might you want to do that?

1072
00:51:26.566 --> 00:51:30.666
Well, creative exposure effects,
different combinations of long

1073
00:51:30.666 --> 00:51:32.366
and short exposure
duration, for instance.

1074
00:51:33.646 --> 00:51:36.486
And the simplest of all
brackets is the bracket

1075
00:51:36.486 --> 00:51:37.876
where you don't vary anything.

1076
00:51:38.476 --> 00:51:39.896
It's just a simple burst bracket

1077
00:51:39.896 --> 00:51:41.806
and that might be good
for a finish line.

1078
00:51:45.506 --> 00:51:48.156
So, without further
ado let's have a demo

1079
00:51:48.236 --> 00:51:50.186
of bracketed capture with John.

1080
00:51:50.626 --> 00:51:50.956
Come on up.

1081
00:51:51.516 --> 00:51:57.876
[ Applause ]

1082
00:51:58.376 --> 00:51:58.896
>> Thanks, Brad.

1083
00:51:59.066 --> 00:52:00.986
My name is John Papandriopoulos.

1084
00:51:59.066 --> 00:52:00.986
My name is John Papandriopoulos.

1085
00:52:01.096 --> 00:52:02.796
I'm great, it's great
to be here.

1086
00:52:02.796 --> 00:52:04.686
I'm an engineer on the
Camera Software Team.

1087
00:52:04.766 --> 00:52:07.146
So, this is a two-part demo.

1088
00:52:07.146 --> 00:52:10.366
The first part we're going to be
looking at exposure compensation

1089
00:52:10.696 --> 00:52:13.416
and performing a bracketed
capture of three frames

1090
00:52:13.606 --> 00:52:18.836
where we have an underexposed
frame or image, a well-lit image

1091
00:52:18.896 --> 00:52:22.196
and an overexposed
image using EV values

1092
00:52:22.196 --> 00:52:24.396
of minus two, zero and plus two.

1093
00:52:24.766 --> 00:52:28.816
So, let's go ahead and take a
capture and what we've done is,

1094
00:52:28.896 --> 00:52:32.586
as these frames have been
captured, we process them

1095
00:52:32.586 --> 00:52:34.466
in real-time and stripe them.

1096
00:52:34.666 --> 00:52:38.856
So, we actually take a
strip from the first image

1097
00:52:39.166 --> 00:52:41.466
and then put that
into an output buffer

1098
00:52:41.466 --> 00:52:44.286
that you see on the screen here.

1099
00:52:44.286 --> 00:52:46.426
The second one beneath
that comes

1100
00:52:46.506 --> 00:52:51.016
from the second captured frame,
in this case a well-lit frame

1101
00:52:51.276 --> 00:52:54.946
and then an underexposed
frame following that.

1102
00:52:55.576 --> 00:53:00.216
So, now I'm going to go into the
fully manual bracketed capture

1103
00:52:55.576 --> 00:53:00.216
So, now I'm going to go into the
fully manual bracketed capture

1104
00:53:00.216 --> 00:53:02.936
mode that we support
where we have full control

1105
00:53:02.936 --> 00:53:04.216
over ISO and duration.

1106
00:53:04.216 --> 00:53:06.746
What we're going to do in
this case is we're going

1107
00:53:06.746 --> 00:53:09.986
to perform a three
frame bracketed capture

1108
00:53:10.106 --> 00:53:12.986
where we have control over
the duration or shutter speed

1109
00:53:13.196 --> 00:53:19.106
and we're going to be setting
that for a short shutter speed,

1110
00:53:19.336 --> 00:53:22.996
a medium shutter speed and
then a fast shutter speed.

1111
00:53:23.066 --> 00:53:26.266
So Brad, if you were to walk
across there and we capture

1112
00:53:26.266 --> 00:53:30.386
that what we can see here is
that we have a blurry image

1113
00:53:30.386 --> 00:53:31.546
at the top of Brad's head.

1114
00:53:31.946 --> 00:53:35.366
That's where we had
a very slow shutter.

1115
00:53:35.366 --> 00:53:38.786
We have a little bit more
crisp for his chin there

1116
00:53:38.986 --> 00:53:41.796
and then you can see his
torso is quite crisp.

1117
00:53:42.276 --> 00:53:45.136
And if we look really
closely there you might see

1118
00:53:45.136 --> 00:53:46.596
that there's a lot
of noise there.

1119
00:53:46.596 --> 00:53:50.006
What we've had to do is adjust
the ISO and increase the gain

1120
00:53:50.006 --> 00:53:52.926
to compensate for the small
amount of light that was going

1121
00:53:52.926 --> 00:53:54.836
in at that fast shutter speed.

1122
00:53:54.906 --> 00:53:56.976
Thanks very much, can't wait
to see what you do with it.

1123
00:53:57.516 --> 00:54:03.906
[ Applause ]

1124
00:53:57.516 --> 00:54:03.906
[ Applause ]

1125
00:54:04.406 --> 00:54:06.976
>> Thanks John for
slicing and dicing me.

1126
00:54:08.796 --> 00:54:11.776
Bracketed capture is all
implemented in a single class

1127
00:54:12.466 --> 00:54:15.096
and that's the
AVCaptureStillImageOutput.

1128
00:54:15.406 --> 00:54:18.376
That's the object that you use
to take pictures in our API.

1129
00:54:19.206 --> 00:54:21.626
So, how does it work?

1130
00:54:23.166 --> 00:54:26.186
Well, if you've used
AVCaptureStillImageOutput before

1131
00:54:26.186 --> 00:54:29.556
you'll be familiar with its
single image capture interface,

1132
00:54:30.086 --> 00:54:30.816
which is this.

1133
00:54:30.816 --> 00:54:34.586
You call captureStillImage
AsynchronouslyFrom Connection.

1134
00:54:35.156 --> 00:54:38.256
That takes a picture
and at some point

1135
00:54:38.256 --> 00:54:42.046
when it's done it calls you back
with that single image buffer.

1136
00:54:43.076 --> 00:54:46.566
For bracketed capture it
looks largely the same.

1137
00:54:47.306 --> 00:54:51.246
The bracketed capture interface
is captureStillImageBracket

1138
00:54:51.466 --> 00:54:53.136
AsynchronouslyFromConnection.

1139
00:54:53.816 --> 00:54:56.736
The only difference is that
it has a second parameter,

1140
00:54:56.736 --> 00:55:00.496
an additional parameter, which
is the settings array and that's

1141
00:54:56.736 --> 00:55:00.496
an additional parameter, which
is the settings array and that's

1142
00:55:00.496 --> 00:55:03.786
where you're giving it the array
of things that you want to vary

1143
00:55:03.876 --> 00:55:06.536
from picture to picture.

1144
00:55:06.826 --> 00:55:09.296
We have two new objects,
two new classes

1145
00:55:09.756 --> 00:55:13.786
to represent the settings for
a single image in the bracket.

1146
00:55:14.476 --> 00:55:17.156
The first is for the
exposure compensation

1147
00:55:17.156 --> 00:55:18.796
or auto exposure bracket.

1148
00:55:19.376 --> 00:55:24.296
So, one AVCaptureAutoExposure
BracketedStillImageSettings

1149
00:55:24.396 --> 00:55:27.646
object equals one of those
pictures in the bracket.

1150
00:55:28.126 --> 00:55:31.646
And here you get to set an
exposure target bias, minus one,

1151
00:55:31.846 --> 00:55:37.796
plus one, etc. For manual
exposure brackets you use an

1152
00:55:37.796 --> 00:55:39.796
object that lets
you set both ISO

1153
00:55:39.866 --> 00:55:41.696
and duration for
that one picture.

1154
00:55:42.306 --> 00:55:46.026
Now, there are some
dos and don'ts.

1155
00:55:46.026 --> 00:55:47.606
Let's cover the don'ts first.

1156
00:55:48.136 --> 00:55:49.886
In bracketed capture
we don't allow you

1157
00:55:49.886 --> 00:55:52.216
to mix bracketed
settings classes.

1158
00:55:52.286 --> 00:55:54.326
That means you can't
have a half manual,

1159
00:55:54.396 --> 00:55:56.216
half auto exposure bracket.

1160
00:55:56.256 --> 00:55:59.466
You have to have an all auto
or all manual exposure bracket.

1161
00:55:59.936 --> 00:56:03.296
Also, there is a limit to the
number of images you can take

1162
00:55:59.936 --> 00:56:03.296
Also, there is a limit to the
number of images you can take

1163
00:56:03.296 --> 00:56:06.276
in a bracket and you
must not request more

1164
00:56:06.276 --> 00:56:09.176
than maxBracketedCapture
StillImageCount.

1165
00:56:09.846 --> 00:56:14.216
That will vary from platform
to platform and also depends

1166
00:56:14.216 --> 00:56:17.296
on resolution and the output
format that you are asking for.

1167
00:56:18.236 --> 00:56:22.746
Now, the dos, do prepare for
the worst case and the way

1168
00:56:22.746 --> 00:56:25.436
that you do that is
by calling prepare.

1169
00:56:25.846 --> 00:56:29.206
You're telling the AVCapture
still image output at some point

1170
00:56:29.206 --> 00:56:30.946
in the future I am
going to take a bracket.

1171
00:56:31.436 --> 00:56:33.796
And you tell it what kind of
bracket you're going to take

1172
00:56:33.796 --> 00:56:36.116
by passing the exact settings
that you're going to use.

1173
00:56:36.616 --> 00:56:39.616
And by telling it beforehand to
prepare itself for that bracket,

1174
00:56:39.946 --> 00:56:42.286
it can do all of the buffer
allocations that it needs

1175
00:56:42.286 --> 00:56:44.006
to up front so that when you ask

1176
00:56:44.006 --> 00:56:46.346
for the bracket there'll
be no shutter lag.

1177
00:56:46.346 --> 00:56:47.506
It will happen very quickly.

1178
00:56:48.796 --> 00:56:51.796
You should always assume that
the sample buffers are coming

1179
00:56:51.836 --> 00:56:53.566
from a shared memory pool.

1180
00:56:53.916 --> 00:56:56.816
In other words, don't ask
for one bracketed capture

1181
00:56:56.816 --> 00:56:59.266
and then hold onto those buffers
and then ask for a second one,

1182
00:56:59.406 --> 00:57:00.876
because the second
one is going to fail.

1183
00:56:59.406 --> 00:57:00.876
because the second
one is going to fail.

1184
00:57:01.516 --> 00:57:03.736
You must CFrelease
the buffers given

1185
00:57:03.736 --> 00:57:06.536
from the first bracket before
asking for a second bracket.

1186
00:57:07.706 --> 00:57:12.316
If you want to reclaim the
memory that was prepared

1187
00:57:12.616 --> 00:57:14.676
from a previous prepare
call the way

1188
00:57:14.676 --> 00:57:17.226
to do it is just call
prepare again with an array

1189
00:57:17.226 --> 00:57:21.216
of one object and that
will reclaim the memory.

1190
00:57:21.806 --> 00:57:24.136
Now, some fine details
about bracketed capture.

1191
00:57:25.356 --> 00:57:26.896
What happens-what's
the interaction

1192
00:57:26.896 --> 00:57:29.196
between the AVCaptureDevice
manual controls

1193
00:57:29.196 --> 00:57:30.336
and bracketed capture?

1194
00:57:30.456 --> 00:57:31.836
Well, the bracketed
capture wins.

1195
00:57:32.316 --> 00:57:35.096
So, when you're doing a
bracketed capture all the manual

1196
00:57:35.096 --> 00:57:35.846
controls you set

1197
00:57:35.846 --> 00:57:38.706
on the AVCaptureDevice
are temporarily overridden

1198
00:57:38.706 --> 00:57:40.286
and then they go back
to what they were

1199
00:57:40.346 --> 00:57:41.526
after the bracketed capture.

1200
00:57:42.776 --> 00:57:47.416
Also, flash and still image
stabilization are ignored during

1201
00:57:47.416 --> 00:57:48.366
a bracket.

1202
00:57:49.186 --> 00:57:52.146
And all images in a single
bracket must have the same

1203
00:57:52.146 --> 00:57:57.306
output format, be
it jpeg, 420f, VGRA.

1204
00:57:58.066 --> 00:58:01.196
Also note that because you
might be doing long durations,

1205
00:57:58.066 --> 00:58:01.196
Also note that because you
might be doing long durations,

1206
00:58:01.196 --> 00:58:04.566
it might need to expose for a
long time, that it is typical

1207
00:58:04.566 --> 00:58:08.916
for you to see video preview
drop frames while an exposure

1208
00:58:08.916 --> 00:58:09.866
bracket is being taken.

1209
00:58:11.416 --> 00:58:13.716
And finally, bracketed
capture is supported

1210
00:58:13.826 --> 00:58:16.496
on all iOS devices in iOS 8.

1211
00:58:18.376 --> 00:58:22.196
Whew, that concludes our lovely
lunch, time for the check.

1212
00:58:23.306 --> 00:58:24.056
So, what do we got here?

1213
00:58:24.056 --> 00:58:27.516
We've got AVCaptureView
on Yosemite, a standard UI

1214
00:58:28.336 --> 00:58:31.566
for doing recording,
iOS screen recording

1215
00:58:31.676 --> 00:58:35.286
for app previews-for all
you people that make apps

1216
00:58:35.286 --> 00:58:36.856
on the App Store, you'll
want to check that out,

1217
00:58:37.506 --> 00:58:40.056
access to the hardware
video encoder in real-time,

1218
00:58:40.326 --> 00:58:42.086
special session about
that tomorrow,

1219
00:58:42.706 --> 00:58:44.276
powerful new camera controls.

1220
00:58:44.426 --> 00:58:47.886
We talked about focus,
exposure, exposure compensation

1221
00:58:48.276 --> 00:58:51.866
and white balance, and
finally, still image bracketing.

1222
00:58:52.996 --> 00:58:57.666
The two apps that we used today
for the demos, AVCamManual

1223
00:58:57.666 --> 00:59:00.736
and BracketStripes
are available now.

1224
00:58:57.666 --> 00:59:00.736
and BracketStripes
are available now.

1225
00:59:01.046 --> 00:59:01.776
So, if you go and look

1226
00:59:01.776 --> 00:59:03.986
at the session info you
can go download those,

1227
00:59:04.326 --> 00:59:05.806
see what we did there,
try them out.

1228
00:59:07.696 --> 00:59:11.446
For more information here's
our evangelism contact.

1229
00:59:12.416 --> 00:59:14.686
There are a number of
related sessions to this one,

1230
00:59:14.686 --> 00:59:17.606
both for AVFoundation and
for the photos framework.

1231
00:59:17.986 --> 00:59:18.996
Some have already happened.

1232
00:59:19.496 --> 00:59:21.456
If so, go check them
out in the videos

1233
00:59:21.896 --> 00:59:23.206
and there are some
still to come.

1234
00:59:24.006 --> 00:59:24.976
Thank you and have a great show.

1235
00:59:25.016 --> 00:59:27.000
[ Applause ]
