
1
00:00:13.216 --> 00:00:15.566
>> Hello. Welcome to
the Advanced Session

2
00:00:15.566 --> 00:00:16.566
on Working with Metal.

3
00:00:17.126 --> 00:00:18.616
My name is Gokhan Avkarogullari.

4
00:00:18.996 --> 00:00:20.826
My colleagues, Aaftab
Munshi and Serhat Tekin,

5
00:00:20.826 --> 00:00:22.236
and I will be presenting
this session.

6
00:00:23.456 --> 00:00:26.186
This is the third session that
we have about Metal today.

7
00:00:26.746 --> 00:00:28.916
In the first session, Jeremy
introduced Metal to us.

8
00:00:29.256 --> 00:00:32.625
He talked about the motivation
behind Metal, the structures

9
00:00:32.625 --> 00:00:35.866
that we build the Metal on,
and concluded it with a demo

10
00:00:36.056 --> 00:00:39.316
from Crytek on collectibles
with thousands of draw calls.

11
00:00:39.906 --> 00:00:42.066
We followed up with the
second session where we talked

12
00:00:42.066 --> 00:00:44.056
about fundamentals of Metal.

13
00:00:44.786 --> 00:00:47.846
We talked about creating your
first application with Metal,

14
00:00:48.366 --> 00:00:51.296
drawing an animated triangle
on the screen, and followed it

15
00:00:51.296 --> 00:00:54.206
up with the details about
the shading language.

16
00:00:55.116 --> 00:00:57.606
In this session, we're going
to do a more deeper dive

17
00:00:57.906 --> 00:01:00.976
into creating a full blown
graphics application with Metal.

18
00:00:57.906 --> 00:01:00.976
into creating a full blown
graphics application with Metal.

19
00:01:01.456 --> 00:01:03.656
We'll follow it up with
data-parallel computing

20
00:01:03.656 --> 00:01:06.996
on the GPU using Metal and
finally, we'll have a demo

21
00:01:07.526 --> 00:01:10.026
of the developer tools
that we build from Metal.

22
00:01:11.326 --> 00:01:15.706
Ok, so let's talk about
why multi-pass applications

23
00:01:15.706 --> 00:01:16.276
are relevant.

24
00:01:16.976 --> 00:01:19.736
The modern graphics applications
are very complicated pieces

25
00:01:19.736 --> 00:01:20.326
of software.

26
00:01:20.966 --> 00:01:23.716
They're built on using
many, many advanced graphics

27
00:01:23.716 --> 00:01:27.606
and computer algorithms and they
do them in a piecewise manner.

28
00:01:27.706 --> 00:01:30.716
Basically they're built on many,
many hundreds of texture passes

29
00:01:30.716 --> 00:01:32.396
and compute passes
and blip passes

30
00:01:32.746 --> 00:01:35.546
to generate a final great
looking image on the screen.

31
00:01:36.476 --> 00:01:38.116
So we're going to go and
talk about a little bit how

32
00:01:38.116 --> 00:01:39.146
to do that using Metal.

33
00:01:40.146 --> 00:01:43.326
We will talk about multiple
frame buffer configurations,

34
00:01:43.826 --> 00:01:48.116
rendering to off-screen and
on-screen textures, using meshes

35
00:01:48.116 --> 00:01:50.026
and different things
with different states

36
00:01:50.026 --> 00:01:51.856
and in different configurations,

37
00:01:52.296 --> 00:01:54.086
and how to set up
multiple encoders.

38
00:01:55.416 --> 00:01:58.536
We'll use a deferred lighting
with a shadow map example

39
00:01:59.096 --> 00:02:01.046
to basically walk through
these code examples.

40
00:01:59.096 --> 00:02:01.046
to basically walk through
these code examples.

41
00:02:01.096 --> 00:02:04.546
This is a two-pass
application that we built

42
00:02:04.686 --> 00:02:06.386
for this particular
presentation.

43
00:02:06.886 --> 00:02:08.985
In the first pass, we
have a shadow map pass

44
00:02:08.985 --> 00:02:11.476
where we rendered the
scene from the perspective

45
00:02:11.476 --> 00:02:13.606
of the directional
light to a depth buffer.

46
00:02:13.936 --> 00:02:17.456
And in the second pass we set
up a G-buffer, fat G-buffer,

47
00:02:17.606 --> 00:02:18.976
through multiple render targets.

48
00:02:19.486 --> 00:02:21.276
We generate attributes
in that G-buffer

49
00:02:21.756 --> 00:02:24.716
and we apply the point light
volumes onto that G-buffer

50
00:02:24.716 --> 00:02:26.366
to find out which
pixels are affected.

51
00:02:26.786 --> 00:02:28.936
And finally, using
the framebuffer fetch,

52
00:02:29.616 --> 00:02:31.876
create light accumulation
information and then merge

53
00:02:31.876 --> 00:02:34.136
with the albedo textures
to generate a final image.

54
00:02:34.946 --> 00:02:37.616
Having said that, we're
not really interested

55
00:02:37.616 --> 00:02:40.706
in describing the example in
here; it's just a vehicle for us

56
00:02:40.706 --> 00:02:42.036
to basically talk
about the APIs.

57
00:02:42.036 --> 00:02:45.416
On top of that, the example
is actually published

58
00:02:45.416 --> 00:02:48.446
as a sample code on
the developer website

59
00:02:48.446 --> 00:02:50.426
so you can go ahead and
download it and take a look

60
00:02:50.426 --> 00:02:53.576
at it later if you
would like to.

61
00:02:53.776 --> 00:02:55.666
The way the example
is structured is

62
00:02:55.666 --> 00:02:56.846
that it has two passes.

63
00:02:57.266 --> 00:02:59.786
Both of them are
RenderCommandEncoder passes.

64
00:03:00.226 --> 00:03:02.856
The first one is for shadow
map and the second one is

65
00:03:02.856 --> 00:03:04.066
for the deferred lighting pass.

66
00:03:04.636 --> 00:03:06.576
They're all encoded
into a single buffer

67
00:03:06.576 --> 00:03:09.446
which is...and the
single command buffer goes

68
00:03:09.446 --> 00:03:10.406
into a command queue.

69
00:03:10.736 --> 00:03:13.676
So this is kind of what most
applications will look like;

70
00:03:14.016 --> 00:03:16.666
multiple render texture passes
going into a command encoder

71
00:03:16.666 --> 00:03:19.006
on a frame boundary that's
sent to the command queue.

72
00:03:19.926 --> 00:03:22.096
I'll give a demo
of the application.

73
00:03:23.516 --> 00:03:27.576
[ Pause ]

74
00:03:28.076 --> 00:03:31.556
Ok, I have it here.

75
00:03:31.766 --> 00:03:33.836
So this is the upload
of the first pass

76
00:03:33.836 --> 00:03:36.096
where we are rendering
basically through that buffer

77
00:03:36.096 --> 00:03:38.566
from the perspective of
the directional light.

78
00:03:39.956 --> 00:03:42.566
And this is how our
G-buffer is laid out.

79
00:03:42.566 --> 00:03:44.506
On the top left we normally
have albedo texture,

80
00:03:44.506 --> 00:03:47.336
but we're showing basically the
combined image that is going

81
00:03:47.336 --> 00:03:49.886
to go to the screen
when we're actually done

82
00:03:49.886 --> 00:03:50.846
with our entire rendering.

83
00:03:51.266 --> 00:03:53.046
And there's a normal
buffer, and a depth buffer,

84
00:03:53.046 --> 00:03:54.326
and a light accumulation buffer,

85
00:03:54.716 --> 00:03:58.346
four-color buffers basically
attached to a framebuffer

86
00:03:58.706 --> 00:04:00.356
and depth and stencil
buffers as well.

87
00:03:58.706 --> 00:04:00.356
and depth and stencil
buffers as well.

88
00:04:01.376 --> 00:04:02.386
This is the light accumulation;

89
00:04:02.386 --> 00:04:04.436
there's also the light
accumulation pass.

90
00:04:04.986 --> 00:04:06.396
And these are the visualization

91
00:04:06.396 --> 00:04:08.926
of the lights basically
using light volumes.

92
00:04:09.116 --> 00:04:10.566
They're mapped onto the screen.

93
00:04:11.816 --> 00:04:15.176
And finally this is the final
image that goes to the display.

94
00:04:15.176 --> 00:04:17.745
It looks a lot better on the
device than on the presentation.

95
00:04:18.046 --> 00:04:23.296
Ok, let's go back
to our presentation.

96
00:04:24.816 --> 00:04:29.306
Ok, so how do we set up
an application like this

97
00:04:29.306 --> 00:04:31.516
or more complicated
ones that you have seen

98
00:04:31.846 --> 00:04:35.036
in the demos using Metal?

99
00:04:35.616 --> 00:04:37.576
Just like Jeremy talked about
in the first session and looked

100
00:04:37.576 --> 00:04:40.226
at the things that...at what
frequency things are done

101
00:04:40.226 --> 00:04:42.156
and moved the most heavy ones

102
00:04:42.156 --> 00:04:44.496
to the least frequently
done stages.

103
00:04:44.886 --> 00:04:47.916
An application has a lot of
things that are done once

104
00:04:48.366 --> 00:04:50.296
and there are things that
are done at low-level times

105
00:04:50.296 --> 00:04:53.576
or streaming time, and there
are things done every frame

106
00:04:53.716 --> 00:04:55.496
and in an application
there are also things

107
00:04:55.496 --> 00:04:56.606
that are render to textures.

108
00:04:56.606 --> 00:04:58.996
So we're going to look at
each category and figure

109
00:04:58.996 --> 00:05:01.556
out what is done in these
categories and figure out how

110
00:04:58.996 --> 00:05:01.556
out what is done in these
categories and figure out how

111
00:05:01.556 --> 00:05:02.416
to do those with Metal.

112
00:05:03.706 --> 00:05:05.446
Let's start with the
things that are done once.

113
00:05:05.896 --> 00:05:06.816
Creating a device.

114
00:05:06.816 --> 00:05:09.426
They are the only ones you queue
on the system so you're going

115
00:05:09.426 --> 00:05:12.616
to get a GPU and are
handled through the GPU,

116
00:05:12.966 --> 00:05:15.636
and creating a command queue
on the GPU is only done once

117
00:05:16.076 --> 00:05:17.686
in most of the applications.

118
00:05:18.086 --> 00:05:20.176
And Richard told you something
about this; I'm not going

119
00:05:20.176 --> 00:05:22.076
to talk about that
in this session.

120
00:05:23.076 --> 00:05:24.596
There are things
we do as needed.

121
00:05:25.086 --> 00:05:27.096
For example, we know
up front in all

122
00:05:27.196 --> 00:05:29.286
of our applications
what our render

123
00:05:29.286 --> 00:05:30.696
to texture stages will be.

124
00:05:30.696 --> 00:05:33.826
There are usually a set of
render to texture passes,

125
00:05:33.826 --> 00:05:36.166
that are known up front for
like an indoor environment

126
00:05:36.466 --> 00:05:38.576
or an outdoor environment and
they might change if there's

127
00:05:38.576 --> 00:05:41.146
like wetnesses included
or something like that

128
00:05:41.146 --> 00:05:42.776
but most of them are up front.

129
00:05:42.776 --> 00:05:45.466
You know as an application
developer what your render

130
00:05:45.466 --> 00:05:47.896
to texture passes will be,
in what order they're going

131
00:05:47.896 --> 00:05:50.236
to be done, and what kind of
framebuffers that are going

132
00:05:50.236 --> 00:05:50.756
to be used with those.

133
00:05:50.756 --> 00:05:53.456
So we can actually
define...create the framebuffer

134
00:05:53.456 --> 00:05:54.796
textures for those passes

135
00:05:54.796 --> 00:05:56.456
and define what those
textures are going to look

136
00:05:56.456 --> 00:05:58.216
like up front at once.

137
00:05:58.786 --> 00:06:00.476
And at level load time,

138
00:05:58.786 --> 00:06:00.476
And at level load time,

139
00:06:00.476 --> 00:06:03.996
we can download our assets
including our meshes, textures

140
00:06:04.416 --> 00:06:07.616
and then basically our shaders
and associate with those shaders

141
00:06:07.616 --> 00:06:10.016
to create pipeline objects,
and the pipeline objects.

142
00:06:10.496 --> 00:06:13.506
And of course we can
create our uniform buffers

143
00:06:13.506 --> 00:06:14.376
up front as well.

144
00:06:15.476 --> 00:06:17.966
These are the things that we
do either at level load time

145
00:06:18.456 --> 00:06:21.676
at once or depending on if we're
going to stream load or not,

146
00:06:22.116 --> 00:06:24.406
at other times as well
but only as needed.

147
00:06:24.956 --> 00:06:28.866
In our example, we're using
a single command buffer

148
00:06:28.866 --> 00:06:31.256
to submit a set of
render to texture passes

149
00:06:31.486 --> 00:06:34.366
to basically have the results
of our render to texture passes

150
00:06:34.366 --> 00:06:35.476
to show up on the screen

151
00:06:35.476 --> 00:06:38.616
so that's basically a
frame boundary operation.

152
00:06:38.616 --> 00:06:41.036
Every time you want to have
something to go to the screen,

153
00:06:41.036 --> 00:06:43.096
we're going to basically create
a command buffer and use it

154
00:06:43.096 --> 00:06:44.866
to encode our render
to texture passes

155
00:06:44.866 --> 00:06:46.906
so this is something
we do every frame.

156
00:06:47.436 --> 00:06:50.016
Of course there are uniform
buffers that need to be updated

157
00:06:50.016 --> 00:06:52.386
on frame boundaries; that's
where you do it as well.

158
00:06:52.976 --> 00:06:57.126
And finally the things we do
every render to texture pass

159
00:06:57.126 --> 00:07:00.576
such as encoding the command
so that GPU can understand.

160
00:06:57.126 --> 00:07:00.576
such as encoding the command
so that GPU can understand.

161
00:07:00.926 --> 00:07:02.576
Setting up the states
and resources,

162
00:07:02.576 --> 00:07:03.856
and initiating draw calls.

163
00:07:03.916 --> 00:07:06.236
And then finally,
finishing the encoding

164
00:07:06.236 --> 00:07:07.576
so you can go to
the next encoder.

165
00:07:08.796 --> 00:07:10.846
So these are the things we do
every render to texture pass

166
00:07:10.846 --> 00:07:12.956
and we're going to basically
look at each one of them

167
00:07:12.956 --> 00:07:15.966
and understand how Metal is
used to do these operations.

168
00:07:18.446 --> 00:07:23.236
Ok, let's start with the
things that we do as needed

169
00:07:23.606 --> 00:07:27.296
and understand how we can setup
information for our render

170
00:07:27.296 --> 00:07:29.176
to texture passes
up front so that

171
00:07:29.176 --> 00:07:31.106
when we create our
encoders; all the information

172
00:07:31.106 --> 00:07:33.456
that is necessary for
that encoding is ready.

173
00:07:34.626 --> 00:07:37.026
But before we go there, I'd
like to speak a little bit

174
00:07:37.026 --> 00:07:39.616
about descriptors because all
of the code examples have lots

175
00:07:39.616 --> 00:07:42.356
of descriptors and I'd
like to establish that all

176
00:07:42.356 --> 00:07:44.236
of the descriptor...that all

177
00:07:44.236 --> 00:07:47.076
of the descriptors are
defining how an object is going

178
00:07:47.076 --> 00:07:47.716
to be created.

179
00:07:47.716 --> 00:07:49.826
It's like the blueprint and just

180
00:07:49.826 --> 00:07:52.336
like the blueprints
you basically use

181
00:07:52.336 --> 00:07:55.266
to build a house from,
once a house is built,

182
00:07:55.266 --> 00:07:57.236
you don't have actually
a connection back

183
00:07:57.236 --> 00:07:57.946
to the blueprint.

184
00:07:57.946 --> 00:08:00.706
You cannot change the blueprint
and see in fact a change

185
00:07:57.946 --> 00:08:00.706
You cannot change the blueprint
and see in fact a change

186
00:08:00.996 --> 00:08:02.126
on an already built house.

187
00:08:02.536 --> 00:08:05.036
You cannot change a
descriptor and expect a change

188
00:08:05.066 --> 00:08:06.756
to the built object
from that descriptor.

189
00:08:06.756 --> 00:08:10.136
Descriptors are there to define
what objects are going to be,

190
00:08:10.136 --> 00:08:12.136
but once they're created,
the connection is lost.

191
00:08:12.936 --> 00:08:15.826
But just like a blueprint as
well, a descriptor can be used

192
00:08:15.826 --> 00:08:18.916
to create more instances
of the same kind of object

193
00:08:19.356 --> 00:08:21.926
or they can modify it a little
bit to create a different kind

194
00:08:21.926 --> 00:08:25.726
of object that shares
some of the personality

195
00:08:25.726 --> 00:08:26.926
of the previous object.

196
00:08:28.256 --> 00:08:32.346
And as Jeremy pointed out
before, everything except

197
00:08:32.346 --> 00:08:33.916
for a few states
that you can set

198
00:08:33.916 --> 00:08:35.986
on the render encoders
are actually built

199
00:08:36.306 --> 00:08:38.986
into the state objects
and the resources

200
00:08:38.986 --> 00:08:42.015
and they are immutable, which
gives us the opportunity acutely

201
00:08:42.346 --> 00:08:45.486
to avoid the state
validation at the draw time.

202
00:08:46.016 --> 00:08:49.116
So a descriptor built an
object and pretty much

203
00:08:49.116 --> 00:08:51.416
that object is immutable
after that point.

204
00:08:51.796 --> 00:08:54.356
That basically makes the
Metal a lower overhead API

205
00:08:54.416 --> 00:08:57.686
by avoiding all the state
tracking, all the state changes,

206
00:08:57.956 --> 00:08:59.406
and reflecting them
at the draw time.

207
00:09:00.046 --> 00:09:00.976
Ok, let's go back

208
00:09:00.976 --> 00:09:04.496
to our framebuffer
configuration,

209
00:09:04.496 --> 00:09:05.316
how we set up that.

210
00:09:06.806 --> 00:09:09.366
Ok, so for
RenderCommandEncoders,

211
00:09:09.366 --> 00:09:12.006
we need to know about the
nature of the framebuffer,

212
00:09:12.256 --> 00:09:14.366
like how many color
detections there are,

213
00:09:14.366 --> 00:09:16.436
what kind of pixel types
there are, the depth

214
00:09:16.436 --> 00:09:18.516
and stencil attachment;
things of that sort.

215
00:09:18.996 --> 00:09:21.656
And those are defined through
a RenderPassDescriptor.

216
00:09:22.156 --> 00:09:25.396
We are allowed up to four color
attachments that are allowed

217
00:09:25.396 --> 00:09:27.676
on Metal and we can
attach a depth

218
00:09:27.676 --> 00:09:29.266
and stencil buffer as well.

219
00:09:29.776 --> 00:09:32.056
And the attachments
themselves are also described

220
00:09:32.056 --> 00:09:34.136
to in other descriptor
that's embedded

221
00:09:34.136 --> 00:09:35.526
into the RenderPassDescriptor,

222
00:09:35.526 --> 00:09:38.656
which is
RenderPassAttachmentDescriptor.

223
00:09:38.936 --> 00:09:42.526
In this descriptor, we basically
define what kind of load

224
00:09:42.526 --> 00:09:45.956
and store actions clear
values and what kind of slice

225
00:09:46.056 --> 00:09:48.686
or mid-level that we're
going to render into;

226
00:09:48.936 --> 00:09:50.806
all of these are
basically defined here.

227
00:09:51.876 --> 00:09:55.166
And it also points to the
texture that we're going

228
00:09:55.166 --> 00:09:56.376
to use to render into.

229
00:09:57.036 --> 00:09:59.636
So this pass descriptor
basically has all

230
00:09:59.636 --> 00:09:59.976
the information

231
00:10:00.136 --> 00:10:00.716
necessary

232
00:10:00.716 --> 00:10:03.036
for a RenderCommandEncoder
to get going.

233
00:10:03.036 --> 00:10:06.316
And we're going to look at
the two passes that we have;

234
00:10:06.746 --> 00:10:10.266
the shadow pass and the deferred
lighting pass in our example

235
00:10:10.266 --> 00:10:12.826
and build render pass
descriptors for those.

236
00:10:13.486 --> 00:10:15.326
So let's start with
the shadowRenderPass.

237
00:10:15.986 --> 00:10:18.306
In this case we only
have a depth buffer;

238
00:10:18.576 --> 00:10:21.296
we don't have any color buffers
attached because all we want is

239
00:10:21.296 --> 00:10:23.916
to create a shadow map
buffer that we can use later

240
00:10:24.086 --> 00:10:27.476
to basically see if a
pixel is all clear or not.

241
00:10:28.736 --> 00:10:31.816
So we're going to start with
creating the texture for that

242
00:10:31.816 --> 00:10:36.016
and what we have in here is
basically a 1k by 1k texture

243
00:10:36.016 --> 00:10:40.826
with no mipmapping, a
depth for 32 texture.

244
00:10:41.436 --> 00:10:46.286
It is created on the device as
we talked extensively before.

245
00:10:46.286 --> 00:10:51.136
There's no concept of context or
shared groups like GL on Metal.

246
00:10:52.176 --> 00:10:54.936
Every resource is created on
the device, they are visible

247
00:10:54.936 --> 00:10:58.796
by the GPU, and also you can
independently modify them,

248
00:10:59.426 --> 00:11:02.596
not the objects themselves,
but like the texture data

249
00:10:59.426 --> 00:11:02.596
not the objects themselves,
but like the texture data

250
00:11:02.596 --> 00:11:06.726
or the buffer data, read that in
a requirement of bind to modify.

251
00:11:07.236 --> 00:11:10.496
You can modify them any time you
want as long as you're careful

252
00:11:10.496 --> 00:11:12.916
that they are not modified
while the GPU is accessing them

253
00:11:13.336 --> 00:11:15.346
and as long as you make sure
that memory coincident rules

254
00:11:15.346 --> 00:11:17.406
at the command buffer
boundaries is followed.

255
00:11:17.516 --> 00:11:21.626
After we have our texture,

256
00:11:21.896 --> 00:11:23.626
we can create our
render pass descriptor.

257
00:11:24.196 --> 00:11:28.176
We're going to assign this
texture to the depth detector

258
00:11:28.176 --> 00:11:29.406
of render pass descriptor

259
00:11:29.406 --> 00:11:31.326
because it has only
a single attachment.

260
00:11:32.496 --> 00:11:35.696
And then define the properties
such as the clear value,

261
00:11:35.696 --> 00:11:36.976
load and store actions.

262
00:11:37.286 --> 00:11:39.586
We talked extensively about
load and store actions before.

263
00:11:39.906 --> 00:11:41.786
They're very important
in terms of performance

264
00:11:42.106 --> 00:11:43.206
so you should really
pay attention

265
00:11:43.206 --> 00:11:45.226
to setting them correctly
and most

266
00:11:45.226 --> 00:11:47.656
of the time the default values
are the most sensible values.

267
00:11:47.976 --> 00:11:52.676
Ok, let's go to our second pass.

268
00:11:52.676 --> 00:11:55.886
We need to also create a
descriptor for our second pass;

269
00:11:55.886 --> 00:11:58.126
we're going to actually do the
second render command encoding.

270
00:11:58.506 --> 00:12:00.256
That information will
be available up front.

271
00:11:58.506 --> 00:12:00.256
That information will
be available up front.

272
00:12:00.516 --> 00:12:02.326
Those textures are created
up front so we don't have

273
00:12:02.326 --> 00:12:05.206
to pay the penalty of doing
those at the draw time.

274
00:12:05.976 --> 00:12:09.936
In this example, we
have four color buffers,

275
00:12:09.936 --> 00:12:11.226
one of them is actually
interesting;

276
00:12:11.226 --> 00:12:12.226
the one on the top left.

277
00:12:12.716 --> 00:12:15.596
It is a buffer that we're going
to render into and then go

278
00:12:15.596 --> 00:12:16.706
and send it to the display.

279
00:12:17.136 --> 00:12:20.456
So that texture we cannot create
up front; we need to get it

280
00:12:20.456 --> 00:12:22.006
from the Metal layer,
the CAMetal layer.

281
00:12:22.286 --> 00:12:24.396
And we talked extensively about
this in the second session.

282
00:12:24.396 --> 00:12:27.756
Richard basically had a sample
code showing how we can get

283
00:12:27.756 --> 00:12:28.966
that texture from
the Metal layer.

284
00:12:29.776 --> 00:12:32.066
The other three color
textures though and the depth

285
00:12:32.066 --> 00:12:34.656
and stencil texture are
things that we know up front.

286
00:12:34.656 --> 00:12:36.716
They are structures and we
can create them up front

287
00:12:36.986 --> 00:12:38.186
and we don't have
to do them later

288
00:12:39.006 --> 00:12:40.276
so let's go ahead and do that.

289
00:12:40.876 --> 00:12:44.926
Ok, we're going to start again
with a texture descriptor

290
00:12:44.926 --> 00:12:46.896
to define how our texture
is going to look like.

291
00:12:47.206 --> 00:12:49.296
In this example I'm
going to create only two

292
00:12:49.296 --> 00:12:51.456
of the color textures
and then the rest

293
00:12:51.456 --> 00:12:52.466
of them are very similar.

294
00:12:53.636 --> 00:12:56.686
So we basically need to create
something that has a width

295
00:12:56.686 --> 00:12:59.196
and height of the
displayable surface

296
00:12:59.696 --> 00:13:02.166
and there is no mapping
required.

297
00:12:59.696 --> 00:13:02.166
and there is no mapping
required.

298
00:13:02.166 --> 00:13:04.726
So we create our first
texture using this descriptor,

299
00:13:04.726 --> 00:13:05.636
texture descriptor.

300
00:13:06.106 --> 00:13:08.186
Now as I said before,
the descriptors are kind

301
00:13:08.186 --> 00:13:11.306
of blueprints so we can
actually use the same descriptor

302
00:13:11.926 --> 00:13:14.546
and create the second
texture out of that as well.

303
00:13:14.876 --> 00:13:16.506
This is what we're going
to do as well in here.

304
00:13:16.946 --> 00:13:18.926
Basically we modify
the descriptor

305
00:13:19.286 --> 00:13:21.786
to change the pixel format and
everything like width, height,

306
00:13:22.096 --> 00:13:24.166
the mipmapping properties were
the same so we didn't have

307
00:13:24.166 --> 00:13:27.396
to modify those, and then create
the second texture with that.

308
00:13:27.396 --> 00:13:30.746
So you can see that we basically
have one descriptor creating two

309
00:13:30.746 --> 00:13:31.616
different textures.

310
00:13:32.546 --> 00:13:34.436
So now that...and
we're going to do this

311
00:13:34.436 --> 00:13:37.006
for the third color
attachment, depth and stencil.

312
00:13:37.006 --> 00:13:39.116
Now that we have done all
of those, we can go ahead

313
00:13:39.116 --> 00:13:40.726
and create our
RenderPassDescriptor

314
00:13:41.026 --> 00:13:43.566
so that we can use it later to
create our RenderCommandEncoder.

315
00:13:44.946 --> 00:13:46.206
We first create it.

316
00:13:47.306 --> 00:13:49.436
What is interesting in
here as I explained before:

317
00:13:49.826 --> 00:13:53.366
the first color attachment we
actually don't have a texture

318
00:13:53.366 --> 00:13:54.486
up front ready for it.

319
00:13:54.666 --> 00:13:57.466
We'll have it when we actually
start setting up our frame.

320
00:13:58.136 --> 00:14:02.146
So it's set to "no" initially
and eventually we'll get it

321
00:13:58.136 --> 00:14:02.146
So it's set to "no" initially
and eventually we'll get it

322
00:14:02.146 --> 00:14:04.786
from the drawable when we
create our RenderCommandEncoder.

323
00:14:05.456 --> 00:14:09.266
But despite not having
a texture,

324
00:14:09.716 --> 00:14:11.836
we know actually
the actions up front

325
00:14:11.836 --> 00:14:14.766
so we can define the clear
value, load and store actions

326
00:14:14.766 --> 00:14:16.466
on the attachment
descriptor up front.

327
00:14:17.396 --> 00:14:20.276
And we can go ahead and do it
for the second color attachment.

328
00:14:20.676 --> 00:14:24.276
As you can see in this one, I
used the texture that we created

329
00:14:24.276 --> 00:14:26.336
in the previous slide
as an attachment.

330
00:14:26.976 --> 00:14:30.116
And we can also define
the clear value,

331
00:14:30.116 --> 00:14:31.976
load and store actions
up front over here.

332
00:14:33.246 --> 00:14:35.266
I'd like to point
out the difference

333
00:14:35.266 --> 00:14:37.226
between the store
actions between these two;

334
00:14:37.626 --> 00:14:40.576
for the first buffer
attachment, we'd like it to end

335
00:14:40.576 --> 00:14:43.856
up on the screen so we'd like
it to be stored into the memory.

336
00:14:44.426 --> 00:14:46.486
But the second, third, and
fourth, color attachments,

337
00:14:46.536 --> 00:14:49.236
depth and stencil buffers,
they can be discarded;

338
00:14:49.236 --> 00:14:51.266
they're just intermediate
values that we used

339
00:14:51.266 --> 00:14:53.436
to generate the first
attachment's values.

340
00:14:53.826 --> 00:14:56.476
So we don't really need to store
them into memory; we don't want

341
00:14:56.476 --> 00:14:58.556
to lose memory bandwidth
and GP cycles

342
00:14:58.556 --> 00:15:01.446
for that expensive operation
so we set them as "don't care"

343
00:14:58.556 --> 00:15:01.446
for that expensive operation
so we set them as "don't care"

344
00:15:01.446 --> 00:15:04.406
and let the driver figure out
the best kind of operation

345
00:15:04.406 --> 00:15:06.116
for the particular GP
that you're working on.

346
00:15:07.476 --> 00:15:11.316
Ok, so that covers how we
create render pass descriptors

347
00:15:11.626 --> 00:15:14.166
that we want and the textures
associated with the framebuffers

348
00:15:14.166 --> 00:15:15.656
that we are going to use later

349
00:15:15.656 --> 00:15:17.376
for creating render
command encoders

350
00:15:17.696 --> 00:15:19.276
when we do render
to texture passes.

351
00:15:20.726 --> 00:15:23.736
Let's look at now the textures,
buffers, and state objects,

352
00:15:23.736 --> 00:15:27.396
and specifically the pipeline
state objects that we're going

353
00:15:27.396 --> 00:15:30.126
to create at level load
time so that we don't have

354
00:15:30.126 --> 00:15:31.276
to basically deal
with them later.

355
00:15:33.196 --> 00:15:35.046
We've already seen
how to create textures

356
00:15:35.046 --> 00:15:36.706
from texture descriptors;
I am not going

357
00:15:36.706 --> 00:15:37.806
to go into details of that.

358
00:15:37.806 --> 00:15:40.486
I just want to point out
that there are multiple ways

359
00:15:40.486 --> 00:15:41.936
to upload data into
your texture.

360
00:15:42.536 --> 00:15:45.076
This is one of them:
basically a CPU copy.

361
00:15:45.706 --> 00:15:47.616
And you can also use
boot command encoder

362
00:15:47.616 --> 00:15:50.936
to upload data inline through
the GPU to do that as well.

363
00:15:52.956 --> 00:15:54.676
We talked about buffers before.

364
00:15:55.176 --> 00:15:56.236
We don't have a concept

365
00:15:56.236 --> 00:15:58.836
of a vertex buffer
or a uniform buffer.

366
00:15:59.126 --> 00:16:00.766
Buffers are buffers;
they are raw data.

367
00:15:59.126 --> 00:16:00.766
Buffers are buffers;
they are raw data.

368
00:16:01.106 --> 00:16:02.906
You can create them
for anything you want

369
00:16:02.906 --> 00:16:05.896
and then reach them...you
know, access them through a GPU

370
00:16:06.446 --> 00:16:10.386
in your shaders when you
specify them as inputs.

371
00:16:10.846 --> 00:16:14.556
All we're doing here is creating
one with the information about,

372
00:16:14.946 --> 00:16:16.556
you know, the size
and the options.

373
00:16:17.606 --> 00:16:22.066
And as I said before, you can
modify these really easily while

374
00:16:22.726 --> 00:16:26.216
your GPU is working on,
for example another section

375
00:16:26.216 --> 00:16:28.296
of your buffer, you can
modify this section of buffer.

376
00:16:28.506 --> 00:16:31.506
You need to take care of the
synchronization and you need

377
00:16:31.506 --> 00:16:34.286
to follow the memory coincident
rules, but you don't have

378
00:16:34.286 --> 00:16:37.126
to do anything like locking the
buffer or getting the pointer

379
00:16:37.126 --> 00:16:38.976
to do...both pointers are
always available to you.

380
00:16:38.976 --> 00:16:41.676
You have the freedom to modify
however you want whenever you

381
00:16:41.676 --> 00:16:45.536
want and as long as you
basically pay attention to GPU

382
00:16:45.536 --> 00:16:48.336
and CPU synchronization
issues, it will work correctly.

383
00:16:48.896 --> 00:16:53.386
And finally one other example
of a depth stencil state,

384
00:16:53.866 --> 00:16:56.916
I showed this one; I don't have
much to say about it except

385
00:16:56.916 --> 00:16:58.286
that it is an interesting one

386
00:16:58.446 --> 00:17:01.896
that it has an embedded
descriptor, internal descriptor.

387
00:16:58.446 --> 00:17:01.896
that it has an embedded
descriptor, internal descriptor.

388
00:17:01.896 --> 00:17:04.146
Basically that stencil
descriptor has a stencil

389
00:17:04.146 --> 00:17:05.425
descriptor defined within it.

390
00:17:05.896 --> 00:17:10.715
But you can create all of your
depth stencil states up front

391
00:17:10.715 --> 00:17:12.935
because just like you know
your render to texture state,

392
00:17:13.286 --> 00:17:15.276
you actually know how
your objects are going

393
00:17:15.276 --> 00:17:17.185
to be rendered into
those textures.

394
00:17:17.536 --> 00:17:21.086
You know that, for example
in the shadow map pass,

395
00:17:21.476 --> 00:17:23.915
you don't really need to
write into stencil buffer,

396
00:17:23.915 --> 00:17:26.836
so you can basically say
that information here

397
00:17:26.836 --> 00:17:27.685
or you don't use that.

398
00:17:28.016 --> 00:17:30.176
Or when you have
something that is opaque,

399
00:17:30.556 --> 00:17:31.986
you can basically
update the depth buffer,

400
00:17:31.986 --> 00:17:34.686
but if you're going to do
something that is blended

401
00:17:34.686 --> 00:17:37.576
for example, you might choose
to not update the depth buffer

402
00:17:37.576 --> 00:17:40.436
and then you can actually, if
you know all the sates up front,

403
00:17:40.436 --> 00:17:41.356
you can actually
create them up front

404
00:17:41.356 --> 00:17:44.016
and don't pay the penalty
during the draw time.

405
00:17:44.646 --> 00:17:45.856
Ok so we're going to talk

406
00:17:45.856 --> 00:17:48.786
about next the render
pipeline state objects

407
00:17:48.786 --> 00:17:52.496
but before we go there, I'd
like to revisit the kind

408
00:17:53.226 --> 00:17:57.936
of the OpenGL view of the GPU.

409
00:17:58.526 --> 00:18:01.676
And then go and basically talk
about what's the motivation

410
00:17:58.526 --> 00:18:01.676
And then go and basically talk
about what's the motivation

411
00:18:01.676 --> 00:18:04.676
of RenderPipelineState objects
and what is included in them.

412
00:18:05.296 --> 00:18:08.356
So this is kind of how it
looks to basically, in general,

413
00:18:08.356 --> 00:18:11.036
OpenGL, but there's actually
a separate vertex shader state

414
00:18:11.416 --> 00:18:14.106
and a fragment shader state
and all the other operations

415
00:18:14.106 --> 00:18:15.166
that are all that looks

416
00:18:15.166 --> 00:18:17.316
like fixed function
hardware-controlled

417
00:18:17.316 --> 00:18:20.156
through basically
state-changing APIs.

418
00:18:20.666 --> 00:18:23.126
Unfortunately the modern
hardware doesn't really work

419
00:18:23.126 --> 00:18:23.516
that way.

420
00:18:24.236 --> 00:18:26.066
If you think about
it, for example,

421
00:18:26.276 --> 00:18:28.956
when your vertex layout
doesn't match your vertex shader

422
00:18:28.956 --> 00:18:29.826
because they're separate,

423
00:18:29.826 --> 00:18:32.256
the meshes are all
altered separately

424
00:18:32.256 --> 00:18:33.476
than your vertex shaders,

425
00:18:33.806 --> 00:18:35.676
there has to be some
code running somewhere;

426
00:18:36.106 --> 00:18:39.596
either a de-imaging code or
a vertex fetch shader code

427
00:18:39.866 --> 00:18:41.056
that needs to bridge that gap

428
00:18:41.056 --> 00:18:43.096
between these 2 layout
differences.

429
00:18:43.706 --> 00:18:47.436
Or in some GPUs we have
tile-based deferred render

430
00:18:47.436 --> 00:18:49.046
so most of the frame
buffer actually is

431
00:18:49.046 --> 00:18:51.716
on the GPU while you're
working on it, so the blending

432
00:18:51.716 --> 00:18:53.666
or write mask is
basically a read, modify,

433
00:18:53.666 --> 00:18:55.496
write operation on the tile.

434
00:18:55.976 --> 00:18:58.686
And we do that by creating
actually a shader code running

435
00:18:58.686 --> 00:19:01.036
on the shader core;
it's not really a state.

436
00:18:58.686 --> 00:19:01.036
on the shader core;
it's not really a state.

437
00:19:01.036 --> 00:19:04.226
So when you actually make a
draw call with one blending mode

438
00:19:04.626 --> 00:19:07.886
for compiled shaders and
then change your blend state

439
00:19:07.956 --> 00:19:11.176
and make another draw call
with the same compiled shaders.

440
00:19:11.416 --> 00:19:12.856
Well we find out
that we actually have

441
00:19:12.856 --> 00:19:15.576
to generate new code for this
new framebuffer configuration

442
00:19:15.606 --> 00:19:18.456
because we have never seen
it before and we're going

443
00:19:18.456 --> 00:19:21.006
to do this fixed-function
looking-like operation

444
00:19:21.006 --> 00:19:22.556
in the shader core and we end

445
00:19:22.556 --> 00:19:24.476
up recompiling your
shader causing a hitch

446
00:19:24.746 --> 00:19:25.696
in your application.

447
00:19:26.256 --> 00:19:29.666
So recognizing the differences
between how the API looks

448
00:19:29.666 --> 00:19:32.466
on OpenGL and how
actually a GPU behaves,

449
00:19:32.466 --> 00:19:35.596
we decided to basically
put everything in the GPU

450
00:19:35.596 --> 00:19:39.296
that closes shader code and has
an impact on the shader code

451
00:19:39.296 --> 00:19:42.276
in one place that's called
"render pipeline state object."

452
00:19:42.986 --> 00:19:44.316
So let's look at
what we have in it.

453
00:19:44.896 --> 00:19:47.616
We basically have the vertex
fetch basically information

454
00:19:47.616 --> 00:19:50.396
about your vertex layout
that we talked about before.

455
00:19:50.396 --> 00:19:51.906
I actually gave a
good example of it.

456
00:19:51.906 --> 00:19:54.326
Aaftab gave a good example of
it in his talk about language.

457
00:19:55.436 --> 00:19:59.056
Obviously, we have the
shaders included in it.

458
00:19:59.236 --> 00:19:59.776
We have

459
00:20:00.316 --> 00:20:03.836
framebuffer configurations like
number of the rendered targets,

460
00:20:03.836 --> 00:20:07.286
the pixel format, sample count,
write mask, blend information,

461
00:20:07.716 --> 00:20:11.276
actually, and depth
and stencil state.

462
00:20:12.246 --> 00:20:15.396
Now we didn't go all the
way to including everything

463
00:20:15.456 --> 00:20:18.136
in the GPU state in the
render pipeline state object

464
00:20:18.136 --> 00:20:21.106
because if we had done that,
you would be creating millions

465
00:20:21.106 --> 00:20:21.876
and millions of them

466
00:20:21.876 --> 00:20:24.456
and actually there would
be only a few unique ones

467
00:20:24.456 --> 00:20:25.256
of these around.

468
00:20:25.476 --> 00:20:29.486
So basically anything that
is...that can easily be updated

469
00:20:29.736 --> 00:20:32.326
or that's really truly fixed
function hardware is not

470
00:20:32.326 --> 00:20:36.726
in the render pipeline state
object such as the inputs.

471
00:20:37.046 --> 00:20:39.166
We need to know the layout
of the buffer for example,

472
00:20:39.466 --> 00:20:40.566
but we don't really need to know

473
00:20:40.566 --> 00:20:41.936
which particular
buffer you're using.

474
00:20:41.936 --> 00:20:43.706
It's really easy to
update the pointer pointing

475
00:20:43.706 --> 00:20:45.466
to the buffer and the hardware.

476
00:20:46.696 --> 00:20:48.846
The same goes true
for buffers as outputs

477
00:20:48.846 --> 00:20:50.566
or the framebuffer textures.

478
00:20:50.996 --> 00:20:53.246
We need to know how they're
configured, but we don't need

479
00:20:53.246 --> 00:20:55.516
to know specifically which
ones are used at any time.

480
00:20:55.596 --> 00:20:59.316
Or the primitive setup
states like the cull mode,

481
00:20:59.436 --> 00:21:03.136
facing orientation, or
information like viewport

482
00:20:59.436 --> 00:21:03.136
facing orientation, or
information like viewport

483
00:21:03.136 --> 00:21:05.806
and scissor information, depth
bias and clamp and slope.

484
00:21:06.346 --> 00:21:07.476
So those are not included

485
00:21:07.476 --> 00:21:09.536
in your render pipeline
state objects, but everything

486
00:21:09.536 --> 00:21:11.296
that affects your
cost is included

487
00:21:11.296 --> 00:21:12.776
in your pipeline state object

488
00:21:13.076 --> 00:21:14.826
so everything you
create is explicit

489
00:21:15.296 --> 00:21:18.026
and everything you create is
basically you pay the cost

490
00:21:18.026 --> 00:21:18.446
up front.

491
00:21:18.446 --> 00:21:19.706
There are no hidden codes,

492
00:21:19.706 --> 00:21:21.866
there are no deferred
state validation,

493
00:21:21.866 --> 00:21:23.826
no later compilation in Metal.

494
00:21:23.826 --> 00:21:26.486
So what you do, you know
you do it, you're doing it,

495
00:21:26.766 --> 00:21:29.186
why you're doing it, and
the cost is paid up front

496
00:21:29.186 --> 00:21:30.176
when you are actually doing it.

497
00:21:31.336 --> 00:21:32.836
So let's go and create
a few of those.

498
00:21:33.616 --> 00:21:36.216
Basically there's a render
pipeline sate object associated

499
00:21:36.216 --> 00:21:37.206
with every draw call.

500
00:21:37.516 --> 00:21:40.576
And in our example, for example
under rendering the mesh,

501
00:21:40.576 --> 00:21:43.346
the mesh for the temple, we're
going to render it twice;

502
00:21:43.346 --> 00:21:45.346
one we're creating the depth
buffer for the shadowMap

503
00:21:45.686 --> 00:21:47.506
and then one; we are
basically doing light

504
00:21:47.506 --> 00:21:49.126
accumulation...deferred
lighting pass.

505
00:21:49.506 --> 00:21:51.576
So we're going to create two of
them; I'm going to give examples

506
00:21:51.576 --> 00:21:53.156
of how to create them.

507
00:21:53.796 --> 00:21:55.566
We create a new one,
a descriptor.

508
00:21:55.676 --> 00:21:57.416
As we talked before,

509
00:21:57.676 --> 00:22:00.676
you hopefully basically
compiled your shaders on Xcode

510
00:21:57.676 --> 00:22:00.676
you hopefully basically
compiled your shaders on Xcode

511
00:22:00.676 --> 00:22:02.656
on the host-side or in
a library so we can go

512
00:22:02.656 --> 00:22:05.106
and get your vertex
shader from the library.

513
00:22:05.786 --> 00:22:10.116
And now I'm basically setting
the rest of the sates here;

514
00:22:10.116 --> 00:22:11.716
basically we're setting
the vertex function,

515
00:22:12.066 --> 00:22:14.176
we're setting depthWriteEnabled
to "true"

516
00:22:14.176 --> 00:22:16.036
because you actually want
to update that buffer.

517
00:22:16.966 --> 00:22:19.306
Interestingly since there's
no color buffer attached,

518
00:22:19.746 --> 00:22:21.426
you can set your
fragment shader to "no."

519
00:22:21.496 --> 00:22:22.286
There is not really going

520
00:22:22.286 --> 00:22:23.846
to be a fragment
shader operation going

521
00:22:23.846 --> 00:22:26.846
on for this configuration
for this drawing.

522
00:22:27.386 --> 00:22:30.816
And once you have
that information,

523
00:22:30.816 --> 00:22:32.316
you can use that descriptor

524
00:22:32.316 --> 00:22:35.676
to create our render pipeline
state object for our temple mesh

525
00:22:35.806 --> 00:22:37.196
for our shadowMap pass.

526
00:22:38.236 --> 00:22:40.686
Let's do the same thing for
the deferred lighting pass.

527
00:22:41.226 --> 00:22:43.856
Well the deferred lighting
pass is a little bit more rich

528
00:22:43.856 --> 00:22:46.966
in terms of the stream buffer
configuration and terms

529
00:22:46.966 --> 00:22:48.496
of the actions that
are taking place.

530
00:22:48.806 --> 00:22:51.316
So we're going to have both
the vertex and fragment shader

531
00:22:51.826 --> 00:22:53.876
and we're going to
define the pixel formats

532
00:22:54.226 --> 00:22:55.656
for all attachments.

533
00:22:56.426 --> 00:23:01.876
So we have now basically defined
our render pass descriptors.

534
00:22:56.426 --> 00:23:01.876
So we have now basically defined
our render pass descriptors.

535
00:23:02.276 --> 00:23:05.866
We created our buffers
for meshes, for uniforms;

536
00:23:06.146 --> 00:23:09.096
we created our textures
and uploaded them;

537
00:23:09.346 --> 00:23:12.666
we created our render pipeline
state objects.Well I think we

538
00:23:12.666 --> 00:23:15.286
can now get into the business
of drawing things on the screen.

539
00:23:16.216 --> 00:23:19.166
So...well Richard
did a great job

540
00:23:19.166 --> 00:23:22.436
in explaining how the command
buffers are formed and used,

541
00:23:22.436 --> 00:23:27.626
so I'm going to, you know, visit
it for just a bit to remind you.

542
00:23:27.836 --> 00:23:31.286
So we have a single command
queue that is our channel

543
00:23:31.286 --> 00:23:33.666
to the GPU and we
get a commandBuffer

544
00:23:33.666 --> 00:23:36.736
from the commandQueue
and that's how we do it:

545
00:23:36.836 --> 00:23:39.216
ask the commandQueue to give
us a new command buffer.

546
00:23:39.286 --> 00:23:42.976
And then once we basically go
ahead and encode all our render

547
00:23:42.976 --> 00:23:45.586
to texture passes, we're
going to be ready to send it

548
00:23:45.586 --> 00:23:49.286
to the GPU so that's how we do
it, by issuing a commit call.

549
00:23:49.286 --> 00:23:52.706
And then finally,
commandBuffers are not reused.

550
00:23:52.916 --> 00:23:55.856
Once they're used, we get rid
of them and then the next step,

551
00:23:56.016 --> 00:23:58.446
next frame, we're going to get
a new one so we set it to "new"

552
00:23:58.446 --> 00:23:59.496
and that takes care of it.

553
00:24:00.476 --> 00:24:02.326
One thing I like to point
out just as Richard did

554
00:24:02.326 --> 00:24:05.266
in the previous session: if
you like to get the results

555
00:24:05.266 --> 00:24:07.946
of your command buffer's
operations to show

556
00:24:07.946 --> 00:24:09.436
up on the screen, you need

557
00:24:09.436 --> 00:24:12.376
to schedule the operation before
committing your command buffer

558
00:24:12.756 --> 00:24:15.686
so that you basically call
the addPresent API to schedule

559
00:24:15.686 --> 00:24:18.286
that so when the command
buffer is executed by the GPU,

560
00:24:18.576 --> 00:24:20.086
the display will
basically know about it

561
00:24:20.086 --> 00:24:22.596
and it will show your
image on the display.

562
00:24:24.176 --> 00:24:29.196
Ok, now is an exciting part:
creating the command encoders

563
00:24:29.506 --> 00:24:31.786
and actually encoding stuff.

564
00:24:32.146 --> 00:24:35.396
Well, it is exciting, but
there's actually not much left

565
00:24:35.396 --> 00:24:37.836
to do at this point because you
have done everything up front.

566
00:24:38.536 --> 00:24:40.216
So all we're going to
do is create an encoder

567
00:24:40.216 --> 00:24:41.406
from the commandBuffer
this time.

568
00:24:41.716 --> 00:24:43.316
There can only be one
command encoder active

569
00:24:43.316 --> 00:24:44.636
at any time on a commandBuffer.

570
00:24:45.036 --> 00:24:46.246
There's one exception to this:

571
00:24:46.246 --> 00:24:48.766
this is a parallel
RenderCommandEncoder.

572
00:24:48.886 --> 00:24:51.566
I'd like you to take a look
at the programming guide

573
00:24:51.566 --> 00:24:52.656
to understand when it's used.

574
00:24:52.656 --> 00:24:55.506
It's mostly when you have a
huge render to texture pass

575
00:24:55.506 --> 00:24:57.636
and you want to basically
paralyze operations

576
00:24:57.636 --> 00:24:59.576
on multiple CPUs; that's
the only time you're going

577
00:24:59.576 --> 00:25:00.026
to use it.

578
00:24:59.576 --> 00:25:00.026
to use it.

579
00:25:00.636 --> 00:25:04.066
But for most applications, there
will be one render encoder,

580
00:25:04.506 --> 00:25:06.796
RenderCommandEncoder or
a blip command encoder

581
00:25:06.796 --> 00:25:09.606
or a compute command
encoder active at any time.

582
00:25:10.426 --> 00:25:13.276
So we created one in here;
it's a RenderCommandEncoder

583
00:25:13.276 --> 00:25:15.316
for our shadowMap pass

584
00:25:15.686 --> 00:25:18.246
and we create it using the
shadowMap pass descriptor

585
00:25:18.556 --> 00:25:20.776
that we created just
a few minutes ago.

586
00:25:20.956 --> 00:25:23.826
It has all the information
about the depth attachment

587
00:25:24.316 --> 00:25:26.846
and the structure of the depth
attachment and how it's defined

588
00:25:26.846 --> 00:25:29.056
and all the information
necessary

589
00:25:29.056 --> 00:25:30.066
for creating this encoder.

590
00:25:30.136 --> 00:25:33.476
And then what we do
is just set the sates;

591
00:25:33.746 --> 00:25:36.256
they're all baked before so we
don't have to validate them.

592
00:25:37.016 --> 00:25:41.736
And we set the buffers as inputs
for texture samples as inputs

593
00:25:41.736 --> 00:25:45.096
to our draw calls, and then
finally issue our draw calls.

594
00:25:45.096 --> 00:25:47.976
And then repeat this hopefully
thousands and thousands of times

595
00:25:48.466 --> 00:25:50.716
and in each one you will
basically be using a different

596
00:25:50.716 --> 00:25:51.416
kind of state.

597
00:25:51.636 --> 00:25:54.446
But the driver will be able to
just go ahead and fetch them

598
00:25:54.796 --> 00:25:57.476
from a pre-baked place instead
of creating them on the fly

599
00:25:57.476 --> 00:25:58.766
or validating them on the fly,

600
00:25:59.136 --> 00:26:01.996
which makes Metal significantly
faster than the alternative app.

601
00:25:59.136 --> 00:26:01.996
which makes Metal significantly
faster than the alternative app.

602
00:26:01.996 --> 00:26:05.366
And once you're done,
you finish your encoding

603
00:26:05.366 --> 00:26:07.566
by calling end encoding.

604
00:26:08.326 --> 00:26:11.726
And at this point, the
commands are just created

605
00:26:11.726 --> 00:26:12.576
in the command buffer,

606
00:26:12.926 --> 00:26:14.986
but they're not really
submitted to the GPU.

607
00:26:15.266 --> 00:26:18.776
They cannot be executed on the
GPU yet because that's only done

608
00:26:18.856 --> 00:26:20.346
when you submit your
command buffer,

609
00:26:20.646 --> 00:26:22.586
not when you finish
your encoding.

610
00:26:23.096 --> 00:26:25.876
Let's go create the
encoding for the second pass

611
00:26:25.876 --> 00:26:28.006
because it has an
interesting feature

612
00:26:28.006 --> 00:26:30.886
that we couldn't finish
completing our vendor pass

613
00:26:30.886 --> 00:26:34.006
descriptor early enough because
we didn't have the texture

614
00:26:34.336 --> 00:26:36.436
for our drawable at that point.

615
00:26:37.016 --> 00:26:40.436
So just in the previous session
if you saw that how we can get

616
00:26:40.436 --> 00:26:42.486
that texture, if you
remember doing that,

617
00:26:42.486 --> 00:26:45.186
and then assigning it our
first color attachment

618
00:26:45.186 --> 00:26:48.696
to the texture point of
our first color attachment.

619
00:26:49.336 --> 00:26:52.186
The rest of the descriptor
was well defined before;

620
00:26:52.186 --> 00:26:55.746
we knew what textures to use
and how many textures there were

621
00:26:56.066 --> 00:26:58.306
and so we don't actually
need to modify that part.

622
00:26:58.306 --> 00:26:59.946
We're just going to
basically update this part

623
00:26:59.946 --> 00:27:02.236
of the descriptor and
are going to use that one

624
00:26:59.946 --> 00:27:02.236
of the descriptor and
are going to use that one

625
00:27:02.236 --> 00:27:04.586
to create our
RenderCommandEncoder

626
00:27:04.586 --> 00:27:06.826
for our deferred lighting pass.

627
00:27:07.516 --> 00:27:11.456
We do the usual, just issue
draw calls and finally end

628
00:27:11.456 --> 00:27:14.076
up finishing our draw calls

629
00:27:14.476 --> 00:27:16.486
and closing our encoder
by "End encoding".

630
00:27:16.826 --> 00:27:19.366
And at this point for this
particular application

631
00:27:19.756 --> 00:27:21.176
since you have only two passes,

632
00:27:21.486 --> 00:27:24.026
we just call the command
buffer commit and it will go

633
00:27:24.026 --> 00:27:27.126
to the GPU, and the GPU will
start executing the commands we

634
00:27:27.126 --> 00:27:27.836
encoded just now.

635
00:27:29.286 --> 00:27:31.266
Ok, so that's all I
wanted to talk about;

636
00:27:31.266 --> 00:27:33.576
how to structure your
application to take advantage

637
00:27:33.576 --> 00:27:36.866
of Metal and we're going
to go into a really,

638
00:27:36.866 --> 00:27:40.186
really interesting and new
feature that we have on iOS:

639
00:27:40.526 --> 00:27:42.676
data-parallel computing
on the GPU with Metal

640
00:27:43.026 --> 00:27:44.656
so Aaftab will talk about that.

641
00:27:44.656 --> 00:27:44.836
Thank you.

642
00:27:45.516 --> 00:27:49.716
[ Applause ]

643
00:27:50.216 --> 00:27:50.836
>> Thanks Gokhan.

644
00:27:51.586 --> 00:27:54.516
All right, I'm back.

645
00:27:54.516 --> 00:27:57.576
All right, so I have
15 minutes to talk

646
00:27:57.576 --> 00:27:59.176
about data-parallel
computing so I want to focus

647
00:27:59.176 --> 00:28:01.466
on the key points I
wanted to get across.

648
00:27:59.176 --> 00:28:01.466
on the key points I
wanted to get across.

649
00:28:01.466 --> 00:28:05.746
So we'll first talk about...and
give a very high level overview

650
00:28:05.746 --> 00:28:07.096
of what is data-parallel
computing,

651
00:28:07.666 --> 00:28:12.246
how Metal does data-parallel
computing, and then we'll look

652
00:28:12.246 --> 00:28:17.536
at how to write kernels in
metal and how to execute them.

653
00:28:17.616 --> 00:28:18.826
And we'll actually
take an example,

654
00:28:18.826 --> 00:28:21.536
a post-processing example,
and show how you do that.

655
00:28:22.106 --> 00:28:23.356
All right, so let's start.

656
00:28:23.766 --> 00:28:25.146
So what is data-parallel
computing?

657
00:28:25.486 --> 00:28:27.896
So imagine if you have a piece
of code, let's say a function,

658
00:28:28.546 --> 00:28:34.036
that we can execute all elements
of your data; so maybe elements

659
00:28:34.036 --> 00:28:36.466
in an array or pixels
of an image.

660
00:28:37.806 --> 00:28:41.436
And these computations are
independent to each other.

661
00:28:41.856 --> 00:28:44.036
So that means if I have,
you know, multiple threads

662
00:28:44.036 --> 00:28:46.676
of execution, I can run
them all in parallel

663
00:28:46.796 --> 00:28:49.096
so that's what I mean by
data-parallel computing.

664
00:28:49.096 --> 00:28:51.166
So this is actually
a very simple form

665
00:28:51.166 --> 00:28:54.436
of data-parallel computing and
I'll talk a little bit more

666
00:28:54.436 --> 00:28:58.436
about additional things
you can do in Metal

667
00:28:58.436 --> 00:28:59.496
with data-parallel computing.

668
00:28:59.496 --> 00:29:04.026
So a classic example of this
data-parallel computing is

669
00:28:59.496 --> 00:29:04.026
So a classic example of this
data-parallel computing is

670
00:29:04.026 --> 00:29:05.366
blurring an image, right?

671
00:29:05.366 --> 00:29:08.376
So for example you
have an image.

672
00:29:08.376 --> 00:29:11.356
For each pixel you're
looking at a nearby region

673
00:29:11.356 --> 00:29:12.366
and you are applying a filter.

674
00:29:12.586 --> 00:29:14.366
Well, I could execute
these in parallel.

675
00:29:14.366 --> 00:29:16.536
So if I had let's
say a 1k by 1k image

676
00:29:16.896 --> 00:29:18.056
and I had a million threads,

677
00:29:18.306 --> 00:29:21.446
I could execute each
pixel in parallel, right?

678
00:29:21.886 --> 00:29:23.956
So how does that work in Metal?

679
00:29:24.426 --> 00:29:27.716
So the code that you're
going to execute in parallel,

680
00:29:28.236 --> 00:29:29.436
we call that a kernel.

681
00:29:30.056 --> 00:29:32.396
And the thing that actually
executes independently,

682
00:29:32.716 --> 00:29:33.596
we call that a work-item.

683
00:29:33.716 --> 00:29:38.066
So on a GPU, a thread may
actually contain multiple

684
00:29:38.066 --> 00:29:41.496
work-items because now a thread
actually may execute multiple

685
00:29:41.496 --> 00:29:42.896
such things in a SIMD fashion

686
00:29:42.896 --> 00:29:44.146
and then you have
multiple threads.

687
00:29:44.586 --> 00:29:46.006
So the work-item is the thing

688
00:29:46.006 --> 00:29:48.726
that identifies each
independent execution instance.

689
00:29:49.036 --> 00:29:52.636
So you're going stop me
right there and say, "Hey,

690
00:29:52.636 --> 00:29:55.256
that looks just like a
fragment shader," right?

691
00:29:55.256 --> 00:29:57.556
Because that's what
fragment shaders do, right?

692
00:29:57.856 --> 00:29:59.976
You execute the shader
in parallel

693
00:30:00.046 --> 00:30:02.886
or multiple fragments; they
don't talk to each other.

694
00:30:03.056 --> 00:30:04.436
Like they are in
their own world.

695
00:30:04.436 --> 00:30:06.166
They take inputs;
produce outputs.

696
00:30:06.686 --> 00:30:08.126
So what is this
data-parallelism?

697
00:30:08.626 --> 00:30:11.716
So that is indeed; we
call it SIMD parallelism

698
00:30:11.716 --> 00:30:15.326
and that is a data-parallelism
model supported in Metal.

699
00:30:15.666 --> 00:30:19.776
And the only benefit here
is that you no longer have

700
00:30:19.776 --> 00:30:21.496
to create a graphics pipeline;

701
00:30:21.496 --> 00:30:25.236
you don't specify a vertex
shader and a fragment shader

702
00:30:25.236 --> 00:30:26.256
and state and things like that.

703
00:30:26.256 --> 00:30:27.846
You just say, "Here
is my function,

704
00:30:27.986 --> 00:30:29.506
here is my problem size,

705
00:30:29.706 --> 00:30:31.746
go execute this function
over there."

706
00:30:31.826 --> 00:30:35.166
But there's more to it than that
because, in data-parallelism,

707
00:30:35.426 --> 00:30:38.926
you can actually tell
a number of algorithms

708
00:30:38.926 --> 00:30:41.636
where you actually
want these work-items

709
00:30:41.996 --> 00:30:43.466
to communicate with each other.

710
00:30:43.566 --> 00:30:45.006
Let's take an example;
let's say I want to --

711
00:30:45.106 --> 00:30:48.186
a very simple example -- I want
to sum elements of an array.

712
00:30:48.216 --> 00:30:51.026
It's referred to as a
classic problem of reduction.

713
00:30:51.556 --> 00:30:54.716
So in that case, you now we
have these work-items generating

714
00:30:54.766 --> 00:30:57.506
partial results and
you keep looking

715
00:30:57.506 --> 00:31:00.316
over until you finally have
you know two partial sums

716
00:30:57.506 --> 00:31:00.316
over until you finally have
you know two partial sums

717
00:31:00.316 --> 00:31:01.446
and then you get the final sum.

718
00:31:01.656 --> 00:31:04.996
But in order to make this
work, these work-items need

719
00:31:05.036 --> 00:31:08.746
to know the results generated by
other work-items, so they need

720
00:31:08.746 --> 00:31:11.116
to be able to talk and you
know talk is always good.

721
00:31:11.526 --> 00:31:14.476
So what you can do in
Metal is you can say, "Hey,

722
00:31:14.476 --> 00:31:17.166
these work-items, they
work together," ok?

723
00:31:17.166 --> 00:31:18.696
And we call that a work-group.

724
00:31:19.456 --> 00:31:20.866
And these work-items

725
00:31:20.866 --> 00:31:23.366
in the work-group can
actually share data

726
00:31:23.926 --> 00:31:25.986
through what we call
local memory.

727
00:31:25.986 --> 00:31:28.026
Remember we talked in the
previous session about global

728
00:31:28.026 --> 00:31:30.536
and constant and
so, for kernels,

729
00:31:30.706 --> 00:31:32.666
you get an additional
high-bandwidth,

730
00:31:33.106 --> 00:31:34.946
low-latency memory we
call "local memory."

731
00:31:34.946 --> 00:31:36.796
Think of it just as
a user-managed cache.

732
00:31:36.896 --> 00:31:37.516
that's all it is.

733
00:31:37.516 --> 00:31:39.886
And then they can
synchronize because now

734
00:31:40.196 --> 00:31:43.276
when these threads want...or
work-items want to communicate,

735
00:31:43.276 --> 00:31:45.536
they need to make sure they
arrive at a place together

736
00:31:45.616 --> 00:31:46.766
so they can exchange data.

737
00:31:47.196 --> 00:31:50.706
So you get all of that with
data-parallelism in Metal.

738
00:31:50.856 --> 00:31:51.806
So let's...

739
00:31:53.206 --> 00:31:55.926
Ok? So I wrote my code
that can do all of this,

740
00:31:56.086 --> 00:31:57.746
but how do I describe
my problem?

741
00:31:58.326 --> 00:32:01.736
So the thing is we called it a
computation domain so depending

742
00:31:58.326 --> 00:32:01.736
So the thing is we called it a
computation domain so depending

743
00:32:01.736 --> 00:32:05.506
on what thing you're going to
execute this function over,

744
00:32:05.506 --> 00:32:07.686
if it's an array, your
problem is one-dimensional.

745
00:32:08.156 --> 00:32:10.366
If it's an image, your
problem is two-dimensional.

746
00:32:11.036 --> 00:32:13.386
So I've specified
the dimensions,

747
00:32:13.476 --> 00:32:14.926
but what else do
I need to specify?

748
00:32:15.096 --> 00:32:17.586
Well, now I need to tell
you how many work items are

749
00:32:17.586 --> 00:32:20.456
in my work-group and then how
many work-groups do I have?

750
00:32:20.826 --> 00:32:22.726
So that describes the
number of work-items

751
00:32:23.276 --> 00:32:24.806
in the work-group times
the number of work-groups

752
00:32:24.806 --> 00:32:26.136
that describes the total problem

753
00:32:26.136 --> 00:32:28.046
that will be executed
in parallel.

754
00:32:28.416 --> 00:32:30.926
So choose the dimensions that
are best for your algorithm.

755
00:32:30.926 --> 00:32:32.326
So if you're doing
an image processing,

756
00:32:32.326 --> 00:32:34.456
a post-processing effect,
you know you're going

757
00:32:34.456 --> 00:32:35.666
to operate on textures.

758
00:32:35.666 --> 00:32:39.366
Use 2D. Yeah, you could do it
in 1D, but who wants to do all

759
00:32:39.366 --> 00:32:41.346
that work to turn that 2D to 1D?

760
00:32:41.416 --> 00:32:42.886
And you shouldn't have to.

761
00:32:43.316 --> 00:32:46.346
And the work-items you
have in your work-group,

762
00:32:46.496 --> 00:32:48.196
how many they are,
it's going to depend

763
00:32:48.196 --> 00:32:49.696
on the algorithm you're using.

764
00:32:49.696 --> 00:32:52.386
It's going to depend on how many
load store operations you're

765
00:32:52.386 --> 00:32:56.146
doing and how much
computations: a ratio of memory

766
00:32:56.146 --> 00:32:58.816
to computations and
so play with that.

767
00:32:58.816 --> 00:32:59.706
Choose the right dimensions.

768
00:33:00.286 --> 00:33:02.376
You have the flexibility
because you can specify these.

769
00:33:03.306 --> 00:33:04.766
All right, so let's
take an example.

770
00:33:04.966 --> 00:33:08.356
We'll look at how to take
pseudo-code C, C++ code,

771
00:33:08.356 --> 00:33:09.486
and make it into shaders.

772
00:33:09.826 --> 00:33:11.606
We'll look at how we do that
for calls and we're going

773
00:33:11.606 --> 00:33:13.246
to take a really,
really simple example.

774
00:33:13.246 --> 00:33:16.836
So this function takes an
input, squares the result

775
00:33:16.836 --> 00:33:19.006
for each element,
and writes it out.

776
00:33:19.306 --> 00:33:21.296
And remember ah,

777
00:33:21.296 --> 00:33:23.416
it has the...the
function is not complete.

778
00:33:24.356 --> 00:33:26.716
So we include the standard
library just like we did

779
00:33:26.716 --> 00:33:28.846
for shaders and we use
the Metal namespace.

780
00:33:29.196 --> 00:33:32.036
So remember, we're going
to execute this function

781
00:33:32.036 --> 00:33:35.376
for each index in
parallel, but first,

782
00:33:35.666 --> 00:33:38.366
I need to tell the compiler that
this is a data-parallel function

783
00:33:38.486 --> 00:33:39.826
so that's what the
kernel is going

784
00:33:39.826 --> 00:33:41.276
to do; that's the qualifier.

785
00:33:41.396 --> 00:33:45.526
All right, I'm passing
pointers so I need

786
00:33:45.526 --> 00:33:48.806
to specify these buffers, what
indices they're going to be in

787
00:33:48.806 --> 00:33:50.856
and that they're in the
global address space.

788
00:33:50.856 --> 00:33:51.646
Remember we talked

789
00:33:51.756 --> 00:33:53.446
in the previous session
about address spaces?

790
00:33:53.446 --> 00:33:56.286
So these are coming in
global and then I need

791
00:33:56.286 --> 00:33:59.526
to tell the compiler that
this ID to I'm going to use

792
00:33:59.526 --> 00:34:03.226
to index is unique for each
instance and so in this case,

793
00:33:59.526 --> 00:34:03.226
to index is unique for each
instance and so in this case,

794
00:34:03.226 --> 00:34:05.326
I call that a "global ID," ok?

795
00:34:05.606 --> 00:34:07.726
So we have a vertex
ID and compute.

796
00:34:08.186 --> 00:34:09.696
You have global IDs, ok?

797
00:34:09.835 --> 00:34:12.585
So pretty simple,
pretty straightforward.

798
00:34:12.786 --> 00:34:14.446
Well, let's say if
I'm using textures,

799
00:34:14.446 --> 00:34:15.926
how would I write a kernel?

800
00:34:16.016 --> 00:34:20.306
So let's say I'm trying to just
mirror an image horizontally,

801
00:34:20.505 --> 00:34:24.906
so this was my image and I
want to...remember what I said,

802
00:34:25.255 --> 00:34:26.206
"Use the right dimensions?"

803
00:34:26.505 --> 00:34:28.156
So since I'm operating
on an image,

804
00:34:28.246 --> 00:34:31.025
I really want my global ID to
be two-dimensional in nature

805
00:34:31.326 --> 00:34:32.476
and that's what I'm doing here.

806
00:34:32.956 --> 00:34:35.626
And I want to read
from my input texture

807
00:34:36.045 --> 00:34:37.446
after I have mirrored
the coordinate

808
00:34:37.446 --> 00:34:38.876
and then I want to write it out.

809
00:34:39.366 --> 00:34:42.196
So you're going to
find writing kernels,

810
00:34:43.016 --> 00:34:45.686
just like writing
shaders, it's really easy.

811
00:34:45.985 --> 00:34:48.835
Its C++ code; it's
standard with information

812
00:34:48.835 --> 00:34:51.636
so that a compiler knows
what you are trying to do.

813
00:34:52.106 --> 00:34:55.356
Ok, remember we talked
about built-in variables?

814
00:34:55.686 --> 00:34:59.606
You had a special attribute
to say position, front-facing,

815
00:34:59.606 --> 00:35:00.866
and things like that
for graphics?

816
00:34:59.606 --> 00:35:00.866
and things like that
for graphics?

817
00:35:01.336 --> 00:35:03.706
Well, we have something
similar for kernels too.

818
00:35:04.576 --> 00:35:07.636
Well, global ID; you guys
already know it is now, right?

819
00:35:08.336 --> 00:35:12.186
So in this case, my example, I'm
actually using...I'm operating

820
00:35:12.186 --> 00:35:15.016
on a texture so my global
ID is two-dimensional.

821
00:35:15.236 --> 00:35:17.936
So it can be a ushort2 or uint2

822
00:35:18.466 --> 00:35:20.196
so use the right
dimensions you want.

823
00:35:20.556 --> 00:35:24.096
Now so that's great if I'm
only operating on textures

824
00:35:24.306 --> 00:35:27.126
in my kernel, but what if
I'm passing in buffers too?

825
00:35:27.596 --> 00:35:29.226
So when I access my texture,

826
00:35:29.266 --> 00:35:31.226
I'm going to use my
two-dimensional global ID,

827
00:35:31.226 --> 00:35:34.416
but if I access a buffer, I need
to create a one-dimensional ID.

828
00:35:34.536 --> 00:35:38.006
So we're trying to help you
not have to write all that code

829
00:35:38.006 --> 00:35:40.156
because there may be bugs;
we fixed that for you.

830
00:35:40.276 --> 00:35:41.556
So that's the global linear ID.

831
00:35:42.006 --> 00:35:44.696
So now remember we said,

832
00:35:44.696 --> 00:35:46.236
"Work-items work
in a work-group?"

833
00:35:46.716 --> 00:35:47.936
So within that work-group,

834
00:35:47.936 --> 00:35:49.846
I need to know which
instance I am.

835
00:35:50.266 --> 00:35:53.506
So I have global ID; we
call this the "local id."

836
00:35:54.186 --> 00:35:56.436
And just like you can have
a two-dimensional local ID,

837
00:35:57.016 --> 00:35:58.156
there's also a one-dimensional.

838
00:35:59.096 --> 00:36:00.326
We call that that the
"local linear ID."

839
00:35:59.096 --> 00:36:00.326
We call that that the
"local linear ID."

840
00:36:00.326 --> 00:36:03.166
So you just specify these
attributes for the arguments

841
00:36:03.166 --> 00:36:06.516
to your kernel function and
the compiler will generate the

842
00:36:06.516 --> 00:36:07.066
right code.

843
00:36:07.556 --> 00:36:10.646
And finally we call this
the "work-group ID."

844
00:36:10.646 --> 00:36:12.156
And so why do I care about this?

845
00:36:12.476 --> 00:36:17.006
Well, remember you specify
the number of work-items

846
00:36:17.586 --> 00:36:19.166
in the work-group and
number of work-groups?

847
00:36:19.596 --> 00:36:22.486
So let's take...for an example,
I'm generating a histogram.

848
00:36:22.806 --> 00:36:26.346
So each work-group...one way you
could do this is each work-group

849
00:36:26.346 --> 00:36:28.666
could generate a partial
histogram, so a histogram

850
00:36:28.666 --> 00:36:30.056
for the things it's working on.

851
00:36:30.446 --> 00:36:31.646
And then you will
run another kernel

852
00:36:31.646 --> 00:36:33.486
that could sum these
partial histograms

853
00:36:33.486 --> 00:36:34.736
and generate a final histogram.

854
00:36:35.996 --> 00:36:38.006
Well, so that means I
need to write the results

855
00:36:38.006 --> 00:36:41.096
of these partial histograms
to some buffer, right?

856
00:36:41.516 --> 00:36:43.906
Well I don't want to create
a buffer for each work-group

857
00:36:43.906 --> 00:36:45.996
so I just want to
allocate one buffer

858
00:36:46.096 --> 00:36:49.566
so guess what index
would I use to write?

859
00:36:49.936 --> 00:36:51.176
That would be my work-group ID

860
00:36:51.176 --> 00:36:54.326
so that's how you
would use it, ok?

861
00:36:54.966 --> 00:36:57.346
All right, so let's see
how to execute kernels.

862
00:36:57.346 --> 00:37:01.276
What commands do I
encode to send work

863
00:36:57.346 --> 00:37:01.276
What commands do I
encode to send work

864
00:37:01.276 --> 00:37:02.606
to the GPU to execute a kernel?

865
00:37:02.606 --> 00:37:04.606
And we're going to take
a post-processing example

866
00:37:04.606 --> 00:37:06.566
so this is going to do
some highlights, shadows,

867
00:37:06.566 --> 00:37:08.006
vignette effects
and things like that

868
00:37:08.006 --> 00:37:09.476
and I'll actually demo
that for you guys.

869
00:37:09.856 --> 00:37:11.706
So let's look at the source.

870
00:37:11.706 --> 00:37:13.436
I'm not going to give the
details of the source;

871
00:37:13.436 --> 00:37:15.936
just give a very high-level
picture of what's happening.

872
00:37:15.986 --> 00:37:18.836
So it takes a number of
images and some information.

873
00:37:19.066 --> 00:37:21.956
It's going to take the
global ID and transform

874
00:37:21.956 --> 00:37:24.356
that using some matrix;
an affine matrix.

875
00:37:24.816 --> 00:37:26.326
It's going to sample
from an image

876
00:37:26.636 --> 00:37:28.596
and then apply a
post-processing effect,

877
00:37:28.996 --> 00:37:30.896
and then write to an image, ok?

878
00:37:30.896 --> 00:37:33.096
And then you're going
to say, "That looks just

879
00:37:33.096 --> 00:37:33.936
like a fragment shader."

880
00:37:34.646 --> 00:37:36.506
Well in this case, yes it does.

881
00:37:37.096 --> 00:37:40.716
But remember, the number
of work-items times number

882
00:37:40.716 --> 00:37:43.526
of work-groups make up the total
problem domain you're going

883
00:37:43.526 --> 00:37:44.066
to operate on.

884
00:37:44.536 --> 00:37:45.566
There is no such requirement

885
00:37:45.566 --> 00:37:48.086
that each work-item must only
operate on only one pixel;

886
00:37:48.546 --> 00:37:50.146
it could actually
operate on many pixels.

887
00:37:50.566 --> 00:37:52.996
And depending on what you
are doing in your code,

888
00:37:52.996 --> 00:37:57.356
again that computation to memory
ratio, you may find its better

889
00:37:57.356 --> 00:37:59.736
to do more work than less work.

890
00:38:00.326 --> 00:38:02.376
So when we do this, we
actually modify this kernel.

891
00:38:02.536 --> 00:38:04.386
So we had a crack
team working on it

892
00:38:04.896 --> 00:38:07.386
and what they did
is they changed it

893
00:38:07.716 --> 00:38:09.306
to four pixels per work-item.

894
00:38:10.756 --> 00:38:12.636
It's like...it was
actually faster.

895
00:38:13.106 --> 00:38:14.616
And so we like faster, don't we?

896
00:38:16.056 --> 00:38:19.066
So that's what it's
doing; it's for...so and so

897
00:38:19.066 --> 00:38:22.256
in fact each work-group is doing
the work of four work-groups.

898
00:38:22.256 --> 00:38:25.306
So we don't need to look at this
code, but it's straightforward.

899
00:38:25.306 --> 00:38:26.896
It's going to loop
over these things

900
00:38:26.896 --> 00:38:28.186
that the compiler
is going to unroll.

901
00:38:28.576 --> 00:38:32.556
But the point here is that
there is no requirement

902
00:38:32.556 --> 00:38:35.416
of one-to-one mapping; you
can have one-to-end mapping.

903
00:38:35.686 --> 00:38:37.976
And so you have a lot
of flexibility, ok?

904
00:38:37.976 --> 00:38:41.066
And that can actually
help...really help you tune your

905
00:38:41.066 --> 00:38:42.936
code; your data-parallel
function that you want

906
00:38:42.936 --> 00:38:43.916
to execute on the GPU.

907
00:38:45.196 --> 00:38:47.626
All right, so let's talk about
the compute command encoder.

908
00:38:47.836 --> 00:38:49.846
So this is what you
need to send commands

909
00:38:50.126 --> 00:38:51.656
to execute kernels on the GPU.

910
00:38:52.106 --> 00:38:54.316
So just like the
RenderCommandEncoder

911
00:38:54.486 --> 00:38:56.716
for compute, we have this
compute command encoder

912
00:38:56.716 --> 00:38:58.096
but first things first.

913
00:38:58.636 --> 00:39:00.266
Remember I compiled my kernel

914
00:38:58.636 --> 00:39:00.266
Remember I compiled my kernel

915
00:39:00.736 --> 00:39:02.616
and so I have created
a Metal library.

916
00:39:03.086 --> 00:39:04.086
And so I'm going to load that

917
00:39:04.086 --> 00:39:05.396
and I'm going to
load that kernel.

918
00:39:06.236 --> 00:39:07.826
The next thing I'm
going to do is I'm going

919
00:39:07.826 --> 00:39:08.936
to create my compute state.

920
00:39:09.106 --> 00:39:10.736
Just like we had the
render pipeline state,

921
00:39:11.006 --> 00:39:12.396
there's the compute
pipeline state.

922
00:39:12.606 --> 00:39:15.496
And all it takes in this
case is just the function.

923
00:39:16.296 --> 00:39:17.976
The compute doesn't
have a lot of states.

924
00:39:18.686 --> 00:39:19.976
So at this point in time,

925
00:39:20.116 --> 00:39:23.226
remember in the Metal library
the information we compiled

926
00:39:23.226 --> 00:39:27.606
from your source to Metal
IR, an LLVM-based IR,

927
00:39:27.606 --> 00:39:28.906
we're going to take that

928
00:39:28.906 --> 00:39:30.836
and when you create a new
compute pipeline state,

929
00:39:30.836 --> 00:39:33.566
we're going to compile it
to the actual GPU binary

930
00:39:33.566 --> 00:39:35.506
that the GPU is going
to execute, ok?

931
00:39:36.296 --> 00:39:38.776
I'm going to create my
compute command encoder.

932
00:39:40.516 --> 00:39:42.046
I'm ready to send commands now.

933
00:39:43.266 --> 00:39:46.066
So the first thing I'm going
to do is set my compute state.

934
00:39:46.446 --> 00:39:49.446
So then I'm going to set my
resources my kernel uses;

935
00:39:49.446 --> 00:39:50.946
remember the buffers
and textures.

936
00:39:51.496 --> 00:39:54.506
And then I'm going to execute
"ready to encode the command"

937
00:39:54.506 --> 00:39:55.526
to execute the kernel.

938
00:39:55.836 --> 00:39:56.736
So in order to do that,

939
00:39:57.286 --> 00:39:59.966
I need to first set the number
work-items in the work-group,

940
00:40:00.056 --> 00:40:01.176
and how many work-groups
there are.

941
00:40:01.326 --> 00:40:03.956
So in this example,
I use a 16 by 16.

942
00:40:04.036 --> 00:40:05.366
Remember they are
two-dimensional problems;

943
00:40:05.366 --> 00:40:07.986
I'm going to give it
two-dimensional work-group size.

944
00:40:08.436 --> 00:40:11.276
And so I know the
output image dimensions,

945
00:40:11.456 --> 00:40:13.076
I know my work-group
size, so I'm going

946
00:40:13.076 --> 00:40:15.476
to know...calculate how many
work-groups there are going

947
00:40:15.476 --> 00:40:15.796
to be.

948
00:40:17.186 --> 00:40:20.686
And now, I encode the
command to execute the kernel.

949
00:40:20.686 --> 00:40:22.976
So two things I specify:
the work-group size

950
00:40:22.976 --> 00:40:24.736
and how many work-groups
there are, ok?

951
00:40:24.736 --> 00:40:27.216
And then I'm done encoding.

952
00:40:27.786 --> 00:40:33.176
So at this point in time,
commands have been encoded

953
00:40:33.866 --> 00:40:35.396
but the GPU hasn't
received them.

954
00:40:35.546 --> 00:40:38.066
So just like we talked
about sending commands,

955
00:40:38.066 --> 00:40:40.246
you have to commit the command
buffer and when you do that,

956
00:40:40.586 --> 00:40:43.136
the GPU will start
executing this kernel, ok?

957
00:40:43.336 --> 00:40:46.216
So let me show you a demo of
these filtering operations.

958
00:40:47.026 --> 00:40:49.096
All right, so that's
applying and we know the fact

959
00:40:49.096 --> 00:40:49.976
that we can do shadows.

960
00:40:50.516 --> 00:40:54.546
[ Applause ]

961
00:40:55.046 --> 00:40:56.686
Ok, so that's the
highlights and shadows filter,

962
00:40:56.856 --> 00:40:58.276
but I can actually
do a tune filter.

963
00:40:58.276 --> 00:41:01.836
And so this is actually...what
it's doing is its taking your

964
00:40:58.276 --> 00:41:01.836
And so this is actually...what
it's doing is its taking your

965
00:41:01.836 --> 00:41:03.376
input image and
applying...converting it

966
00:41:03.376 --> 00:41:05.276
into a what we'll
call the LAB space

967
00:41:05.276 --> 00:41:08.936
which approximates human vision,
then does a bilateral filter,

968
00:41:08.936 --> 00:41:10.346
and then actually
does the tune filter,

969
00:41:10.346 --> 00:41:12.186
and then converts
it back to RGB.

970
00:41:12.186 --> 00:41:14.076
Or let's say I want to
sharpen it so I want

971
00:41:14.076 --> 00:41:15.186
to apply a sharpen filter.

972
00:41:15.746 --> 00:41:19.306
So you can see we adjusted the
image, it's getting sharpened.

973
00:41:19.306 --> 00:41:22.796
Hopefully you do see regions of
the image getting sharpened, ok?

974
00:41:22.976 --> 00:41:24.226
So these are some of the filters

975
00:41:24.456 --> 00:41:25.976
and these are really,
really easy to write.

976
00:41:25.976 --> 00:41:29.596
Because in effect what you're
doing now is you're just writing

977
00:41:29.596 --> 00:41:32.946
your code, your algorithm,
just as a set of functions.

978
00:41:33.346 --> 00:41:34.826
And saying, "Execute
this function

979
00:41:34.826 --> 00:41:36.776
or this problem domain."

980
00:41:36.776 --> 00:41:39.006
Really, really simple
to think about.

981
00:41:39.006 --> 00:41:40.236
So focus more on the algorithm

982
00:41:40.236 --> 00:41:42.926
and that's what data-parallel
computing allows you to do, ok?

983
00:41:43.956 --> 00:41:46.486
So that's all I could...that's
all I'm going to say

984
00:41:46.486 --> 00:41:48.196
about data-parallel
computing and next,

985
00:41:48.406 --> 00:41:49.706
we're going to have Serhat come

986
00:41:49.706 --> 00:41:51.416
and show you the
amazing tools we have

987
00:41:51.416 --> 00:41:54.596
and show you how you can debug
profile Metal applications

988
00:41:54.596 --> 00:41:55.976
in Xcode, so Serhat.

989
00:41:56.516 --> 00:42:03.566
[ Applause ]

990
00:41:56.516 --> 00:42:03.566
[ Applause ]

991
00:42:04.066 --> 00:42:05.956
>> Well, thank you
Aaftab and hello everyone.

992
00:42:07.086 --> 00:42:09.846
Now I'm going to show off the
great developer tools we have

993
00:42:10.286 --> 00:42:12.106
in Xcode for your Metal apps.

994
00:42:12.956 --> 00:42:15.316
We'll be focusing
on some combinations

995
00:42:15.406 --> 00:42:19.426
such as state setup, shader
compilation, and performance,

996
00:42:20.046 --> 00:42:22.866
and how you can use the tools
to address these issues.

997
00:42:24.076 --> 00:42:28.166
So I have the same app that
Gokhan showed you earlier here.

998
00:42:28.646 --> 00:42:31.576
The shadow buffer
pass has been modified

999
00:42:31.576 --> 00:42:34.236
to use percentage closer
filtering for softer shadows,

1000
00:42:34.236 --> 00:42:37.226
but my app has a few issues
that I'm going to fix live.

1001
00:42:38.166 --> 00:42:41.086
So let's go ahead and run it.

1002
00:42:41.336 --> 00:42:44.776
Ok as you can see,
I've got some compilers

1003
00:42:44.996 --> 00:42:49.266
and Xcode is pointing right
here at my G-buffer shader code.

1004
00:42:49.786 --> 00:42:52.506
So one of the great things
with Metal is its support

1005
00:42:52.506 --> 00:42:54.946
for pre-compiled shaders
right here in Xcode.

1006
00:42:55.626 --> 00:42:59.496
So in addition to the improved
initialization time for my app

1007
00:42:59.496 --> 00:43:03.576
and other benefits, I also
get to see the compilers

1008
00:42:59.496 --> 00:43:03.576
and other benefits, I also
get to see the compilers

1009
00:43:03.576 --> 00:43:06.296
and warnings right here
in Xcode at build time

1010
00:43:06.436 --> 00:43:07.356
as opposed to run time.

1011
00:43:08.286 --> 00:43:09.926
Let's go in and fix
this real quick.

1012
00:43:10.926 --> 00:43:14.906
Let's define user
variables and launch the app.

1013
00:43:14.906 --> 00:43:19.226
Now you can imagine this offers
a much more productive workflow

1014
00:43:19.226 --> 00:43:20.286
for shader development.

1015
00:43:21.366 --> 00:43:23.666
Also using it is pretty
easy, all you have

1016
00:43:23.666 --> 00:43:26.026
to do is you add your
.mil shader files,

1017
00:43:26.026 --> 00:43:30.096
your Xcode project, and
Xcode takes care of the rest.

1018
00:43:30.096 --> 00:43:32.996
Ok so my app is running now,
but there's something wrong

1019
00:43:32.996 --> 00:43:33.926
with what I'm rendering.

1020
00:43:34.536 --> 00:43:37.076
Now I'm going to take a
frame capture and bring

1021
00:43:37.076 --> 00:43:39.696
up the frame developer so that
you can see the issue as well

1022
00:43:39.696 --> 00:43:42.666
and to do that, I'm going to
click on this camera icon here

1023
00:43:42.666 --> 00:43:45.246
in the Debug bar and
trigger a capture.

1024
00:43:46.396 --> 00:43:47.676
When I trigger a capture,

1025
00:43:48.036 --> 00:43:50.856
the frame debugger harvests
all the Metal commands

1026
00:43:50.856 --> 00:43:54.726
that your application
uses in the frame along

1027
00:43:54.726 --> 00:43:57.056
with all the other
resources that it uses

1028
00:43:57.056 --> 00:43:59.326
as buffers, textures
and shaders.

1029
00:43:59.786 --> 00:44:03.146
With these we can reconstruct
the frame and you can replay

1030
00:43:59.786 --> 00:44:03.146
With these we can reconstruct
the frame and you can replay

1031
00:44:03.146 --> 00:44:05.606
to any particular Metal
command that we choose.

1032
00:44:06.306 --> 00:44:08.106
So this is what I was seeing

1033
00:44:08.406 --> 00:44:10.816
and you can see my scene
is completely in shadow

1034
00:44:12.106 --> 00:44:13.676
and I'm missing my
directional light.

1035
00:44:14.356 --> 00:44:17.326
So let's use the frame debugger
to figure out the problem.

1036
00:44:18.576 --> 00:44:21.336
Well the first thing
I want to do is I want

1037
00:44:21.336 --> 00:44:23.486
to check my commands and make
sure everything is in order.

1038
00:44:24.246 --> 00:44:26.726
For that, I'm going to use
the debug navigator here

1039
00:44:26.726 --> 00:44:28.616
on the left-hand side
of the Xcode window.

1040
00:44:29.836 --> 00:44:32.756
This is where the debugger
shows the old Metal commands

1041
00:44:33.636 --> 00:44:34.986
that were executing
in the frame.

1042
00:44:35.596 --> 00:44:38.346
You can see that it also
reflects the natural hierarchy

1043
00:44:38.346 --> 00:44:40.036
of your command encoders

1044
00:44:40.036 --> 00:44:43.086
within your command buffers
that's making it a lot easier

1045
00:44:43.086 --> 00:44:44.256
for you to navigate your frame.

1046
00:44:45.436 --> 00:44:47.366
Well one thing to keep
in mind here though is,

1047
00:44:47.366 --> 00:44:50.016
the order you see
here, is the order

1048
00:44:50.016 --> 00:44:52.136
that the GPU executes
these commands.

1049
00:44:52.136 --> 00:44:53.796
So it's a bit different
than CPU debugging.

1050
00:44:54.116 --> 00:44:57.906
You can also see that most

1051
00:44:57.906 --> 00:45:00.046
of my objects here have
human-readable names,

1052
00:44:57.906 --> 00:45:00.046
of my objects here have
human-readable names,

1053
00:45:00.046 --> 00:45:01.586
not just draw pointer values.

1054
00:45:02.346 --> 00:45:05.946
Metal class has a label
property that lets you set this

1055
00:45:06.026 --> 00:45:08.076
and I highly recommend
taking advantage of it

1056
00:45:08.076 --> 00:45:09.666
as it's a great aid
in debugging.

1057
00:45:11.136 --> 00:45:12.396
Within the encoders,

1058
00:45:13.116 --> 00:45:16.596
I can further annotate my
command stream using debug

1059
00:45:16.596 --> 00:45:19.556
groups shown in the navigator
as these folder icons.

1060
00:45:20.996 --> 00:45:26.076
Well, I can do this by using the
push and pop debug group APIs

1061
00:45:26.236 --> 00:45:28.196
and the debug groups are great

1062
00:45:28.196 --> 00:45:30.866
for bracketing related commands
together here in the navigator.

1063
00:45:31.556 --> 00:45:34.116
Now let's investigate the
G-buffer pass and figure

1064
00:45:34.116 --> 00:45:35.286
out what's wrong
with the shadows.

1065
00:45:35.286 --> 00:45:38.016
I'm going to click on
this structure debug group

1066
00:45:38.066 --> 00:45:41.796
to navigate there; there you go.

1067
00:45:42.016 --> 00:45:44.036
And as I navigate my frame,

1068
00:45:44.086 --> 00:45:47.036
Xcode's main editor
area is going to update

1069
00:45:47.176 --> 00:45:50.066
and show me all the attachments
for the current framebuffer.

1070
00:45:50.686 --> 00:45:53.846
The assistant editor is
where I see all my textures,

1071
00:45:54.146 --> 00:45:55.766
buffers and functions.

1072
00:45:56.576 --> 00:45:59.456
Currently, it's in bound GPU
objects so it's only going

1073
00:45:59.456 --> 00:46:01.216
to show me the objects
that are bound

1074
00:45:59.456 --> 00:46:01.216
to show me the objects
that are bound

1075
00:46:01.216 --> 00:46:03.006
to the current command encoder.

1076
00:46:03.686 --> 00:46:07.536
All right, so I can see that my
debuffer attachments look more

1077
00:46:07.536 --> 00:46:08.876
or less correct except
for the color.

1078
00:46:09.516 --> 00:46:11.186
But if I look at the assistant,

1079
00:46:12.006 --> 00:46:15.316
I see that my shadow texture
bound to my fragment shader,

1080
00:46:15.546 --> 00:46:17.056
here labeled as "shadow",
is all black.

1081
00:46:18.176 --> 00:46:22.216
So that explains why my scene
was completely in shadow,

1082
00:46:22.296 --> 00:46:24.756
but it also means that my shadow
buffer passes aren't working

1083
00:46:24.756 --> 00:46:27.606
properly, so let's just
go there and investigate.

1084
00:46:28.476 --> 00:46:32.276
So I'm going to just expand this
and click on the encoder itself.

1085
00:46:33.376 --> 00:46:35.566
Now looking at this
I can see right away

1086
00:46:35.736 --> 00:46:37.096
that the depth attachment

1087
00:46:37.096 --> 00:46:39.236
for this pass isn't
cleared when it starts.

1088
00:46:40.446 --> 00:46:41.886
As Gokhan explained earlier,

1089
00:46:41.886 --> 00:46:44.346
you control your
framebuffer attachment clears

1090
00:46:44.346 --> 00:46:46.636
with the load action
property of the attachment.

1091
00:46:48.536 --> 00:46:52.096
Now not only that, but this
don't look like it was rendered

1092
00:46:52.096 --> 00:46:55.296
from the point of light either
but if I step through my frame

1093
00:46:55.596 --> 00:46:58.796
to see my geometry,
that looks proper.

1094
00:47:00.036 --> 00:47:03.646
So let's look at the
framebuffer state and figure

1095
00:47:03.646 --> 00:47:04.616
out what the problem is there.

1096
00:47:05.226 --> 00:47:06.676
I can investigate this state

1097
00:47:06.676 --> 00:47:09.236
of "any Metal object
using the variables view,"

1098
00:47:09.236 --> 00:47:10.016
here at the bottom.

1099
00:47:10.056 --> 00:47:11.956
I'll expand that a
little bit [inaudible].

1100
00:47:11.956 --> 00:47:16.786
On the right-hand side, I have
a list of all my Metal objects.

1101
00:47:17.276 --> 00:47:20.216
But I like to use the Auto
View you see on the left.

1102
00:47:20.216 --> 00:47:23.336
This is where you see all the
relevant objects and their state

1103
00:47:23.766 --> 00:47:25.816
for the current selected
command only.

1104
00:47:26.506 --> 00:47:28.256
So I know what I'm looking for.

1105
00:47:29.136 --> 00:47:30.596
My framebuffer state
is going to be

1106
00:47:30.596 --> 00:47:33.176
under the RenderCommandEncoder
so I'm going to disclose that

1107
00:47:33.176 --> 00:47:35.366
and search for framebuffer.

1108
00:47:35.886 --> 00:47:40.646
And yeah, as I suspected, my
load action is not set to clear.

1109
00:47:40.646 --> 00:47:44.966
And not only that, the attached
texture here is actually depth;

1110
00:47:45.116 --> 00:47:47.556
the texture I was looking at
earlier was labeled "shadow."

1111
00:47:48.686 --> 00:47:52.946
Now if I disclose my framebuffer
setup that I prepared earlier,

1112
00:47:52.946 --> 00:47:56.236
I can see that I already
have a shadow frame buffer

1113
00:47:56.236 --> 00:47:58.386
but I'm using debug
framebuffer here.

1114
00:47:58.386 --> 00:48:01.836
So that explains why I
was getting a blank shadow

1115
00:47:58.386 --> 00:48:01.836
So that explains why I
was getting a blank shadow

1116
00:48:01.836 --> 00:48:02.466
buffer texture.

1117
00:48:02.846 --> 00:48:06.386
I can quickly fix this by
using the debug navigator

1118
00:48:06.386 --> 00:48:07.766
to take me straight
to the problem.

1119
00:48:08.666 --> 00:48:12.296
And I can do that by going
back to the navigator.

1120
00:48:13.006 --> 00:48:14.796
Now you setup your framebuffer

1121
00:48:14.796 --> 00:48:16.516
when you're creating your
RenderCommandEncoder.

1122
00:48:16.676 --> 00:48:18.616
I can disclose the back-trace

1123
00:48:19.106 --> 00:48:21.026
where I create the
RenderCommandEncoder and use

1124
00:48:21.026 --> 00:48:23.306
that to jump straight
to the source.

1125
00:48:24.236 --> 00:48:25.936
So let me go ahead and
fix this real quick.

1126
00:48:29.756 --> 00:48:30.886
It should be shadow.

1127
00:48:31.026 --> 00:48:33.956
I'd like to stop my
app and re-launch it

1128
00:48:34.926 --> 00:48:36.636
and make sure everything
is running properly.

1129
00:48:37.516 --> 00:48:43.086
[ Pause ]

1130
00:48:43.586 --> 00:48:47.686
All right, so my scene
looks great now but looking

1131
00:48:47.686 --> 00:48:49.466
at the frames per
second tray here,

1132
00:48:50.216 --> 00:48:52.216
I can see that I'm not really
getting the performance

1133
00:48:52.216 --> 00:48:52.846
I expect.

1134
00:48:52.846 --> 00:48:55.006
I'm going to click
on this tray to bring

1135
00:48:55.006 --> 00:48:57.476
up the graphics performance
report.

1136
00:48:58.846 --> 00:49:02.746
Now I'm getting about
35-ish frames per second;

1137
00:48:58.846 --> 00:49:02.746
Now I'm getting about
35-ish frames per second;

1138
00:49:02.746 --> 00:49:04.036
I was getting 60 earlier.

1139
00:49:05.066 --> 00:49:08.366
Now looking at the report, I can
tell my GPU is heavily utilized

1140
00:49:08.366 --> 00:49:10.176
with most of the work
coming from the render

1141
00:49:10.216 --> 00:49:11.736
or the fragment shader stage.

1142
00:49:13.086 --> 00:49:14.836
Ok, to get a more
detailed picture,

1143
00:49:14.836 --> 00:49:16.796
let's take another frame capture

1144
00:49:17.196 --> 00:49:19.626
and see what the Shader
Profiler has to say about it.

1145
00:49:20.106 --> 00:49:23.556
And the Shader Profiler
is at Sampling Profiler.

1146
00:49:24.036 --> 00:49:25.216
That's going to automatically

1147
00:49:25.216 --> 00:49:27.116
and repeatedly run
all my shaders

1148
00:49:27.116 --> 00:49:28.146
in my frame for sampling.

1149
00:49:28.846 --> 00:49:31.626
This may take a bit longer
for a more complicated scene,

1150
00:49:31.626 --> 00:49:34.266
but that small amount of time
is well worth the investment

1151
00:49:34.266 --> 00:49:36.886
as it offers an in-depth
performance analysis

1152
00:49:36.886 --> 00:49:38.716
that I otherwise
wouldn't be able to get.

1153
00:49:40.046 --> 00:49:41.936
Ok, when the Shader
Profiler is done,

1154
00:49:42.546 --> 00:49:45.906
I'm going to get this
program performance table here

1155
00:49:45.906 --> 00:49:46.466
in the report.

1156
00:49:46.996 --> 00:49:51.276
In this table, I get a breakdown
of the performance cost

1157
00:49:51.276 --> 00:49:54.576
of all my render
pipelines in the frame along

1158
00:49:54.576 --> 00:49:57.836
with all the draw calls
that use these pipelines.

1159
00:49:57.836 --> 00:49:59.366
I can disclose this
so you see that.

1160
00:50:00.466 --> 00:50:03.366
Another great way to look
at this is to again go back

1161
00:50:03.366 --> 00:50:06.986
to the navigator and
switch it to use the

1162
00:50:06.986 --> 00:50:08.236
"View Frame by Program" mode.

1163
00:50:09.696 --> 00:50:11.206
Now the nice thing about this is

1164
00:50:11.206 --> 00:50:14.676
that I can both navigate my
frame and see my shader profiler

1165
00:50:14.716 --> 00:50:16.096
and results at the same time.

1166
00:50:16.836 --> 00:50:20.236
So let's look at the
most expensive draw call

1167
00:50:20.346 --> 00:50:22.426
and the most expensive
pipeline real quick.

1168
00:50:22.916 --> 00:50:27.586
I'm going to hide my
draw call highlight

1169
00:50:27.586 --> 00:50:29.986
so that I can see my
attachments better.

1170
00:50:30.396 --> 00:50:32.036
And in the Assistant,
I'm going to bring

1171
00:50:32.036 --> 00:50:34.546
up that costly fragment shader,
so that I can look at this

1172
00:50:34.546 --> 00:50:36.036
for us, make some
more room here.

1173
00:50:36.596 --> 00:50:36.686
Oops.

1174
00:50:39.176 --> 00:50:41.816
Ok, now as I look at my code,

1175
00:50:43.116 --> 00:50:47.636
I can see line-by-line profiling
data right alongside my code

1176
00:50:47.716 --> 00:50:48.386
here in the editor.

1177
00:50:48.816 --> 00:50:50.336
And if I keep scrolling down,

1178
00:50:51.156 --> 00:50:54.986
I see that the most expensive
parts of my shader by far is

1179
00:50:54.986 --> 00:50:57.176
where I'm doing the
shadow sampling loop.

1180
00:50:58.076 --> 00:50:59.636
So this many samples
is an overkill.

1181
00:50:59.636 --> 00:51:05.116
Let's reduce it to just a 2
by 2 grid and Save: Command+S.

1182
00:50:59.636 --> 00:51:05.116
Let's reduce it to just a 2
by 2 grid and Save: Command+S.

1183
00:51:05.366 --> 00:51:08.146
Now when I do that, my shader
is going to get recompiled

1184
00:51:08.706 --> 00:51:10.656
and my changes will
take effect immediately.

1185
00:51:11.776 --> 00:51:14.436
And once the shader
profiler is done analyzing,

1186
00:51:14.576 --> 00:51:17.586
I'm going to get updated
performance numbers as well.

1187
00:51:18.906 --> 00:51:22.006
And I can see that my
attachments look more

1188
00:51:22.006 --> 00:51:23.416
or less unaffected; that's good.

1189
00:51:23.796 --> 00:51:26.706
And now I'm spending far less
time in the expensive part

1190
00:51:26.706 --> 00:51:28.576
of my shader source
and that's great.

1191
00:51:28.846 --> 00:51:33.856
And if I scroll all the way to
the end, this is my end result.

1192
00:51:34.776 --> 00:51:39.276
Now I can go ahead and resume
my app and I see a nice,

1193
00:51:39.276 --> 00:51:40.596
smooth 60 frames per second.

1194
00:51:40.986 --> 00:51:41.436
Excellent.

1195
00:51:42.066 --> 00:51:45.006
With that, my work here
is done and it's time

1196
00:51:45.006 --> 00:51:46.366
to leave the stage
back to Aaftab.

1197
00:51:46.366 --> 00:51:46.926
Thank you.

1198
00:51:47.516 --> 00:51:53.936
[ Applause ]

1199
00:51:54.436 --> 00:51:56.066
All right, so let's
summarize, ok?

1200
00:51:56.486 --> 00:52:01.586
So Gokhan, you know, took you
deeper into how Metal works.

1201
00:51:56.486 --> 00:52:01.586
So Gokhan, you know, took you
deeper into how Metal works.

1202
00:52:02.056 --> 00:52:05.336
You know we talked about how
you structure the application.

1203
00:52:05.336 --> 00:52:08.776
The descriptors and state
objects; how do you create them

1204
00:52:09.096 --> 00:52:11.796
and when to do what, like
for example: things you want

1205
00:52:11.796 --> 00:52:15.656
to do once, like creating
your command queue.

1206
00:52:16.276 --> 00:52:18.576
Things you need to create
whenever you need to,

1207
00:52:18.576 --> 00:52:22.026
like resources, and things
you must create every frame

1208
00:52:22.156 --> 00:52:24.206
and every pass, right?

1209
00:52:24.206 --> 00:52:29.946
And he showed you how you can do
multi-pass encoding with Metal.

1210
00:52:30.546 --> 00:52:34.286
Then I gave you a
small, brief teaser

1211
00:52:34.286 --> 00:52:36.046
into data-parallel
computing, ok?

1212
00:52:36.196 --> 00:52:40.086
And then finally we showed you
the amazing tools that we have

1213
00:52:40.086 --> 00:52:42.846
in Metal that you can use to
write amazing applications.

1214
00:52:44.026 --> 00:52:44.766
That was it.

1215
00:52:45.256 --> 00:52:49.186
So for more information,
any questions, you know,

1216
00:52:49.186 --> 00:52:51.756
Philip Iliescu and Allan
Schaffer are evangelists.

1217
00:52:51.756 --> 00:52:53.076
You know their emails are there.

1218
00:52:53.686 --> 00:52:55.416
And documentation
is on our website.

1219
00:52:55.416 --> 00:52:59.696
You know you can post questions,
emails on the developer forums.

1220
00:53:00.916 --> 00:53:03.056
The first two sessions
that happened this morning,

1221
00:53:03.056 --> 00:53:04.266
so these are the ones.

1222
00:53:04.886 --> 00:53:05.466
Thank you guys.

1223
00:53:06.508 --> 00:53:08.508
[ Applause ]
