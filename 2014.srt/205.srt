
1
00:00:12.516 --> 00:00:19.976
[ Applause ]

2
00:00:20.476 --> 00:00:24.766
>> Hello. I'm Ian Baird,
iOS Frameworks Engineer,

3
00:00:24.826 --> 00:00:26.696
and today I'm here to tell you

4
00:00:26.696 --> 00:00:31.016
about creating extensions
for iOS and OS X.

5
00:00:31.496 --> 00:00:33.566
Going to lay out a quick
agenda for today's talk.

6
00:00:33.976 --> 00:00:37.046
First, we're going to talk about
extensions and extension points.

7
00:00:38.166 --> 00:00:40.596
Then I'm going to invite
my colleague, Matt Gamble,

8
00:00:40.976 --> 00:00:43.546
from the Notification
Center Team to the stage

9
00:00:43.846 --> 00:00:47.076
to tell you more and show
you more about creating one

10
00:00:47.076 --> 00:00:51.236
of the hottest new tickets
at WWDC14, Today Extensions.

11
00:00:51.826 --> 00:00:57.736
And then, following
on from that,

12
00:00:57.856 --> 00:01:00.386
we're going to invite our
colleague, Guy Fullerton,

13
00:00:57.856 --> 00:01:00.386
we're going to invite our
colleague, Guy Fullerton,

14
00:01:00.916 --> 00:01:03.176
onto the stage to tell
you more about how

15
00:01:03.176 --> 00:01:06.196
to create Share Extensions
like the one you saw

16
00:01:06.396 --> 00:01:07.866
in the keynote with Pinterest.

17
00:01:10.176 --> 00:01:13.296
Moving along, what
are extensions?

18
00:01:13.656 --> 00:01:19.256
Well, extensions are almost
like, it's a way for you

19
00:01:19.606 --> 00:01:23.976
to extend the system
and other applications.

20
00:01:24.126 --> 00:01:26.686
It's almost like more surface
area for you to be able

21
00:01:26.686 --> 00:01:29.156
to apply bits and
pieces of your app.

22
00:01:29.676 --> 00:01:33.426
As you can see here, we have a
screenshot of the Apple homepage

23
00:01:33.616 --> 00:01:37.376
on an iPad showing the new
activity ViewController,

24
00:01:37.376 --> 00:01:39.996
and you'll notice a
lot of familiar faces,

25
00:01:39.996 --> 00:01:43.016
a lot of familiar icons in
that activity ViewController.

26
00:01:43.066 --> 00:01:44.576
You can see messages, mail,

27
00:01:44.576 --> 00:01:47.596
and we have a new
one, the Butterfly.

28
00:01:47.666 --> 00:01:50.026
And Butterfly is a
sharing extension.

29
00:01:50.026 --> 00:01:53.726
You can see it's at home right
there with its brethren right

30
00:01:53.856 --> 00:01:55.926
in the midst of the
sharing extensions.

31
00:01:56.466 --> 00:02:00.396
And we also support
sharing extensions on OS X.

32
00:01:56.466 --> 00:02:00.396
And we also support
sharing extensions on OS X.

33
00:02:00.396 --> 00:02:02.936
You can see we have the
Butterfly sharing extension

34
00:02:03.216 --> 00:02:04.056
on Yosemite.

35
00:02:05.676 --> 00:02:09.356
We support Notification
Center Extensions also known

36
00:02:09.356 --> 00:02:11.056
as Today Extensions.

37
00:02:11.686 --> 00:02:15.606
And as you can see, notification
extensions are really good

38
00:02:15.606 --> 00:02:17.976
for giving you at-a-glance
information;

39
00:02:18.296 --> 00:02:19.946
something where you just
want to pull your phone

40
00:02:19.946 --> 00:02:23.796
out of your pocket, take a quick
look, check some sports scores,

41
00:02:24.136 --> 00:02:26.016
maybe traffic conditions,
the weather,

42
00:02:26.016 --> 00:02:27.796
and then put it back
in your pocket.

43
00:02:27.796 --> 00:02:32.106
It gives you at-a-glance, quick
access to information you want.

44
00:02:33.096 --> 00:02:35.686
And of course, we
support this on Yosemite

45
00:02:35.686 --> 00:02:38.666
and you can see it looks
gorgeous blended right

46
00:02:38.666 --> 00:02:39.836
over that new background.

47
00:02:39.836 --> 00:02:41.586
It's just beautiful,
stunningly beautiful.

48
00:02:41.586 --> 00:02:42.706
The team did a great job.

49
00:02:45.726 --> 00:02:49.076
Next, I want to show you the
Custom Action Extensions.

50
00:02:49.496 --> 00:02:52.676
You can see here we have our
new Annotate Image Extension,

51
00:02:52.676 --> 00:02:54.546
which I'm going to show
you how to build tomorrow,

52
00:02:54.936 --> 00:02:56.936
right in that row of actions.

53
00:02:57.296 --> 00:03:00.066
Actions can be UI
and non-UI actions,

54
00:02:57.296 --> 00:03:00.066
Actions can be UI
and non-UI actions,

55
00:03:00.066 --> 00:03:01.966
as you saw with the Bing
Translate Extension.

56
00:03:02.586 --> 00:03:06.036
And we support custom
actions on OS X as well.

57
00:03:06.036 --> 00:03:08.106
As a matter of fact, this
is the infrastructure

58
00:03:08.526 --> 00:03:11.196
for the Markup Extension
on OS X.

59
00:03:11.196 --> 00:03:13.946
And you'll notice this
is a very common theme.

60
00:03:14.226 --> 00:03:15.666
We're sharing infrastructure.

61
00:03:15.856 --> 00:03:19.066
We're making it easy for you to
build things for both platforms.

62
00:03:20.756 --> 00:03:25.566
Next, on iOS only we have
the photo extensions.

63
00:03:26.056 --> 00:03:28.196
Now, if there is a photo filter

64
00:03:28.196 --> 00:03:30.886
that you've been
missing-I don't know,

65
00:03:30.886 --> 00:03:34.886
maybe?-or an annotation
extension you would like to make

66
00:03:34.886 --> 00:03:38.586
for photos, you can build it
now right into the photos UI.

67
00:03:38.896 --> 00:03:39.706
This is really cool.

68
00:03:40.326 --> 00:03:44.326
And we also support
Document Providers.

69
00:03:44.636 --> 00:03:47.956
Document Providers bring
storage and things like that

70
00:03:47.956 --> 00:03:51.776
from the Cloud right into
applications inside of iOS.

71
00:03:52.016 --> 00:03:52.866
This is a first.

72
00:03:52.866 --> 00:03:54.796
It really breaks down
a lot of barriers

73
00:03:54.836 --> 00:03:58.046
that we've all been living with
for, I believe, seven releases.

74
00:03:58.496 --> 00:04:03.596
And next I want to tell you
about Finder Extensions.

75
00:03:58.496 --> 00:04:03.596
And next I want to tell you
about Finder Extensions.

76
00:04:03.676 --> 00:04:05.366
Finder Extensions
are really cool.

77
00:04:05.366 --> 00:04:09.096
In the past if you wanted to be
able to badge or annotate items

78
00:04:09.096 --> 00:04:12.056
and folders inside of the
finder, you may have to resort

79
00:04:12.056 --> 00:04:16.736
to sort of sketchy behavior
like mock inject or some sort

80
00:04:16.736 --> 00:04:19.156
of hackery and now you
don't have to do that.

81
00:04:19.156 --> 00:04:22.376
Now, you actually have a
supported way to badge items

82
00:04:22.376 --> 00:04:24.326
in the finder and we
think this is really cool.

83
00:04:26.256 --> 00:04:31.886
And then last, but not
least, third-party keyboards.

84
00:04:31.986 --> 00:04:34.086
We're supporting
third-party keyboards

85
00:04:34.366 --> 00:04:36.626
in iOS now, using extensions.

86
00:04:37.206 --> 00:04:41.466
So, I've told you about
extensions and some

87
00:04:41.466 --> 00:04:45.006
of the extension points that
we're offering in iOS and OS X,

88
00:04:45.006 --> 00:04:48.396
and next I'd like to tell you
about delivering extensions.

89
00:04:48.776 --> 00:04:51.466
Extensions are delivered
as part of your app known

90
00:04:51.466 --> 00:04:53.056
as the Extension Container.

91
00:04:53.416 --> 00:04:57.616
An Extension Container can
contain many different types

92
00:04:57.696 --> 00:04:58.526
of extensions.

93
00:04:58.706 --> 00:05:01.776
For example, it could
contain a Today View Widget.

94
00:04:58.706 --> 00:05:01.776
For example, it could
contain a Today View Widget.

95
00:05:01.776 --> 00:05:04.496
It could contain a
sharing extension

96
00:05:04.846 --> 00:05:08.296
and it could also contain
maybe multiple custom

97
00:05:08.346 --> 00:05:09.486
action extensions.

98
00:05:09.666 --> 00:05:12.546
They're all bound up within
your application's bundle

99
00:05:12.746 --> 00:05:16.366
and delivered via the App Store.

100
00:05:16.776 --> 00:05:19.096
Extension Points-so
I've talked a little bit

101
00:05:19.096 --> 00:05:22.236
about Extension Points earlier,
but I'll tell you what they are.

102
00:05:22.236 --> 00:05:24.976
Extension Points, again,
are the new bits and pieces

103
00:05:24.976 --> 00:05:27.566
of surface area that we've
exposed on the system

104
00:05:27.826 --> 00:05:29.536
for your extensions to bind to.

105
00:05:29.766 --> 00:05:33.106
For example, a Today
View Widget binds

106
00:05:33.106 --> 00:05:36.326
to the Notification Center
via the Notification Center

107
00:05:36.326 --> 00:05:39.126
Extension or the Today
View Extension point.

108
00:05:39.796 --> 00:05:42.816
This means you're never going
to see a Today View Extension

109
00:05:43.096 --> 00:05:45.246
in the activity ViewController,
for example.

110
00:05:47.276 --> 00:05:50.036
And one thing to remember
about all extensions is

111
00:05:50.036 --> 00:05:52.086
that they're purpose
built binaries.

112
00:05:52.176 --> 00:05:53.536
See, these are not apps.

113
00:05:53.586 --> 00:05:55.916
These are not even
a piece of your app.

114
00:05:55.916 --> 00:05:58.496
It's not a special mode
that we launch your app in.

115
00:05:59.206 --> 00:06:01.066
It's a special purpose binary.

116
00:05:59.206 --> 00:06:01.066
It's a special purpose binary.

117
00:06:01.066 --> 00:06:03.056
It has its own code signature.

118
00:06:03.056 --> 00:06:05.196
It has its own set
of entitlements

119
00:06:05.456 --> 00:06:06.946
and it has its own container.

120
00:06:07.366 --> 00:06:09.906
Damien's going to speak to this
further in tomorrow's session.

121
00:06:11.306 --> 00:06:13.126
So, as I said, they're not apps.

122
00:06:13.126 --> 00:06:16.686
And they're always accessed
via Apple Frameworks code.

123
00:06:17.146 --> 00:06:18.756
You never really
directly launch them.

124
00:06:18.756 --> 00:06:21.666
Apple Frameworks code is in
charge of discovering them

125
00:06:21.726 --> 00:06:24.346
for you and providing
usually the user interaction

126
00:06:24.346 --> 00:06:26.416
by which they're launched, and
I'll talk about that later.

127
00:06:28.036 --> 00:06:30.556
And, as I was talking
with a developer at lunch

128
00:06:30.556 --> 00:06:32.036
about this right
before we came here,

129
00:06:32.036 --> 00:06:34.546
these are not facilitating
app-to-app IPC.

130
00:06:34.676 --> 00:06:38.706
You don't get, like, a pipe
back to the containing app

131
00:06:38.766 --> 00:06:40.416
for your extension to
be able to talk to it.

132
00:06:40.876 --> 00:06:43.106
If you want to build workflows

133
00:06:43.216 --> 00:06:46.156
that incorporate app-to-app
IPC you can still use things

134
00:06:46.156 --> 00:06:48.786
like UIApplication openURL.

135
00:06:48.786 --> 00:06:52.626
But, what I would ask you
to do is reconsider some

136
00:06:52.626 --> 00:06:55.576
of these workflows that you
had before that involved sort

137
00:06:55.576 --> 00:06:57.986
of contextually switching from
one application to another

138
00:06:57.986 --> 00:07:01.366
on a user's phone and reconsider
casting this, maybe in terms

139
00:06:57.986 --> 00:07:01.366
on a user's phone and reconsider
casting this, maybe in terms

140
00:07:01.366 --> 00:07:04.596
of custom actions, which are
really the spiritual successors

141
00:07:04.596 --> 00:07:05.786
to services.

142
00:07:07.546 --> 00:07:10.426
So next, what are
Extension Points?

143
00:07:10.426 --> 00:07:11.096
They're very high level.

144
00:07:11.096 --> 00:07:13.106
They mark extensible
parts of the system.

145
00:07:14.066 --> 00:07:16.176
They're always packaged
in System Frameworks.

146
00:07:16.306 --> 00:07:19.476
We don't support
third-party extension points

147
00:07:20.086 --> 00:07:23.206
and they combine API and
Policy, as you can imagine.

148
00:07:23.206 --> 00:07:24.966
Again, with the Today
View Widget.

149
00:07:25.386 --> 00:07:27.866
The Today View Widget,
it's very simple.

150
00:07:27.866 --> 00:07:29.436
It's largely, as Matt's
going to tell you.

151
00:07:29.606 --> 00:07:30.586
a ViewController.

152
00:07:31.236 --> 00:07:32.856
But, this ViewController
also comes

153
00:07:32.856 --> 00:07:36.266
with its own policy-policy,
which incorporates things

154
00:07:36.266 --> 00:07:37.686
like launch characteristics.

155
00:07:38.116 --> 00:07:40.496
Now, an important thing to
remember about extensions,

156
00:07:40.496 --> 00:07:44.286
most extensions on the
system are bound one-to-one

157
00:07:44.446 --> 00:07:45.416
with their hosting app.

158
00:07:45.866 --> 00:07:47.796
So, let me give you
an example of this.

159
00:07:47.896 --> 00:07:49.906
Let's say you write
a sharing extension

160
00:07:50.086 --> 00:07:52.726
and the sharing extension
is invoked in Safari.

161
00:07:53.376 --> 00:07:56.246
An instance of your extension,
a new process is going

162
00:07:56.246 --> 00:07:58.506
to be spun up to serve Safari.

163
00:07:58.876 --> 00:08:01.536
Now, if the user homes
out and goes over to mail

164
00:07:58.876 --> 00:08:01.536
Now, if the user homes
out and goes over to mail

165
00:08:01.536 --> 00:08:04.056
and launches your
extension again-let's say,

166
00:08:04.056 --> 00:08:07.446
maybe to share an attachment-a
brand new process is going

167
00:08:07.446 --> 00:08:09.606
to be spun up for
your extension.

168
00:08:09.676 --> 00:08:12.536
Those processes are not
going to share address spaces

169
00:08:12.846 --> 00:08:14.916
and this protects you from
mistakes in your code.

170
00:08:14.916 --> 00:08:16.336
If you're still using
Objective-C

171
00:08:16.336 --> 00:08:18.406
and you have a wild pointer
or something like that,

172
00:08:18.726 --> 00:08:21.476
you're not going to be able to
bring down all of the instances

173
00:08:21.476 --> 00:08:23.906
of your extension that
are running on the system.

174
00:08:23.986 --> 00:08:24.686
It's really cool.

175
00:08:25.816 --> 00:08:29.616
The extension point also
governs the presentation

176
00:08:29.616 --> 00:08:30.486
of your extension.

177
00:08:30.626 --> 00:08:32.446
An important thing
to remember is

178
00:08:32.446 --> 00:08:34.166
that extensions are
UI ViewControllers.

179
00:08:34.166 --> 00:08:35.676
You're going to hear that
multiple times today.

180
00:08:35.676 --> 00:08:38.106
But, UI ViewControllers
can be exposed

181
00:08:38.106 --> 00:08:39.525
to the user in multiple ways.

182
00:08:39.525 --> 00:08:42.066
And usually since
extensions live inside

183
00:08:42.066 --> 00:08:45.426
of the user interface
of another application,

184
00:08:45.996 --> 00:08:48.326
it's up to that application
and up to the system

185
00:08:48.576 --> 00:08:50.336
as to how it decides
to present you.

186
00:08:50.536 --> 00:08:52.926
You can either be
contained or presented.

187
00:08:53.496 --> 00:08:55.196
Notification Center Widgets,

188
00:08:55.346 --> 00:08:58.896
Today View Extensions are
contained while sharing

189
00:08:58.896 --> 00:09:00.266
extensions are presented.

190
00:08:58.896 --> 00:09:00.266
extensions are presented.

191
00:09:01.676 --> 00:09:04.706
And when many extension
points support

192
00:09:04.706 --> 00:09:07.156
or a few extension points
support view controller

193
00:09:07.156 --> 00:09:10.226
and non-view controller
variance of the extension point.

194
00:09:10.356 --> 00:09:13.456
For instance, custom actions,
as you'll see tomorrow,

195
00:09:13.676 --> 00:09:16.816
support a view controller
variant, which allows the user

196
00:09:16.816 --> 00:09:19.096
to interact with the content
before it's transformed

197
00:09:19.096 --> 00:09:20.956
and sent back to the host.

198
00:09:20.956 --> 00:09:22.176
As you saw during the keynote,

199
00:09:22.226 --> 00:09:24.386
when Craig tapped the
Bing translate extension,

200
00:09:24.696 --> 00:09:27.536
there was no UI and that
was a non-view extension,

201
00:09:27.646 --> 00:09:29.386
and we'll tell you
more about that later.

202
00:09:31.016 --> 00:09:33.616
So, how are extensions invoked?

203
00:09:33.836 --> 00:09:35.976
This is-again, going
back to our example,

204
00:09:35.976 --> 00:09:38.856
we're going to show you what
happens when the user decides

205
00:09:38.856 --> 00:09:40.956
to tap on the Butterfly
sharing extension.

206
00:09:40.956 --> 00:09:45.236
The user taps and the
extension host, which is Safari

207
00:09:45.236 --> 00:09:47.496
at this time, goes and talks

208
00:09:47.496 --> 00:09:49.726
to the Notification
Center Framework.

209
00:09:50.076 --> 00:09:51.076
The notification-sorry,

210
00:09:51.076 --> 00:09:53.006
not notification,
the Social Framework.

211
00:09:53.256 --> 00:09:56.306
And the Social Framework
goes and discovers and loads

212
00:09:56.306 --> 00:09:57.776
and presents the extension.

213
00:09:58.206 --> 00:10:02.766
You'll notice that Safari is not
directly launching the extension

214
00:09:58.206 --> 00:10:02.766
You'll notice that Safari is not
directly launching the extension

215
00:10:02.766 --> 00:10:03.566
at any point.

216
00:10:03.566 --> 00:10:06.096
It's bouncing through Apple
Frameworks to do this.

217
00:10:07.386 --> 00:10:12.316
So, in summary, extensions are
small pieces of functionality.

218
00:10:12.426 --> 00:10:14.416
They're purpose built
to do one thing

219
00:10:14.416 --> 00:10:16.336
and then get out of the way.

220
00:10:16.736 --> 00:10:19.936
They extend the system in
new and interesting ways.

221
00:10:20.176 --> 00:10:22.766
We can't wait to see what you
guys do with these things.

222
00:10:23.856 --> 00:10:26.946
And they mark extendable parts
of the system, as I said,

223
00:10:26.946 --> 00:10:29.666
new surface area for you
to attach the functionality

224
00:10:29.666 --> 00:10:32.846
of your app in interesting and
meaningful ways for our users.

225
00:10:33.126 --> 00:10:35.056
And now, to tell you more

226
00:10:35.056 --> 00:10:37.216
about Notification
Center Extensions I'd

227
00:10:37.216 --> 00:10:38.976
like to invite my colleague,
Matt Gamble, to the stage.

228
00:10:39.516 --> 00:10:46.776
[ Applause ]

229
00:10:47.276 --> 00:10:49.056
>> Hello, I'm Matt Gamble.

230
00:10:49.136 --> 00:10:51.736
I'm an Engineer on the
iOS Notifications Team,

231
00:10:51.736 --> 00:10:53.136
and today I'm going to tell you

232
00:10:53.136 --> 00:10:55.036
about Notification
Center Extensions,

233
00:10:55.276 --> 00:10:57.406
or widgets as we call them.

234
00:10:57.936 --> 00:10:59.946
Now, we've had widgets
in some fashion

235
00:10:59.946 --> 00:11:02.006
on the system for a while now.

236
00:10:59.946 --> 00:11:02.006
on the system for a while now.

237
00:11:02.536 --> 00:11:06.166
But, for the first time in iOS
8 we are giving developers the

238
00:11:06.166 --> 00:11:07.716
power to add their own content

239
00:11:07.766 --> 00:11:12.096
to the Notification
Center's Today View.

240
00:11:12.316 --> 00:11:15.996
Now, perhaps most fundamentally
widgets are view controllers

241
00:11:16.346 --> 00:11:17.276
so that means everything
you know

242
00:11:17.276 --> 00:11:20.006
about view controllers
including the lifecycle

243
00:11:20.006 --> 00:11:22.886
and containment behavior
in API will serve you well

244
00:11:22.886 --> 00:11:24.076
when you're constructing
your widget.

245
00:11:25.136 --> 00:11:26.566
For example, the
appearance calls.

246
00:11:27.156 --> 00:11:29.866
These will tell you when your
widget is coming and going

247
00:11:30.196 --> 00:11:31.336
in the Notification Center.

248
00:11:32.066 --> 00:11:34.256
And of particular
interest is viewWillAppear,

249
00:11:34.626 --> 00:11:37.536
as you want to be sure that your
view is up and ready to be used

250
00:11:37.536 --> 00:11:40.506
by the user by the time you're
returning from viewWillAppear.

251
00:11:41.516 --> 00:11:43.856
So, speaking of getting
ready, it's important

252
00:11:43.856 --> 00:11:44.796
that you get ready fast.

253
00:11:44.896 --> 00:11:47.476
Performance is a very
big consideration

254
00:11:47.476 --> 00:11:48.816
with Notification
Center widgets.

255
00:11:49.456 --> 00:11:50.806
So, a couple tips.

256
00:11:50.806 --> 00:11:53.666
Be sure to load cached
data, so you're bringing

257
00:11:53.666 --> 00:11:55.466
up your view quickly
and you're ready to go.

258
00:11:55.466 --> 00:11:57.386
And if you have some
new data that comes

259
00:11:57.386 --> 00:11:59.686
in you can do your
own custom transition.

260
00:12:01.236 --> 00:12:04.766
Also, kick off your expensive
operations as early as possible

261
00:12:04.766 --> 00:12:06.306
and definitely in
the background.

262
00:12:07.046 --> 00:12:10.126
And when those expensive
operations return be sure

263
00:12:10.126 --> 00:12:13.756
to cache this data.

264
00:12:13.996 --> 00:12:15.466
So, layout is another concern.

265
00:12:15.466 --> 00:12:19.056
Of course, your widgets
and your widget has control

266
00:12:19.056 --> 00:12:22.756
over its sub view hierarchy and
laying all of your content out.

267
00:12:22.916 --> 00:12:25.936
But, just as with any other
parent-child view controller

268
00:12:25.936 --> 00:12:28.596
relationship, the Notification
Center will be laying

269
00:12:28.596 --> 00:12:30.616
out your views frame.

270
00:12:31.296 --> 00:12:33.656
So, that means that the
Notification Center is setting

271
00:12:33.736 --> 00:12:34.296
the frames.

272
00:12:34.516 --> 00:12:36.916
You don't set your own
widgets views frame.

273
00:12:37.366 --> 00:12:39.956
But, of course, not all
content is created equal.

274
00:12:40.256 --> 00:12:43.446
So, if you might have,
need some more room

275
00:12:43.446 --> 00:12:46.606
for your content you can
indicate your preferred height

276
00:12:46.606 --> 00:12:49.076
and you can do this in two ways.

277
00:12:49.516 --> 00:12:50.946
The first is through
auto layout.

278
00:12:51.416 --> 00:12:55.016
If you can describe
your widget's height

279
00:12:55.196 --> 00:12:57.856
with constraints then those
will be honored automatically

280
00:12:57.856 --> 00:12:58.926
in the Notification Center.

281
00:13:00.026 --> 00:13:01.956
Otherwise, if you're
using more manual layout,

282
00:13:02.276 --> 00:13:05.646
you can use the view controller
method setPreferredContentSize.

283
00:13:06.686 --> 00:13:11.806
And both of these systems
work across both iOS and OS X.

284
00:13:12.536 --> 00:13:16.076
So, while you will definitely
want to set your size as early

285
00:13:16.076 --> 00:13:17.096
as possible to ensure

286
00:13:17.096 --> 00:13:20.106
that you're showing your
content the right way

287
00:13:20.106 --> 00:13:21.056
in Notification Center,

288
00:13:21.536 --> 00:13:23.696
that's not the only time
that you can call it.

289
00:13:24.276 --> 00:13:27.096
If, for some reason, you are
showing different content

290
00:13:27.096 --> 00:13:28.866
or changes you can
call this later.

291
00:13:29.376 --> 00:13:31.726
For instance, let's say
that we had a button

292
00:13:31.726 --> 00:13:33.546
that would show a
little bit more content

293
00:13:33.716 --> 00:13:35.646
or a little bit more
detail about some content

294
00:13:35.646 --> 00:13:36.636
that we have in our widget.

295
00:13:36.636 --> 00:13:40.416
You could tie this up to this
action, calculate the new height

296
00:13:40.416 --> 00:13:42.326
for this new content
and then just

297
00:13:42.326 --> 00:13:44.256
call setPreferredContentSize.

298
00:13:44.776 --> 00:13:47.116
The Notification Center
will take care of this.

299
00:13:47.116 --> 00:13:48.946
It'll automatically
resize your widget,

300
00:13:49.576 --> 00:13:50.956
but that's only half the story.

301
00:13:51.476 --> 00:13:53.316
What you probably
want to do is ensure

302
00:13:53.416 --> 00:13:56.676
that your content animates
along with this transition

303
00:13:57.096 --> 00:13:58.486
and you can do that on iOS

304
00:13:59.216 --> 00:14:02.856
with the new method
viewWillTransitionToSize

305
00:13:59.216 --> 00:14:02.856
with the new method
viewWillTransitionToSize

306
00:14:02.956 --> 00:14:04.186
with TransitionCoordinator.

307
00:14:04.916 --> 00:14:07.996
So, if your widget implements
this method it'll get called

308
00:14:07.996 --> 00:14:10.186
and pass in the
TransitionCoordinator

309
00:14:10.526 --> 00:14:12.136
and with this coordinator
you can call

310
00:14:12.136 --> 00:14:16.026
animateAlongsideTransition
passing in your block

311
00:14:16.026 --> 00:14:19.166
with your animations and
these will be run in parallel

312
00:14:19.166 --> 00:14:22.116
with the systems resize
animation, and then again,

313
00:14:22.116 --> 00:14:25.126
and then a completion to know
when everything's finished up.

314
00:14:25.756 --> 00:14:28.216
Now, there's a similar
story on OS X.

315
00:14:28.686 --> 00:14:31.486
In this case it's
viewWillTransitionToSize.

316
00:14:31.676 --> 00:14:34.306
Again, this will be called
and you can take advantage

317
00:14:34.306 --> 00:14:38.286
of NSAnimationContext to
run your own animation group

318
00:14:38.576 --> 00:14:41.026
and again pass in a
completionHandler so you know

319
00:14:41.026 --> 00:14:42.866
when everything is finished up.

320
00:14:44.566 --> 00:14:48.716
Now, new to iOS 8 is a
protocol, NCWidgetProviding.

321
00:14:49.336 --> 00:14:51.486
And one of the optional methods

322
00:14:51.486 --> 00:14:54.756
in this protocol is
widgetPerformUpdateWith

323
00:14:54.756 --> 00:14:55.476
CompletionHandler.

324
00:14:55.826 --> 00:14:58.886
And it's important to implement
this one, as it'll ensure

325
00:14:59.076 --> 00:15:01.346
that your widget's
content stays up to date.

326
00:14:59.076 --> 00:15:01.346
that your widget's
content stays up to date.

327
00:15:01.896 --> 00:15:04.206
So, if this is implemented
you will be passed a

328
00:15:04.206 --> 00:15:07.396
completionHandler, you want
to perform your own update

329
00:15:07.396 --> 00:15:10.726
and then determine what
is the appropriate result

330
00:15:10.936 --> 00:15:12.966
to pass back in that block.

331
00:15:13.306 --> 00:15:15.286
So, if you have some
new data go ahead

332
00:15:15.286 --> 00:15:18.826
and use NCUpdateResultNewData.

333
00:15:19.066 --> 00:15:22.156
If there's nothing new
go ahead and use no data.

334
00:15:22.156 --> 00:15:26.656
And if something went horribly
wrong, pass failed and we'll try

335
00:15:26.656 --> 00:15:28.126
to leave well enough alone.

336
00:15:28.126 --> 00:15:31.196
And then finally, be sure to
call the completionHandler

337
00:15:31.486 --> 00:15:36.376
with the result that you have.

338
00:15:36.476 --> 00:15:40.496
Alright, let's take
a look at this.

339
00:15:40.706 --> 00:15:42.136
So, some of you may remember

340
00:15:42.136 --> 00:15:44.676
from last year we
had a presentation

341
00:15:44.676 --> 00:15:48.876
and we showed off an awesome iOS
application for staying in touch

342
00:15:48.996 --> 00:15:52.076
with all of the clowns that
are in your clown network.

343
00:15:52.176 --> 00:15:52.986
We called it ClownTown.

344
00:15:54.106 --> 00:15:56.816
Well, we're going to take this
application a little bit further

345
00:15:56.816 --> 00:15:59.216
by adding a widget for
the Notification Center.

346
00:16:01.196 --> 00:16:03.776
Now, adding a widget
is as simple as opening

347
00:16:03.776 --> 00:16:07.876
up an existing application
project and adding a new target.

348
00:16:09.136 --> 00:16:13.066
For both iOS and OS X you'll see
there's an application extension

349
00:16:13.066 --> 00:16:16.236
section and you can just
select the Today Extension.

350
00:16:17.336 --> 00:16:19.646
But, I've actually
already started work on one

351
00:16:20.146 --> 00:16:23.646
so we're going to go right
into our view controller here,

352
00:16:24.016 --> 00:16:25.376
because widgets are
ViewControllers.

353
00:16:26.276 --> 00:16:28.326
And the first thing I'm
going to do is ensure

354
00:16:28.326 --> 00:16:30.126
that my widget has
the right height.

355
00:16:31.046 --> 00:16:35.756
So, I'm using an
Interface Builder storyboard

356
00:16:35.756 --> 00:16:36.686
for my interface.

357
00:16:36.996 --> 00:16:39.786
So, awakeFromNib is
a pretty handy place

358
00:16:39.966 --> 00:16:40.866
to take care of this.

359
00:16:41.166 --> 00:16:43.966
So, after calling
super and then setting

360
00:16:43.966 --> 00:16:46.486
up a little state
I'm going to go ahead

361
00:16:46.486 --> 00:16:48.056
and get the most recent posts.

362
00:16:49.156 --> 00:16:52.506
Once I've gotten those
I'll update my table view.

363
00:16:52.756 --> 00:16:53.936
This doesn't need
to be animated.

364
00:16:53.936 --> 00:16:55.026
We're just initializing here.

365
00:16:55.026 --> 00:16:57.906
And then the important
step is just making sure

366
00:16:58.006 --> 00:17:00.676
to set my preferred content
size to, in this case,

367
00:16:58.006 --> 00:17:00.676
to set my preferred content
size to, in this case,

368
00:17:00.676 --> 00:17:02.646
just the content size
of my table view.

369
00:17:04.076 --> 00:17:06.945
So, this will make sure that
we're initializing the state

370
00:17:06.945 --> 00:17:09.685
where we're showing a
single post in our widget,

371
00:17:09.826 --> 00:17:12.846
which is nice, but perhaps you
want to see a little bit more

372
00:17:12.846 --> 00:17:14.836
of what's going on in
your clown network.

373
00:17:15.556 --> 00:17:19.856
Well, how about we add a button
and an action for our button

374
00:17:19.856 --> 00:17:23.096
to show a little bit more.

375
00:17:23.185 --> 00:17:25.356
So, the first thing we'll
do is update our state

376
00:17:25.356 --> 00:17:28.956
and then calculate our
preferred height, which,

377
00:17:28.956 --> 00:17:31.126
since we're using a table view,
we want to count the number

378
00:17:31.126 --> 00:17:34.086
of rows and also make sure to
account for our footer view.

379
00:17:34.646 --> 00:17:38.136
Once we have our
preferred height we want

380
00:17:38.136 --> 00:17:40.226
to set our preferred
content size

381
00:17:40.226 --> 00:17:43.306
and then make sure we
tell ourselves that we had

382
00:17:43.306 --> 00:17:45.116
to do an update in the future.

383
00:17:45.336 --> 00:17:46.376
That'll come in handy later.

384
00:17:48.016 --> 00:17:50.836
So, again, we've set our
preferred content size

385
00:17:51.006 --> 00:17:53.186
so this will be sure
to animate the widget

386
00:17:53.186 --> 00:17:54.136
to the appropriate height.

387
00:17:54.866 --> 00:17:57.376
But, we want to make sure
that our content comes

388
00:17:57.376 --> 00:17:59.426
in in a really nice
animated fashion.

389
00:17:59.986 --> 00:18:03.446
And so to do that
we'll implement

390
00:17:59.986 --> 00:18:03.446
And so to do that
we'll implement

391
00:18:03.446 --> 00:18:06.336
viewWillTransitionToSize
withTransitionCoordinator.

392
00:18:06.926 --> 00:18:10.246
And so, if we have a
coordinator then we know

393
00:18:10.246 --> 00:18:11.706
that this is an animated
transition

394
00:18:12.766 --> 00:18:15.076
and so we'll call
animateAlongsideTransition

395
00:18:15.076 --> 00:18:15.636
completion.

396
00:18:16.226 --> 00:18:19.596
So, we'll make sure to
update our table view

397
00:18:19.596 --> 00:18:24.526
in an animated fashion and
in the completion be sure

398
00:18:24.526 --> 00:18:27.286
to update the title
of our button.

399
00:18:27.836 --> 00:18:30.356
Then, if for some reason we
didn't get a coordinator,

400
00:18:30.876 --> 00:18:33.046
then we'll just update our
table without animation

401
00:18:33.046 --> 00:18:35.566
and then update the button.

402
00:18:35.816 --> 00:18:40.976
So, this will make sure that
our adding of our rows comes

403
00:18:40.976 --> 00:18:44.646
in a nice animated way alongside
the system animation that's

404
00:18:44.646 --> 00:18:45.916
resizing our widget.

405
00:18:46.596 --> 00:18:49.276
Now, one more thing I want to
do before we give this a try

406
00:18:49.876 --> 00:18:54.866
and that is making sure that
our content stays up to date.

407
00:18:55.206 --> 00:18:57.816
So, I'm going to implement
the method widgetPerformUpdate

408
00:18:57.896 --> 00:18:58.836
withCompletionHandler.

409
00:19:00.236 --> 00:19:03.206
So, I'll start by getting the
recent, most recent posts,

410
00:19:03.206 --> 00:19:07.316
make sure I get any updates,
and then calculate the result.

411
00:19:07.816 --> 00:19:10.626
So, if we already know that
we needed to do an update

412
00:19:11.016 --> 00:19:14.316
or if we actually did get
some new content then we want

413
00:19:14.316 --> 00:19:16.306
to use NCUpdateResultNewData.

414
00:19:16.986 --> 00:19:21.596
Otherwise, we can just
go ahead and use No Data.

415
00:19:22.146 --> 00:19:25.826
So, if we actually did
get some new data we want

416
00:19:25.826 --> 00:19:26.766
to do a couple things.

417
00:19:27.096 --> 00:19:29.066
We'll definitely want to
update our table view to ensure

418
00:19:29.066 --> 00:19:31.136
that it's reflecting
our most recent content

419
00:19:31.686 --> 00:19:35.026
and then update our
preferred size to ensure

420
00:19:35.026 --> 00:19:36.196
that our widget is
the right height.

421
00:19:36.276 --> 00:19:40.536
And in either case we certainly
don't need any more updates

422
00:19:40.576 --> 00:19:43.636
and we'll call our
completionHandler

423
00:19:43.636 --> 00:19:44.436
with our result.

424
00:19:45.566 --> 00:19:48.766
Alright, I think we can go
ahead and give this a shot.

425
00:19:48.766 --> 00:19:51.906
So, I'm going to go ahead and
build and run for the simulator.

426
00:19:54.576 --> 00:20:02.286
I'll switch over to
the simulator now.

427
00:19:54.576 --> 00:20:02.286
I'll switch over to
the simulator now.

428
00:20:02.286 --> 00:20:05.396
Oh, and here we have our
ClownTown application.

429
00:20:05.936 --> 00:20:07.776
Well, I'm going to
home out of this

430
00:20:07.776 --> 00:20:09.396
and present the Notification
Center.

431
00:20:10.096 --> 00:20:15.626
Go to the edit menu and
our widget is not there.

432
00:20:16.866 --> 00:20:20.926
Excellent, let's give
that one more shot.

433
00:20:21.516 --> 00:20:25.666
[ Clicking Sounds ]

434
00:20:26.166 --> 00:20:27.786
Oh yes, there we go.

435
00:20:28.516 --> 00:20:32.596
[ Clicking Sounds ]

436
00:20:33.096 --> 00:20:34.486
There's our application.

437
00:20:35.176 --> 00:20:38.766
Bring down this, one
new widget available.

438
00:20:38.766 --> 00:20:38.976
There it is.

439
00:20:39.516 --> 00:20:46.446
[ Applause ]

440
00:20:46.946 --> 00:20:50.266
Alright, so hit done
and here's our widget.

441
00:20:51.146 --> 00:20:53.586
Well, we can see that Corbin
the Clown has some multicolored

442
00:20:53.586 --> 00:20:54.856
suspenders he's giving away,

443
00:20:55.396 --> 00:20:57.666
got to make sure to
take care of that.

444
00:20:57.666 --> 00:20:59.546
Alright, now here's
our More button.

445
00:20:59.846 --> 00:21:03.876
If we tap that, get some new
rows animate in nicely-wow,

446
00:20:59.846 --> 00:21:03.876
If we tap that, get some new
rows animate in nicely-wow,

447
00:21:03.876 --> 00:21:04.916
lots of weddings happening.

448
00:21:05.486 --> 00:21:10.346
Less collapses everything back
down in a nice animated fashion.

449
00:21:10.876 --> 00:21:11.846
This is looking pretty good.

450
00:21:12.726 --> 00:21:13.736
Well, I definitely
want to know more

451
00:21:13.736 --> 00:21:15.296
about these multicolored
suspenders, so I'm going

452
00:21:15.296 --> 00:21:18.326
to go ahead and-huh, okay.

453
00:21:19.406 --> 00:21:21.636
Well, we've definitely
seen-if you've looked

454
00:21:21.636 --> 00:21:24.416
at the system widgets it's
a pretty common pattern

455
00:21:24.416 --> 00:21:27.646
to tap something in the
widget and then transition

456
00:21:27.856 --> 00:21:30.596
to the application and
maybe see some more details

457
00:21:30.596 --> 00:21:31.616
or get some more content.

458
00:21:31.996 --> 00:21:33.126
Well, that's definitely
something

459
00:21:33.126 --> 00:21:34.316
that we're interested in doing.

460
00:21:34.766 --> 00:21:37.566
So, let's return to Xcode.

461
00:21:37.566 --> 00:21:39.766
I'm going to stop the debugger.

462
00:21:40.106 --> 00:21:43.276
And since I'm using a
table view I'll want

463
00:21:43.276 --> 00:21:46.846
to implement tableView
didSelectRowAtIndexPath.

464
00:21:47.776 --> 00:21:51.816
So, after we make sure we
have a valid post I'm going

465
00:21:51.816 --> 00:21:54.236
to take advantage of an object
called the extensionContext.

466
00:21:54.736 --> 00:21:57.806
Now, the extensionContext is an
object that you'll have access

467
00:21:57.906 --> 00:22:01.026
to in your widget or in any
extension that's running

468
00:21:57.906 --> 00:22:01.026
to in your widget or in any
extension that's running

469
00:22:01.026 --> 00:22:01.506
in a host.

470
00:22:02.226 --> 00:22:04.426
And it has-tells you
some interesting things

471
00:22:04.426 --> 00:22:06.296
about what's happening
in your current host.

472
00:22:06.296 --> 00:22:09.016
It also has a couple of
really interesting methods.

473
00:22:09.416 --> 00:22:10.866
In our case we're
going to take advantage

474
00:22:10.866 --> 00:22:12.846
of openURL completionHandler.

475
00:22:13.536 --> 00:22:15.926
Now, I've defined a custom
URL scheme that's shared

476
00:22:15.926 --> 00:22:17.426
between my widget
and my application

477
00:22:17.796 --> 00:22:20.516
so I can construct the
URL with this scheme

478
00:22:20.516 --> 00:22:23.606
and then add some identifying
information for my post.

479
00:22:24.016 --> 00:22:28.716
And then one final thing I'll
want to do is just make sure

480
00:22:28.716 --> 00:22:31.816
to deselect this row so it's not
selected the next time the user

481
00:22:31.816 --> 00:22:33.076
pulls down Notification Center.

482
00:22:33.986 --> 00:22:36.446
Alright, so let's build
and run this again.

483
00:22:36.996 --> 00:22:41.256
And here's our application.

484
00:22:42.286 --> 00:22:50.546
Let's present here, add this
back, and here's Corbin again.

485
00:22:50.846 --> 00:22:51.556
So, let's see.

486
00:22:51.556 --> 00:22:53.046
If I tap this, hopefully
I'll be able

487
00:22:53.046 --> 00:22:55.206
to get some more information
about those suspenders.

488
00:22:55.436 --> 00:22:56.016
There we go.

489
00:22:56.016 --> 00:22:57.516
It brings us right
to the application

490
00:22:57.726 --> 00:22:59.496
and get some more detail
and make sure we don't miss

491
00:22:59.496 --> 00:22:59.976
out on those suspenders.

492
00:23:00.516 --> 00:23:03.516
[ Background Sounds]

493
00:23:04.016 --> 00:23:10.000
[ Applause ]

494
00:23:11.466 --> 00:23:12.056
So, a few things

495
00:23:12.056 --> 00:23:14.856
to remember-widgets
are ViewControllers.

496
00:23:15.176 --> 00:23:17.256
So, everything you know about
ViewControllers and the API

497
00:23:17.256 --> 00:23:19.366
and the behavior is going
to serve you really well

498
00:23:19.576 --> 00:23:23.236
when you're constructing
your widget.

499
00:23:24.046 --> 00:23:26.516
Also, be sure your
widgets resume immediately.

500
00:23:26.516 --> 00:23:27.726
You don't want the
users bringing

501
00:23:27.726 --> 00:23:29.306
down Notification
Center and tapping

502
00:23:29.306 --> 00:23:30.576
and not having anything happen.

503
00:23:32.136 --> 00:23:35.236
Now, while the Notification
Center handles the layout not

504
00:23:35.236 --> 00:23:36.416
all widgets are created equal.

505
00:23:36.416 --> 00:23:38.956
You'll want different
heights, and you can so this

506
00:23:38.956 --> 00:23:41.996
with the preferred height
with either constraints

507
00:23:41.996 --> 00:23:45.536
and auto layout or explicitly
through preferredContentSize,

508
00:23:45.536 --> 00:23:47.146
and this is across
both platforms.

509
00:23:48.536 --> 00:23:51.256
Also, you want to be sure to-if
you animate your content along

510
00:23:51.256 --> 00:23:54.956
with the resize animation, this
again, we have APIs on both iOS

511
00:23:54.956 --> 00:23:59.086
and OS X to help you do this.

512
00:23:59.086 --> 00:24:02.176
And then be sure to handle
update requests to make sure

513
00:23:59.086 --> 00:24:02.176
And then be sure to handle
update requests to make sure

514
00:24:02.176 --> 00:24:06.366
that all of the content
looks up to date.

515
00:24:06.496 --> 00:24:08.126
Now, I'd like to invite
Guy up on stage to tell us

516
00:24:08.126 --> 00:24:08.886
about Share Extensions.

517
00:24:09.516 --> 00:24:15.216
[ Applause ]

518
00:24:15.716 --> 00:24:19.046
>> Hi. So, my name is Guy
Fullerton and I am an Engineer

519
00:24:19.046 --> 00:24:21.846
on the iOS Social and
Accounts teams, and I'm going

520
00:24:21.886 --> 00:24:22.986
to give you everything
you need to know

521
00:24:22.986 --> 00:24:24.246
to implement Share Extensions.

522
00:24:25.046 --> 00:24:29.506
So, Share Extensions are
a way to take the sharing

523
00:24:29.546 --> 00:24:33.966
and upload functionality in your
app and package it up and get

524
00:24:33.966 --> 00:24:37.396
that presented in the standard
activity and sharing affordances

525
00:24:37.396 --> 00:24:38.276
in the operating system.

526
00:24:39.216 --> 00:24:40.176
Actually, let's go back.

527
00:24:40.556 --> 00:24:45.816
So, like, the UI activity view
and the share menu in Mac OS X.

528
00:24:45.996 --> 00:24:48.946
So, this is particularly
useful for social network apps

529
00:24:49.386 --> 00:24:52.616
or for apps that like to
do video or photo hosting,

530
00:24:52.616 --> 00:24:55.686
for example, and
lots of other stuff.

531
00:24:56.646 --> 00:24:58.956
So, let's go through
a concrete example.

532
00:24:59.346 --> 00:25:01.206
Let's say I've got a
photo blogging application

533
00:24:59.346 --> 00:25:01.206
Let's say I've got a
photo blogging application

534
00:25:01.206 --> 00:25:04.366
that normally allows my user
to launch the app, pick a photo

535
00:25:04.406 --> 00:25:07.676
from the photos library,
annotate that a little bit,

536
00:25:07.676 --> 00:25:10.076
maybe make a-choose an
audience to present it to

537
00:25:10.076 --> 00:25:11.516
and then upload it
to a photo blog.

538
00:25:11.516 --> 00:25:14.476
But, wouldn't it be great if I
could do that upload directly

539
00:25:14.476 --> 00:25:15.616
from within photos app?

540
00:25:16.046 --> 00:25:18.106
Well, that's what a Share
Extension would let you do.

541
00:25:18.456 --> 00:25:23.296
So, let's say I'm in photos,
I select a photo that I like,

542
00:25:24.266 --> 00:25:26.576
tap the share button, up
pops the activity view

543
00:25:26.646 --> 00:25:30.846
and you can see my Photo
Blog application icon there

544
00:25:30.846 --> 00:25:31.616
in the activity view.

545
00:25:32.366 --> 00:25:35.786
Tap that and up slides a
compose sheet for Photo Blog,

546
00:25:36.276 --> 00:25:39.356
lets your user type some text to
annotate it, choose an audience,

547
00:25:39.526 --> 00:25:41.596
whether they want to limit
the exposure of that photo

548
00:25:41.596 --> 00:25:43.986
and whatnot, and then post it.

549
00:25:46.096 --> 00:25:47.666
So, we're going to
hammer this home a lot

550
00:25:47.666 --> 00:25:48.356
in the next couple days,

551
00:25:48.476 --> 00:25:51.366
but a lot of extensions are
basically just ViewControllers.

552
00:25:51.446 --> 00:25:52.616
That's where most of the work is

553
00:25:52.616 --> 00:25:54.496
and you're probably already
familiar with how to do that.

554
00:25:54.986 --> 00:25:57.656
But, Share Extensions have a
couple other concerns having

555
00:25:57.656 --> 00:25:58.556
to do with their packaging,

556
00:25:58.856 --> 00:26:00.816
specifically the
extensions Info.plist,

557
00:25:58.856 --> 00:26:00.816
specifically the
extensions Info.plist,

558
00:26:01.196 --> 00:26:05.366
so let's talk about that.

559
00:26:05.576 --> 00:26:08.106
So, normally when a Share
Extension shows up in one

560
00:26:08.106 --> 00:26:11.326
of these sharing affordances you
generally want that extension

561
00:26:11.326 --> 00:26:13.216
to have the app's name.

562
00:26:13.526 --> 00:26:15.306
That's going to be the thing
the user's most familiar

563
00:26:15.496 --> 00:26:17.826
with looking for when they
want to select that extension.

564
00:26:18.766 --> 00:26:21.796
But, some applications may have
multiple share affordances.

565
00:26:21.886 --> 00:26:23.446
The Photo Blog, for example,

566
00:26:23.446 --> 00:26:26.176
might want a basic
posting share functionality

567
00:26:26.446 --> 00:26:27.396
and maybe it wants a way

568
00:26:27.396 --> 00:26:30.006
to specifically set the blog's
header photo, for example.

569
00:26:30.866 --> 00:26:32.146
So, it's important to be able

570
00:26:32.206 --> 00:26:34.276
to customize your
Share Extension's name.

571
00:26:34.586 --> 00:26:36.116
And the way you do that is

572
00:26:36.116 --> 00:26:38.756
with CFBundleDisplayName
in your Info.plist.

573
00:26:39.226 --> 00:26:41.356
Just set that to the name
you want your Share Extension

574
00:26:41.356 --> 00:26:43.746
to show up with and the
sharing UI will display

575
00:26:43.746 --> 00:26:45.396
that name appropriately
for your extension.

576
00:26:46.106 --> 00:26:52.666
So, the next thing to talk
about are activation rules,

577
00:26:52.876 --> 00:26:55.146
and this is probably best
explained through an example.

578
00:26:55.786 --> 00:26:56.946
Let's say you're in photos

579
00:26:56.946 --> 00:27:00.076
and you have a set-a
trio of things selected.

580
00:26:56.946 --> 00:27:00.076
and you have a set-a
trio of things selected.

581
00:27:00.206 --> 00:27:01.676
You've got two photos
and a video

582
00:27:02.766 --> 00:27:04.266
and the user wants
to share that.

583
00:27:04.646 --> 00:27:08.726
So, they tap the share button,
up pops the UI activity view

584
00:27:08.986 --> 00:27:10.356
or the share menu on OS X

585
00:27:10.626 --> 00:27:14.096
and behind the scenes we've
created an extension context

586
00:27:14.356 --> 00:27:16.466
and that extension
context is the conduit

587
00:27:16.856 --> 00:27:18.926
that your extension
will use to pull data

588
00:27:19.116 --> 00:27:20.876
from the host application
into itself.

589
00:27:21.446 --> 00:27:22.596
So, this extension context

590
00:27:22.596 --> 00:27:24.946
for this particular scenario
has three things on it.

591
00:27:25.146 --> 00:27:27.396
It's got a reference to two of
those images, and of course,

592
00:27:27.396 --> 00:27:28.786
a reference to the
video as well.

593
00:27:28.786 --> 00:27:32.806
Now, the user might a bunch of
Share Extensions on their system

594
00:27:33.136 --> 00:27:34.566
and each of them
wants to get invoked

595
00:27:34.566 --> 00:27:35.936
in different kinds
of situations.

596
00:27:36.406 --> 00:27:39.346
And so the activation rules are
what lets the system make the

597
00:27:39.386 --> 00:27:41.776
right decision about
which extensions to put

598
00:27:41.776 --> 00:27:44.616
in the activity view or the
share menu based on the kind

599
00:27:44.616 --> 00:27:46.486
of data that's in the
extension context.

600
00:27:46.966 --> 00:27:52.166
So, there are two ways
for your extension

601
00:27:52.166 --> 00:27:53.776
to supply its activation rules.

602
00:27:54.366 --> 00:27:55.346
The first is a predicate.

603
00:27:55.926 --> 00:27:58.846
Now, every extension's
Info.plist has an

604
00:27:58.846 --> 00:27:59.906
NSExtension dictionary.

605
00:28:00.446 --> 00:28:02.526
And within that NSExtension
dictionary is

606
00:28:02.526 --> 00:28:03.776
the NSExtensionAttributes.

607
00:28:04.176 --> 00:28:06.386
The system uses those
attributes as part

608
00:28:06.386 --> 00:28:09.166
of its decisionmaking process
about which extensions to show.

609
00:28:09.496 --> 00:28:13.036
But, importantly for Share
Extensions the NSActivationRule

610
00:28:13.796 --> 00:28:16.786
within the NSExtensionAttributes
is what you need to set.

611
00:28:17.316 --> 00:28:19.656
If you set that to a
string that's a predicate,

612
00:28:20.426 --> 00:28:22.626
we will run that predicate
in the host app and figure

613
00:28:22.626 --> 00:28:24.336
out if your extension
is appropriate.

614
00:28:24.736 --> 00:28:27.136
And that predicate can be as
detailed as you need it be

615
00:28:27.306 --> 00:28:28.556
or it can be simple
if you want it

616
00:28:28.556 --> 00:28:30.416
to be-whatever you need
to get the job done.

617
00:28:30.776 --> 00:28:32.486
And this will serve the
needs of a lot of extensions.

618
00:28:34.656 --> 00:28:35.896
Other extensions, however,

619
00:28:36.396 --> 00:28:38.626
may have a little
more fine grain needs.

620
00:28:39.056 --> 00:28:40.786
What we found internally
is that a lot

621
00:28:40.786 --> 00:28:44.246
of our extensions just wanted to
know basic or just wanted to say

622
00:28:44.246 --> 00:28:46.686
that they support a
basic set of images

623
00:28:46.866 --> 00:28:48.946
or videos or some URLs or text.

624
00:28:49.566 --> 00:28:52.316
So, we offer these condensed
rules that allow extensions

625
00:28:52.376 --> 00:28:54.716
to specify just those
particular things without having

626
00:28:54.716 --> 00:28:55.876
to write a complex predicate.

627
00:28:56.336 --> 00:28:58.736
Now, ultimately these
condensed rules boil

628
00:28:58.736 --> 00:29:00.586
down to a predicate
behind the scenes,

629
00:28:58.736 --> 00:29:00.586
down to a predicate
behind the scenes,

630
00:29:00.586 --> 00:29:02.016
but you don't need
to worry about that.

631
00:29:02.506 --> 00:29:05.516
So, to specify condensed
rules you still put

632
00:29:05.516 --> 00:29:08.596
in an NSActivationRule inside
your NSExtensionAttributes.

633
00:29:08.906 --> 00:29:10.996
But, this time it's a dictionary
and there are a number

634
00:29:10.996 --> 00:29:12.326
of keys you can put
in the dictionary

635
00:29:12.326 --> 00:29:13.766
that indicate the
amount of that type

636
00:29:13.766 --> 00:29:16.046
of data your extension
is interested in.

637
00:29:16.726 --> 00:29:22.386
Now, the bottom of those two
activation rules both had to do

638
00:29:22.386 --> 00:29:24.846
with web content and
they're slightly different.

639
00:29:25.196 --> 00:29:29.206
We have a WebURL support and a
WebPage support and I want to go

640
00:29:29.206 --> 00:29:30.746
into the details about these.

641
00:29:31.376 --> 00:29:34.126
So, some Share Extensions
are all

642
00:29:34.126 --> 00:29:36.796
about taking the link you're
currently looking at in Safari

643
00:29:37.026 --> 00:29:39.056
and posting it someplace
else to some feed

644
00:29:39.096 --> 00:29:40.526
so somebody else can
click on that link

645
00:29:40.526 --> 00:29:41.446
and go see the webpage.

646
00:29:42.126 --> 00:29:44.676
For those kinds of Sharing
Extensions you want to specify

647
00:29:44.676 --> 00:29:46.416
that you support the
WebURLWithMaxCount.

648
00:29:47.846 --> 00:29:51.016
Now, another class of Sharing
Extensions are all about looking

649
00:29:51.016 --> 00:29:53.406
at the page that Safari's
currently got displayed

650
00:29:53.406 --> 00:29:55.506
and pulling data
out of that page.

651
00:29:55.846 --> 00:29:59.326
And for those Sharing Extensions
we have the WebPageWithMaxCount

652
00:30:00.036 --> 00:30:01.736
activation rule.

653
00:30:01.906 --> 00:30:04.626
Now, in order to support
the WebPageWithMaxCount your

654
00:30:04.626 --> 00:30:07.506
extension also needs to
supply a JavaScript that's run

655
00:30:07.736 --> 00:30:10.796
to determine what part of the
web content to actually stick

656
00:30:10.796 --> 00:30:11.886
on the extension context.

657
00:30:12.316 --> 00:30:14.046
I'm not going to go into
detail on that here,

658
00:30:14.256 --> 00:30:16.956
but in tomorrow's session
we dive into detail on that

659
00:30:16.956 --> 00:30:17.946
so please check that
session out.

660
00:30:18.046 --> 00:30:23.266
Hammering it home yet again,

661
00:30:23.266 --> 00:30:26.886
extensions are basically just
ViewControllers so it's a lot

662
00:30:26.886 --> 00:30:28.046
of familiar territory.

663
00:30:28.816 --> 00:30:30.726
Share Extensions
can be implemented

664
00:30:30.726 --> 00:30:32.476
with two kinds of
ViewControllers.

665
00:30:32.476 --> 00:30:34.716
We support them on
both iOS and OS X

666
00:30:35.416 --> 00:30:37.176
and you can subclass
UIViewController

667
00:30:37.176 --> 00:30:38.656
or NSViewController as you wish.

668
00:30:39.296 --> 00:30:43.526
You probably already
have ViewController code

669
00:30:43.526 --> 00:30:46.246
in your apps today that you can
repurpose for a Share Extension.

670
00:30:46.396 --> 00:30:48.666
Sure, maybe you want to
make some tweaks to it

671
00:30:48.666 --> 00:30:52.046
to conform better to maybe the
limited amount of space you have

672
00:30:52.046 --> 00:30:53.026
on the screen or whatnot.

673
00:30:53.296 --> 00:30:56.006
But you can take that existing
code, massage it a little bit

674
00:30:56.126 --> 00:30:58.266
and deploy it in an
extension, and you can get it

675
00:30:58.266 --> 00:31:00.796
to look exactly how you
want using your own branding

676
00:30:58.266 --> 00:31:00.796
to look exactly how you
want using your own branding

677
00:31:00.796 --> 00:31:02.106
or existing UI or whatever.

678
00:31:04.116 --> 00:31:06.656
Some extensions,
however, want to conform

679
00:31:06.656 --> 00:31:08.336
to the standard system
share sheet look.

680
00:31:08.866 --> 00:31:12.116
And for them we offer the
SLComposeService ViewController

681
00:31:12.306 --> 00:31:14.666
that you can subclass to
get, among other things,

682
00:31:14.766 --> 00:31:18.756
the standard look, the standard
animations, text editing,

683
00:31:18.976 --> 00:31:21.256
a indication of the
remaining characters based

684
00:31:21.256 --> 00:31:25.506
on the characters typed so far,
the post and cancel buttons,

685
00:31:25.506 --> 00:31:28.576
built-in previewing and
other limited amounts

686
00:31:29.376 --> 00:31:31.156
of customization.

687
00:31:31.466 --> 00:31:33.986
So, once you've implemented your
ViewController the next thing

688
00:31:33.986 --> 00:31:36.606
you need to be concerned about
is actually doing the upload

689
00:31:36.606 --> 00:31:39.186
or post to wherever you're
sharing this data to.

690
00:31:39.876 --> 00:31:42.656
The key here is that you
need to use NSURLSession

691
00:31:43.146 --> 00:31:46.636
with a background session
configuration, reason being,

692
00:31:46.916 --> 00:31:50.396
your extension does not live
beyond its presentation-at least

693
00:31:50.396 --> 00:31:52.766
not very long, and we'll talk
more about that tomorrow.

694
00:31:53.146 --> 00:31:54.046
So, you need to make sure

695
00:31:54.046 --> 00:31:57.116
that by using a background
NSURLSession you're allowing the

696
00:31:57.196 --> 00:31:59.126
system to handle
the upload for you.

697
00:32:00.666 --> 00:32:03.736
So, you create a background
NSURLSessionConfiguration,

698
00:32:04.136 --> 00:32:09.336
build an NSURLSession around
that, build an NSURLRequest

699
00:32:09.456 --> 00:32:12.926
that encompasses the items
that are being shared

700
00:32:13.596 --> 00:32:17.966
and create an upload task
wrapped around that NSURLRequest

701
00:32:18.356 --> 00:32:21.076
and then start that upload task.

702
00:32:21.266 --> 00:32:23.266
Once you've done that
the system is going

703
00:32:23.266 --> 00:32:24.326
to handle the upload for you.

704
00:32:25.166 --> 00:32:28.306
At that point your extension
needs to tell the host app

705
00:32:28.306 --> 00:32:30.706
that it's done and it can
tear down the presentation

706
00:32:30.706 --> 00:32:33.316
of your ViewController and you
do that by calling a method

707
00:32:33.316 --> 00:32:36.486
on the extension context called
completeRequestReturningItems

708
00:32:36.586 --> 00:32:37.336
completionHandler.

709
00:32:41.176 --> 00:32:43.966
If the user chooses
to cancel your sheet,

710
00:32:44.076 --> 00:32:45.806
or whatever you're
presentation happens to be,

711
00:32:46.036 --> 00:32:48.226
there's another extension
context method you need to call.

712
00:32:48.566 --> 00:32:50.326
This is called
cancelRequestWithError.

713
00:32:52.976 --> 00:32:54.436
So, Matt already
talked about performance

714
00:32:54.436 --> 00:32:58.486
with request-with respect to the
today widgets and I want to talk

715
00:32:58.486 --> 00:33:00.096
about that in a little
bit different way

716
00:32:58.486 --> 00:33:00.096
about that in a little
bit different way

717
00:33:00.096 --> 00:33:01.236
in terms of Share Extensions.

718
00:33:02.076 --> 00:33:04.936
Share Extensions often
have to grab a bunch

719
00:33:04.936 --> 00:33:06.336
of data from the host app.

720
00:33:06.336 --> 00:33:09.116
They might be dealing with 10
photos or an enormous video

721
00:33:09.576 --> 00:33:11.296
and it can be expensive
to be pulling

722
00:33:11.296 --> 00:33:14.176
that from the host app while
the presentation is happening.

723
00:33:14.676 --> 00:33:18.656
So, if you notice that your
presentation animation is

724
00:33:18.696 --> 00:33:21.536
stuttering you may need to
defer some of that heavy lifting

725
00:33:21.536 --> 00:33:23.226
until after the presentation
is completed.

726
00:33:23.956 --> 00:33:27.496
If you subclass UIViewController
or NSViewController,

727
00:33:27.716 --> 00:33:29.566
do whatever makes sense
for the rest of your code.

728
00:33:29.566 --> 00:33:32.116
Just defer that task so it's
not impacting the animation.

729
00:33:33.446 --> 00:33:36.886
If you subclass SLComposeService
ViewController, however,

730
00:33:36.886 --> 00:33:39.846
we will call your subclass'
presentationAnimationDidFinish

731
00:33:39.846 --> 00:33:42.756
method giving your
ViewController a good hook

732
00:33:43.066 --> 00:33:44.606
with which to start
that heavy lifting.

733
00:33:44.606 --> 00:33:49.516
So, let's take a look
at the Photo Blog app

734
00:33:49.516 --> 00:33:51.806
and the Photo Blog Share
Extension real quick.

735
00:33:57.076 --> 00:34:00.036
Before going into
the code I'm going

736
00:33:57.076 --> 00:34:00.036
Before going into
the code I'm going

737
00:34:00.036 --> 00:34:03.356
to show you the Share
Extension running so some

738
00:34:03.356 --> 00:34:04.816
of the code will make a
little bit more sense.

739
00:34:05.126 --> 00:34:06.626
So, we're going to go into
photos just like that set

740
00:34:06.626 --> 00:34:07.686
of screenshots I showed.

741
00:34:08.496 --> 00:34:12.406
Let's pick a different one.

742
00:34:14.315 --> 00:34:15.846
Puppies-we'll do just one.

743
00:34:15.926 --> 00:34:17.196
Oh, let's not do that.

744
00:34:18.436 --> 00:34:18.936
There we go.

745
00:34:19.866 --> 00:34:21.525
Click on the Photo
Blog Share Extension

746
00:34:21.525 --> 00:34:23.116
and up comes the compose view.

747
00:34:23.116 --> 00:34:26.616
So, this is clearly using the
standard system compose sheet

748
00:34:26.616 --> 00:34:28.996
look derived from
SLComposeService ViewController,

749
00:34:29.376 --> 00:34:30.815
and it can do a couple
different things.

750
00:34:30.815 --> 00:34:35.386
You can type some text
and as I'm typing text,

751
00:34:35.536 --> 00:34:37.386
it's kind of hard to see, but
there's a little indicator

752
00:34:37.386 --> 00:34:38.516
of the remaining characters,

753
00:34:38.516 --> 00:34:41.266
and once I type too much
text it goes negative

754
00:34:41.266 --> 00:34:42.516
and the Post button disables.

755
00:34:42.966 --> 00:34:44.966
This is all happening
more or less for free.

756
00:34:44.966 --> 00:34:46.525
You'll see some details
when we look at the code.

757
00:34:47.246 --> 00:34:50.176
The image preview there,
it happens for free,

758
00:34:50.315 --> 00:34:51.656
the base class will
do that for you.

759
00:34:52.275 --> 00:34:56.946
We also, this particular
subclass adds an audience picker

760
00:34:57.336 --> 00:35:00.056
so this Photo Blog supports
the notion of posting publicly

761
00:34:57.336 --> 00:35:00.056
so this Photo Blog supports
the notion of posting publicly

762
00:35:00.336 --> 00:35:02.856
or only to my friends
or completely privately.

763
00:35:02.856 --> 00:35:04.446
And you can choose a
different audience.

764
00:35:04.976 --> 00:35:06.706
Let's delete some
text here so we're

765
00:35:06.706 --> 00:35:11.306
within the allowed
range, then we can post.

766
00:35:11.966 --> 00:35:15.526
So, let's go back into Xcode
and see how we implemented that.

767
00:35:17.216 --> 00:35:20.436
So, the first thing I did-and
it's hard to see, sorry,

768
00:35:20.526 --> 00:35:22.746
but this is as good as I
can do with the Info.plist.

769
00:35:22.746 --> 00:35:24.816
The first thing I did was
set the bundle display name

770
00:35:24.816 --> 00:35:28.196
for my extension to
Photo Blog and then I set

771
00:35:28.196 --> 00:35:29.976
up an activation rule.

772
00:35:30.236 --> 00:35:33.576
This particular activation rule
says my Share Extension only

773
00:35:33.576 --> 00:35:34.266
wants one image.

774
00:35:34.406 --> 00:35:35.406
That's all you need to give me.

775
00:35:35.406 --> 00:35:36.536
I don't care about
anything else.

776
00:35:36.646 --> 00:35:38.556
This is one I'm relevant.

777
00:35:39.266 --> 00:35:42.256
And now my ViewController.

778
00:35:42.256 --> 00:35:45.046
So, my ViewController subclasses

779
00:35:45.046 --> 00:35:47.216
from SLComposeService
ViewController.

780
00:35:48.076 --> 00:35:49.406
Now, let's go look at
the implementation.

781
00:35:49.726 --> 00:35:52.126
But, before I start adding
code to this, I want to talk

782
00:35:52.126 --> 00:35:54.346
about a couple artificial
constraints for this demo app.

783
00:35:54.696 --> 00:35:58.096
So, for purposes of showing off
the remaining characters count

784
00:35:58.406 --> 00:36:01.296
and generally updating the
Post button, I'm going to say

785
00:35:58.406 --> 00:36:01.296
and generally updating the
Post button, I'm going to say

786
00:36:01.296 --> 00:36:04.216
that my photo blog has two
constraints associated with it.

787
00:36:04.566 --> 00:36:06.946
The first is that no photo
can be posted with more

788
00:36:06.946 --> 00:36:10.136
than 20 characters alongside
the photo, because it's meant

789
00:36:10.136 --> 00:36:11.596
to just let you see the photo

790
00:36:11.596 --> 00:36:12.866
and not get distracted
by the text.

791
00:36:13.316 --> 00:36:15.706
And also it's supposed to
be a lightweight photo blog.

792
00:36:15.706 --> 00:36:18.086
It doesn't want to spend a ton
of storage space on the photos.

793
00:36:18.326 --> 00:36:21.176
So, no photo that you post can
be bigger than one megabyte.

794
00:36:22.356 --> 00:36:24.806
And this last constraint
is particularly important,

795
00:36:24.876 --> 00:36:28.446
because when you pull data from
the host application you're not

796
00:36:28.446 --> 00:36:30.056
in control of the data's size.

797
00:36:30.596 --> 00:36:31.716
If you've got a photo coming

798
00:36:31.716 --> 00:36:33.556
from photos app it
might be quite large

799
00:36:33.656 --> 00:36:35.816
and therefore it's your
extension's responsibility

800
00:36:35.816 --> 00:36:37.696
to down sample that
image data to fit

801
00:36:37.696 --> 00:36:38.926
within your size constraints.

802
00:36:41.416 --> 00:36:43.886
So, let's start implementing
the ViewController.

803
00:36:44.896 --> 00:36:47.386
So, I'm going to add an image
data property to my subclass.

804
00:36:47.666 --> 00:36:49.916
This is going to be the
fully down sampled image data

805
00:36:49.916 --> 00:36:52.696
that I'm going to ultimately
upload to the photo blog.

806
00:36:54.196 --> 00:36:55.926
I'm going to keep
track of the audience

807
00:36:56.276 --> 00:36:58.546
that the user wants
to post it to.

808
00:36:59.726 --> 00:37:01.416
And I'm going to keep
a configuration item

809
00:36:59.726 --> 00:37:01.416
And I'm going to keep
a configuration item

810
00:37:01.416 --> 00:37:03.396
that I'm going to talk
about a little bit later on.

811
00:37:03.756 --> 00:37:06.616
Basically, this represents
that AudiencePicker table cell

812
00:37:06.616 --> 00:37:07.936
down in the bottom
of the compose view.

813
00:37:13.426 --> 00:37:16.276
Alright, so in viewDidLoad
we're going

814
00:37:16.276 --> 00:37:18.026
to initialize the audience.

815
00:37:18.166 --> 00:37:19.806
We already have a
utility routine in our app

816
00:37:19.956 --> 00:37:22.066
that knows how to fetch the
right defaultAudience based

817
00:37:22.066 --> 00:37:22.916
on a number of factors.

818
00:37:22.916 --> 00:37:27.226
So, we're just going to
reuse that code from the app.

819
00:37:27.866 --> 00:37:30.176
Now, those constraints
I was talking about,

820
00:37:30.176 --> 00:37:32.496
the 20-character limit
and the down sampling,

821
00:37:32.776 --> 00:37:36.316
both need to affect whether
the Post button is enabled.

822
00:37:36.906 --> 00:37:38.166
So, if the user has typed more

823
00:37:38.166 --> 00:37:41.336
than 20 characters we don't
want them to be able to post.

824
00:37:41.776 --> 00:37:43.876
If the down sample is
not finished, likewise,

825
00:37:44.076 --> 00:37:45.646
we don't want them
to be able to post,

826
00:37:45.906 --> 00:37:47.666
so we need to make sure
the Post button is disabled

827
00:37:47.666 --> 00:37:48.386
in those cases.

828
00:37:49.116 --> 00:37:52.016
Also, since we're using the
remaining character count

829
00:37:52.016 --> 00:37:54.786
indicator we need to make sure
that's up to date at all times.

830
00:37:55.126 --> 00:37:57.916
The right place to do that
is the isContentValid method.

831
00:37:58.566 --> 00:38:01.106
The SLComposeService
ViewController calls your

832
00:37:58.566 --> 00:38:01.106
The SLComposeService
ViewController calls your

833
00:38:01.106 --> 00:38:03.756
subclass' isContentValid
method whenever it needs

834
00:38:03.756 --> 00:38:05.346
to update the status
of the Post button

835
00:38:05.346 --> 00:38:07.016
so it gives you your
chance to do those things.

836
00:38:07.436 --> 00:38:09.926
So, let's implement
some of that.

837
00:38:10.356 --> 00:38:12.106
The first thing I'm going
to do is look at the number

838
00:38:12.106 --> 00:38:14.586
of characters that the
user has typed so far.

839
00:38:15.056 --> 00:38:18.216
SLComposeService ViewController
has a content text property,

840
00:38:18.456 --> 00:38:20.466
which is the text that
the user has typed so far,

841
00:38:20.466 --> 00:38:23.156
so we grab its length.

842
00:38:23.836 --> 00:38:26.176
Next, we calculate the number
of characters remaining based

843
00:38:26.176 --> 00:38:27.676
on our Photo Blog's constraints.

844
00:38:30.206 --> 00:38:32.766
Then we set SLComposeService
ViewController's

845
00:38:32.886 --> 00:38:34.056
charactersRemaining property.

846
00:38:34.586 --> 00:38:36.576
This is an NS number
and by setting

847
00:38:36.576 --> 00:38:40.576
that to an NS number the base
class automatically updates the

848
00:38:40.576 --> 00:38:44.006
text on the compose sheet
to-sorry, to reflect the number

849
00:38:44.006 --> 00:38:44.976
of characters you
still have left.

850
00:38:54.136 --> 00:38:54.946
And I just add it here.

851
00:38:54.946 --> 00:38:57.146
So, next we are going to say

852
00:38:57.146 --> 00:38:58.536
that the Post button
should be enabled

853
00:38:58.536 --> 00:39:01.076
if the user has not
typed too much text

854
00:38:58.536 --> 00:39:01.076
if the user has not
typed too much text

855
00:39:01.446 --> 00:39:03.936
and if we already have our
fully down-sampled image data.

856
00:39:05.336 --> 00:39:07.506
Otherwise, don't
enable the Post button.

857
00:39:08.436 --> 00:39:11.046
Now, we got to get our fully
down-sampled image data and,

858
00:39:11.046 --> 00:39:13.326
like I said, this can be a
potentially expensive operation,

859
00:39:13.326 --> 00:39:14.566
because we don't know
how much data is going

860
00:39:14.566 --> 00:39:15.646
to coming over from the host.

861
00:39:16.046 --> 00:39:18.956
So, we want to defer that to
presentationAnimationDidFinish.

862
00:39:19.336 --> 00:39:22.546
This method is called by
sub-called on subclasses

863
00:39:22.546 --> 00:39:24.156
of SLComposeService
ViewController

864
00:39:24.516 --> 00:39:26.756
after the compose sheet
has slid up onscreen.

865
00:39:28.876 --> 00:39:31.036
So, the first thing
we're going to do is look

866
00:39:31.036 --> 00:39:32.506
at the extension context again

867
00:39:32.506 --> 00:39:34.196
and in particular look
at the input items.

868
00:39:34.726 --> 00:39:35.716
Now, I'm going to go off

869
00:39:35.716 --> 00:39:38.396
in the weeds a little bit
here, but bear with me.

870
00:39:38.396 --> 00:39:41.286
The extension context can have
multiple input items on it.

871
00:39:41.866 --> 00:39:47.346
Each input item represents
a separate upload blob.

872
00:39:48.256 --> 00:39:50.796
For most Share Extensions
you only care

873
00:39:50.796 --> 00:39:52.626
about doing one upload
at a time.

874
00:39:53.066 --> 00:39:55.626
But, you might imagine a
particular Sharing Extension

875
00:39:55.626 --> 00:39:59.396
that's allowed to do five posts
to one social network at one go.

876
00:39:59.926 --> 00:40:00.826
So, for that kind

877
00:39:59.926 --> 00:40:00.826
So, for that kind

878
00:40:00.826 --> 00:40:02.906
of hypothetical Share Extension
you're going to need to look

879
00:40:02.906 --> 00:40:03.886
at all the input items.

880
00:40:04.646 --> 00:40:06.816
But, since this Photo
Blog extension only cares

881
00:40:06.816 --> 00:40:09.516
about posting one photo
at a time with one post

882
00:40:09.516 --> 00:40:13.326
at a time we just look
at the first input item.

883
00:40:14.876 --> 00:40:17.406
Next, we're going to iterate
over all of the attachments

884
00:40:17.736 --> 00:40:20.216
on that extension item.

885
00:40:20.216 --> 00:40:22.846
Each extension-each
post request could come

886
00:40:22.846 --> 00:40:24.136
with multiple pieces of data.

887
00:40:24.206 --> 00:40:26.846
Like, you could go into
photos and select two photos

888
00:40:26.936 --> 00:40:28.176
and choose to share that.

889
00:40:28.536 --> 00:40:30.356
You would have an
extension context

890
00:40:30.356 --> 00:40:32.746
with one item with
two attachments.

891
00:40:33.356 --> 00:40:34.866
So, we're going to iterate
over the attachments

892
00:40:34.866 --> 00:40:37.526
and find the photo
that we care about.

893
00:40:39.056 --> 00:40:42.026
So, what we do is we iterate
over all the item providers

894
00:40:42.026 --> 00:40:42.856
in the extension item

895
00:40:43.506 --> 00:40:46.206
and we call hasItemConforming
ToTypeIdentifier

896
00:40:46.356 --> 00:40:48.036
passing kUTTypeImage.

897
00:40:48.406 --> 00:40:51.126
This says, 'Hey, item provider,
do you have an image in you?'

898
00:40:51.676 --> 00:40:54.266
And if we find out
that the answer is yes,

899
00:40:55.136 --> 00:40:56.226
we are going to do some work.

900
00:40:56.226 --> 00:40:58.766
We're going to need to pull that
particular item provider's data

901
00:40:58.766 --> 00:41:01.346
and we're going to want to do
that on a background cue so as

902
00:40:58.766 --> 00:41:01.346
and we're going to want to do
that on a background cue so as

903
00:41:01.376 --> 00:41:03.696
to not disrupt the main thread.

904
00:41:04.186 --> 00:41:05.686
And since we've found
the one image

905
00:41:05.726 --> 00:41:07.546
that we support we can
stop iterating now.

906
00:41:08.796 --> 00:41:12.406
So, the actual work of
pulling the data happens

907
00:41:12.896 --> 00:41:15.736
with the
LoadItemForTypeIdentifier

908
00:41:16.096 --> 00:41:18.726
options completionHandler
method, again,

909
00:41:18.996 --> 00:41:22.086
saying 'Give me some
UTTypeImage, please.'

910
00:41:22.506 --> 00:41:24.146
And the completionHandler

911
00:41:24.146 --> 00:41:26.706
that you pass actually has
a flexible first parameter

912
00:41:26.706 --> 00:41:28.306
that indicates the way you would

913
00:41:28.306 --> 00:41:30.216
like the item provider
to supply your data.

914
00:41:31.046 --> 00:41:34.106
In this case, my Share Extension
is interested in NSData,

915
00:41:34.106 --> 00:41:36.146
so that's what my
completionHandler's

916
00:41:36.146 --> 00:41:37.116
prototype is.

917
00:41:37.536 --> 00:41:41.096
And when I get the-scroll
up for me,

918
00:41:41.696 --> 00:41:44.076
let's see if I can make
this a little wider,

919
00:41:44.756 --> 00:41:48.906
not wrap so much It's
important to note

920
00:41:49.026 --> 00:41:53.196
that loadItemForTypeIdentifier
completes on an arbitrary cue

921
00:41:53.346 --> 00:41:55.256
and since we're going to do
view controller work I'm going

922
00:41:55.256 --> 00:41:56.966
to need to dispatch
async onto the main cue

923
00:41:56.966 --> 00:41:57.766
to actually do that work.

924
00:41:59.436 --> 00:42:00.816
Then I'm going to call a method

925
00:41:59.436 --> 00:42:00.816
Then I'm going to call a method

926
00:42:00.816 --> 00:42:03.086
on my subclass called
imageDataLoadDidFinish

927
00:42:03.086 --> 00:42:04.046
and pass it that data.

928
00:42:04.596 --> 00:42:05.576
So let's go implement that.

929
00:42:16.046 --> 00:42:18.736
So, my application already
has Downsampling code, right?

930
00:42:18.736 --> 00:42:20.656
And it's what it would
in the normal case

931
00:42:20.656 --> 00:42:21.736
in the normal application case.

932
00:42:21.736 --> 00:42:23.996
So, I'm just going to
repurpose that and ask it

933
00:42:23.996 --> 00:42:26.566
to downsample the image
data, passing my map size.

934
00:42:27.026 --> 00:42:29.316
And that's going to complete
on an arbitrary queue,

935
00:42:29.316 --> 00:42:32.136
so once that completes I'm going
to do view controller work,

936
00:42:32.136 --> 00:42:34.016
so I dispatch async
onto the main queue

937
00:42:35.016 --> 00:42:37.356
and then I remember the
downsampled imageData.

938
00:42:37.696 --> 00:42:40.536
Now that I've got that image
data, I need that Post button

939
00:42:40.536 --> 00:42:43.096
to get updated, and the way
I do that is call a method

940
00:42:43.096 --> 00:42:45.456
on SL composer ViewController
called validateContent.

941
00:42:46.416 --> 00:42:50.196
ValidateContent calls your
subclasses IsContentValid method

942
00:42:50.196 --> 00:42:52.996
and gives it another chance
to determine whether or not

943
00:42:52.996 --> 00:42:53.976
to enable the Post button.

944
00:43:02.166 --> 00:43:05.776
Okay, so, when the user
taps the Post button

945
00:43:05.956 --> 00:43:09.356
on an SL composer
ViewController subclass

946
00:43:09.356 --> 00:43:11.716
that subclasses didSelectPost
method.

947
00:43:12.736 --> 00:43:14.036
So let's react to that.

948
00:43:15.396 --> 00:43:17.496
The first thing we're going
to do is perform the upload

949
00:43:18.386 --> 00:43:20.426
and after that we
need to tell the host

950
00:43:20.706 --> 00:43:21.776
that our extension is done

951
00:43:21.906 --> 00:43:23.226
and you can dismiss
our ViewController.

952
00:43:23.226 --> 00:43:24.976
And, again, we do that
by calling a method

953
00:43:24.976 --> 00:43:27.616
on the extension context called
completeRequestReturningItems

954
00:43:27.796 --> 00:43:28.506
completionHandler.

955
00:43:29.576 --> 00:43:31.056
So let's look at
the upload again.

956
00:43:31.276 --> 00:43:33.276
So the upload is going
to be very similar

957
00:43:33.276 --> 00:43:35.276
to what I already showed
on the slides, but let's go

958
00:43:35.276 --> 00:43:37.676
through it again because it's
very important for extensions

959
00:43:37.796 --> 00:43:39.066
because they have
a short lifespan.

960
00:43:39.656 --> 00:43:41.616
The first thing we're going

961
00:43:41.616 --> 00:43:45.646
to do is create a background
NSURLSessionConfiguration,

962
00:43:47.796 --> 00:43:51.016
create a NSURLSession
from that configuration

963
00:43:52.726 --> 00:43:55.306
and create a request
representing the upload.

964
00:43:55.536 --> 00:43:58.136
Now, again, this is code
we stole, well, not stole,

965
00:43:58.136 --> 00:43:59.996
but code we borrowed
from the main application

966
00:44:00.336 --> 00:44:03.246
that builds an NSURLRequest
from the photo data

967
00:44:03.576 --> 00:44:06.406
from the content text that the
user has typed and the audience.

968
00:44:08.026 --> 00:44:09.916
Build an UploadTask
around that request

969
00:44:11.436 --> 00:44:16.566
and then start that upload.

970
00:44:17.086 --> 00:44:20.806
Now, in this particular
case-well, let's see,

971
00:44:20.806 --> 00:44:21.646
let's step back for a second.

972
00:44:21.876 --> 00:44:23.886
So, we implemented
didSelectPost method.

973
00:44:24.006 --> 00:44:27.006
SL compose service
ViewController will also call a

974
00:44:27.006 --> 00:44:30.036
DidSelect cancel
method on your subclass,

975
00:44:30.366 --> 00:44:33.616
but in this particular case
we don't need to implement it.

976
00:44:33.616 --> 00:44:35.886
The default implementation of
didSelectCancel will go ahead

977
00:44:35.886 --> 00:44:38.216
and cancel the extension
context for you automatically.

978
00:44:38.696 --> 00:44:41.436
But if your extension needs to
do some cleanup work in response

979
00:44:41.436 --> 00:44:43.846
to a cancel, you can
override didSelectCancel.

980
00:44:45.436 --> 00:44:48.976
So that's enough to handle the
basic uploading and interaction

981
00:44:48.976 --> 00:44:50.816
with the sheet, but
at the bottom

982
00:44:50.816 --> 00:44:53.116
of the sheet-remember there was
that little audiencePicker cell.

983
00:44:54.016 --> 00:44:55.126
I'll show you how
to implement that.

984
00:44:56.746 --> 00:44:59.936
The base class will call your
subclasses configuration items

985
00:44:59.936 --> 00:45:03.406
method as a way to give your
subclass a chance to supply

986
00:44:59.936 --> 00:45:03.406
method as a way to give your
subclass a chance to supply

987
00:45:03.446 --> 00:45:05.286
that set of table cells to put

988
00:45:05.286 --> 00:45:06.966
on the bottom of
the share sheet.

989
00:45:07.346 --> 00:45:09.286
So, we're going to implement
the configurationItems method.

990
00:45:09.816 --> 00:45:12.036
It's our subclass'
responsibility

991
00:45:12.116 --> 00:45:13.616
to return an array

992
00:45:13.836 --> 00:45:15.996
of SLComposeSheet
ConfigurationItems,

993
00:45:16.406 --> 00:45:18.396
one for each configuration
item in the table.

994
00:45:18.916 --> 00:45:21.636
Now, the example here only
has one configuration item,

995
00:45:21.846 --> 00:45:24.816
but you might imagine a share
extension that needs multiples.

996
00:45:24.816 --> 00:45:27.906
In fact, some of the built-in
system extensions have multiple

997
00:45:28.096 --> 00:45:29.436
configuration items
on the bottom.

998
00:45:30.266 --> 00:45:33.656
So, we instantiate one
and we set its title.

999
00:45:33.936 --> 00:45:36.216
The title is what's displayed on
the left side of the table cell.

1000
00:45:37.246 --> 00:45:38.996
Then we set its value,
which is the audience,

1001
00:45:39.076 --> 00:45:40.606
displayed on the right
side of the table cell.

1002
00:45:41.156 --> 00:45:44.426
And then we need to react to
when that table cell is tapped.

1003
00:45:44.966 --> 00:45:47.086
And the way we do that is
by setting a tapHandler

1004
00:45:47.116 --> 00:45:48.156
on the configuration item.

1005
00:45:49.096 --> 00:45:52.246
Now, I'm going to avoid a retain
cycle between my view controller

1006
00:45:52.286 --> 00:45:54.636
and the configuration item
by capturing a weak reference

1007
00:45:54.636 --> 00:45:56.646
to myself inside the tapHandler.

1008
00:45:57.436 --> 00:45:59.636
And then what we do is we
grab a strong reference and do

1009
00:45:59.636 --> 00:46:00.566
that weak strong dance.

1010
00:45:59.636 --> 00:46:00.566
that weak strong dance.

1011
00:46:00.776 --> 00:46:03.846
And if our view controller
is still around.

1012
00:46:04.006 --> 00:46:05.956
At that point we know the
table cell has been tapped.

1013
00:46:06.276 --> 00:46:08.196
We want to show that
audiencePicker UI.

1014
00:46:08.766 --> 00:46:11.396
So we've already implemented
inAudienceViewPickerController.

1015
00:46:11.506 --> 00:46:13.876
It's just a basic table
view controller that happens

1016
00:46:13.876 --> 00:46:15.746
to be audience specific
for this particular use.

1017
00:46:16.636 --> 00:46:19.456
So we instantiate that.

1018
00:46:19.976 --> 00:46:21.806
We set ourselves
to be its delegate.

1019
00:46:22.126 --> 00:46:23.676
Our custom
AudiencePickerViewController

1020
00:46:23.676 --> 00:46:25.556
class has a delegate
method that's called

1021
00:46:25.856 --> 00:46:29.056
when the user taps an audience,
so that we get to react

1022
00:46:29.136 --> 00:46:30.356
to the specific audience chosen.

1023
00:46:32.286 --> 00:46:34.216
We're going to tell it what the
currently selected audience is

1024
00:46:34.216 --> 00:46:34.866
so it can check the right thing.

1025
00:46:41.046 --> 00:46:42.216
And then we're going
to call a method

1026
00:46:42.216 --> 00:46:43.456
on
SLComposeServiceViewController

1027
00:46:43.456 --> 00:46:45.566
telling it to please animate
this other ViewController

1028
00:46:45.566 --> 00:46:48.196
onscreen and that method is
pushConfigurationViewController.

1029
00:46:48.646 --> 00:46:51.266
So, this slides your
new view controller

1030
00:46:51.266 --> 00:46:53.276
in a navigation controller-like
style

1031
00:46:53.276 --> 00:46:54.786
and it resizes the
composed sheet

1032
00:46:54.876 --> 00:46:57.496
to fit your view
controller's desired size.

1033
00:46:58.186 --> 00:47:02.926
And then, finally, now
that we've implemented

1034
00:46:58.186 --> 00:47:02.926
And then, finally, now
that we've implemented

1035
00:47:02.926 --> 00:47:06.166
that we can return our
single configuration item

1036
00:47:06.236 --> 00:47:07.926
from configuration items.

1037
00:47:09.636 --> 00:47:12.596
All right, so here is our
delegate method that is called

1038
00:47:12.596 --> 00:47:14.226
when the
audiencePickerViewController

1039
00:47:14.746 --> 00:47:15.896
sees the user tap a cell.

1040
00:47:16.326 --> 00:47:17.246
We need to react to that.

1041
00:47:17.336 --> 00:47:20.556
We're going to remember
the selected audience.

1042
00:47:22.306 --> 00:47:23.736
We're going to tell
our configuration item

1043
00:47:23.736 --> 00:47:24.906
that hey, it's got a new value.

1044
00:47:24.906 --> 00:47:27.726
And by doing that the table cell
is updated automatically showing

1045
00:47:27.726 --> 00:47:28.316
the new audience.

1046
00:47:29.026 --> 00:47:32.476
And then finally we
want to auto dismiss

1047
00:47:32.686 --> 00:47:34.636
that
audiencePickerViewController.

1048
00:47:34.796 --> 00:47:36.136
You don't have to do this.

1049
00:47:36.186 --> 00:47:39.316
It really depends on what your
configuration item's needs are.

1050
00:47:39.436 --> 00:47:41.506
But generally, for this kind
of simple audiencePicker,

1051
00:47:41.506 --> 00:47:42.876
once you tap a cell you want it

1052
00:47:42.916 --> 00:47:45.626
to swipe away revealing
the main compose sheet.

1053
00:47:45.936 --> 00:47:47.476
So this is just some
boiler-plate code

1054
00:47:47.526 --> 00:47:49.416
for executing code
after a short delay.

1055
00:47:49.936 --> 00:47:53.136
And then we call
popConfigurationViewController.

1056
00:47:53.526 --> 00:47:55.216
So, in a navigation
controller-like way,

1057
00:47:55.216 --> 00:47:57.606
this says remove the topmost
view controller from the stack,

1058
00:47:57.926 --> 00:47:59.366
and since we only had one there,

1059
00:47:59.566 --> 00:48:02.306
it restores the default
share sheet appearance.

1060
00:47:59.566 --> 00:48:02.306
it restores the default
share sheet appearance.

1061
00:48:02.906 --> 00:48:04.906
So, that is it.

1062
00:48:04.906 --> 00:48:07.166
Let's go ahead and
rerun this guy

1063
00:48:07.166 --> 00:48:07.976
and take a look at
it one more time.

1064
00:48:18.056 --> 00:48:18.426
Photo Blog app.

1065
00:48:18.426 --> 00:48:22.376
Let's home out and
go back to photos.

1066
00:48:23.496 --> 00:48:24.436
There's our photo.

1067
00:48:24.476 --> 00:48:27.876
We can bring up the photo blog
extension and there it is.

1068
00:48:27.936 --> 00:48:36.456
We can choose an audience,
make our comment and post away.

1069
00:48:38.316 --> 00:48:40.316
So, that's how you make a
share extension for iOS.

1070
00:48:41.056 --> 00:48:44.466
But if you are looking at that
Xcode project closely you can

1071
00:48:44.466 --> 00:48:46.866
see that there's a couple
OS X targets in there.

1072
00:48:47.316 --> 00:48:51.406
Now, it turns out
that share-yeah,

1073
00:48:51.406 --> 00:48:54.086
let's hide some more
stuff-that share extensions are

1074
00:48:54.086 --> 00:48:54.866
very portable.

1075
00:48:54.866 --> 00:48:58.106
It was pretty easy for me to
take my iOS share extension

1076
00:48:58.346 --> 00:49:01.316
and massage the code
a little bit for OS X

1077
00:48:58.346 --> 00:49:01.316
and massage the code
a little bit for OS X

1078
00:49:01.316 --> 00:49:03.546
and so that is working here.

1079
00:49:03.606 --> 00:49:09.376
I can go to some photos and
select a photo, preview it,

1080
00:49:09.506 --> 00:49:12.646
bring up the share menu.

1081
00:49:12.646 --> 00:49:14.116
Hey, there's my photo blog item

1082
00:49:15.396 --> 00:49:17.876
and there's my OS X photo
blog share extension.

1083
00:49:18.516 --> 00:49:27.756
[ Applause ]

1084
00:49:28.256 --> 00:49:30.106
So, that demo was
all about a subclass

1085
00:49:30.106 --> 00:49:31.706
of SLComposeService
ViewController.

1086
00:49:32.006 --> 00:49:34.326
But we know a lot of extension
developers are going to want

1087
00:49:34.326 --> 00:49:36.236
to just subclass
from UIViewController

1088
00:49:36.236 --> 00:49:37.956
and NSViewController
and we'd love you to do

1089
00:49:37.956 --> 00:49:40.076
that because you can go to
town and customize the UI

1090
00:49:40.076 --> 00:49:41.576
and put your branding
in and what not.

1091
00:49:42.216 --> 00:49:44.006
But the basic work that you need

1092
00:49:44.006 --> 00:49:46.446
to do beyond implementing the
view controller is pretty much

1093
00:49:46.446 --> 00:49:47.736
what I already showed
you in the demo.

1094
00:49:48.236 --> 00:49:50.106
You've got those
Info.plist concerns you need

1095
00:49:50.106 --> 00:49:52.866
to still set your display name.

1096
00:49:53.276 --> 00:49:55.166
You need to still provide
your activation rules

1097
00:49:55.296 --> 00:49:56.876
and you still need
to do your upload

1098
00:49:56.876 --> 00:50:00.726
with NSURL background session.

1099
00:49:56.876 --> 00:50:00.726
with NSURL background session.

1100
00:50:02.596 --> 00:50:05.246
So, you just learned all
about app extensions.

1101
00:50:05.786 --> 00:50:08.096
You learned a little bit
about how they're packaged,

1102
00:50:08.396 --> 00:50:09.766
about the different
extension points,

1103
00:50:10.026 --> 00:50:11.906
how the communication
works between the host

1104
00:50:12.316 --> 00:50:13.666
and the extension itself.

1105
00:50:14.406 --> 00:50:16.476
You learned how to
make a Today widget

1106
00:50:16.786 --> 00:50:20.096
and a share extension
on both iOS and OS X.

1107
00:50:20.866 --> 00:50:22.606
So go take a look
at your application,

1108
00:50:23.046 --> 00:50:25.206
figure out what pieces of
your sharing functionality

1109
00:50:25.206 --> 00:50:27.066
or other functionality
you can package

1110
00:50:27.066 --> 00:50:28.886
up into an app extension
and deploy.

1111
00:50:29.296 --> 00:50:31.246
So, we think this is
really cool technology

1112
00:50:31.246 --> 00:50:33.826
and we're really looking forward
to all of the good features

1113
00:50:33.826 --> 00:50:36.126
and functionality you're
able to supply users

1114
00:50:36.306 --> 00:50:37.126
with your app extensions.

1115
00:50:38.516 --> 00:50:45.096
[ Applause ]

1116
00:50:45.596 --> 00:50:47.356
Jake Behrens is our
super Evangelist.

1117
00:50:47.546 --> 00:50:50.756
We have a really comprehensive
app extensions programming guide

1118
00:50:50.816 --> 00:50:53.206
that goes into tons of detail
on all the share points

1119
00:50:53.206 --> 00:50:54.566
and all the mechanics
of all this.

1120
00:50:55.566 --> 00:50:58.146
Tomorrow, we have another great
Extensions session where we go

1121
00:50:58.146 --> 00:51:00.136
into detail on more
share points.

1122
00:50:58.146 --> 00:51:00.136
into detail on more
share points.

1123
00:51:00.576 --> 00:51:04.066
We also talk about more of
the underlying infrastructure.

1124
00:51:04.316 --> 00:51:05.806
We also go into great detail

1125
00:51:05.806 --> 00:51:08.476
on the JavaScript
support for web content.

1126
00:51:08.886 --> 00:51:10.666
And importantly, more detail

1127
00:51:10.666 --> 00:51:12.846
on the extension context
in NSI to providers.

1128
00:51:12.846 --> 00:51:14.196
So there's tons of
good information.

1129
00:51:14.196 --> 00:51:15.276
I urge you to check those out.

1130
00:51:15.936 --> 00:51:18.816
We have two labs where you can
talk to us Apple engineers.

1131
00:51:18.816 --> 00:51:20.556
We'd love to get you
started implementing your

1132
00:51:20.556 --> 00:51:21.306
share extensions.

1133
00:51:21.576 --> 00:51:23.326
One of those labs is
immediately after this.

1134
00:51:23.386 --> 00:51:25.676
So, please meet us downstairs
and we'd love to chat.

1135
00:51:26.086 --> 00:51:26.446
Thank you.

1136
00:51:27.508 --> 00:51:29.508
[ Applause ]
