
1
00:00:00.506 --> 00:00:11.516
[ Silence ]

2
00:00:12.016 --> 00:00:13.000
[ Applause ]

3
00:00:13.606 --> 00:00:14.016
>> Good morning.

4
00:00:16.606 --> 00:00:18.666
Welcome to Session 406:

5
00:00:18.976 --> 00:00:20.626
Integrating Swift
with Objective-C.

6
00:00:22.466 --> 00:00:25.496
Now many of the Swift demos
here at the conference start

7
00:00:25.496 --> 00:00:27.756
by creating either a
brand-new project from one

8
00:00:27.756 --> 00:00:31.516
of expo's project templates or
a playground and that's great.

9
00:00:31.986 --> 00:00:34.916
Playgrounds are a great way
to explore the Swift language.

10
00:00:35.896 --> 00:00:39.836
But many of you already have
Mac or iOS apps and some

11
00:00:39.836 --> 00:00:41.846
of you have spent years
writing Objective-C code.

12
00:00:42.066 --> 00:00:43.906
You have written it carefully.

13
00:00:43.906 --> 00:00:47.356
You have debugged it,
polished it, optimized it.

14
00:00:47.356 --> 00:00:48.996
It's just perfect, hmm?

15
00:00:49.946 --> 00:00:52.916
And we certainly don't want
you to have to throw any

16
00:00:52.916 --> 00:00:56.086
of that away or rewrite
anything that you don't want to.

17
00:00:56.726 --> 00:00:59.956
Also some of you have really
a lot of Objective-C code

18
00:01:00.576 --> 00:01:02.806
that you maybe spent a decade
writing and maybe it's...

19
00:01:02.966 --> 00:01:03.786
not-so-perfect.

20
00:01:03.786 --> 00:01:06.156
It's not as clean and shiny.

21
00:01:06.646 --> 00:01:09.106
So you are going to be using

22
00:01:09.106 --> 00:01:10.956
that Objective-C
code for a while.

23
00:01:10.986 --> 00:01:13.036
You might want to rewrite
it, but it's not going

24
00:01:13.036 --> 00:01:14.876
to happen this time around,
because you've got an app

25
00:01:14.876 --> 00:01:19.596
to ship, etc. So,
Objective-C is not going away.

26
00:01:20.086 --> 00:01:23.006
Both Swift and Objective-C
are first class citizens

27
00:01:23.246 --> 00:01:24.996
for doing Cocoa and
Cocoa Touch development.

28
00:01:26.326 --> 00:01:29.386
And, in fact, we don't
want you to spend any time

29
00:01:29.386 --> 00:01:30.156
that you don't have to.

30
00:01:30.156 --> 00:01:32.516
We don't want you to stop
refining the Objective-C code.

31
00:01:32.516 --> 00:01:35.816
We want you to be able to
integrate Swift as you want to.

32
00:01:36.636 --> 00:01:39.546
And we do think that as
you implement new features,

33
00:01:39.886 --> 00:01:43.546
as you finally get around to
replacing crufty subsystems

34
00:01:43.916 --> 00:01:45.446
that you want to
use Swift for that

35
00:01:45.846 --> 00:01:49.276
because of its better
type safety,

36
00:01:49.756 --> 00:01:52.096
its expressiveness,
its performance.

37
00:01:54.076 --> 00:01:57.736
Now, many of you have also
gained a lot of knowledge

38
00:01:57.736 --> 00:02:01.226
and experience in Cocoa and
Cocoa Touch through your years

39
00:01:57.736 --> 00:02:01.226
and experience in Cocoa and
Cocoa Touch through your years

40
00:02:01.226 --> 00:02:04.726
of Objective-C development and
that applies to Swift as well.

41
00:02:05.386 --> 00:02:07.976
You're using the same
frameworks, the same classes,

42
00:02:08.645 --> 00:02:12.086
the same APIs with some
syntactic differences, in fact,

43
00:02:12.086 --> 00:02:14.546
the same design patterns,
such as delegation.

44
00:02:15.116 --> 00:02:18.356
So all that knowledge applies
and so we expect that a lot

45
00:02:18.356 --> 00:02:22.946
of you are going to end up with
projects that contain both Swift

46
00:02:22.946 --> 00:02:26.096
and Objective-C and we
worked hard to make sure

47
00:02:26.096 --> 00:02:28.526
that Xcode lets you freely
mix Swift and Objective-C.

48
00:02:29.836 --> 00:02:31.886
So this session over the
next hour we're going

49
00:02:31.886 --> 00:02:33.896
to be talking a little
bit more detail

50
00:02:33.896 --> 00:02:36.846
than what you've probably
seen so far about exactly how

51
00:02:36.846 --> 00:02:37.676
that works in practice.

52
00:02:37.676 --> 00:02:40.946
We're going to start simple by
just introducing some Swift code

53
00:02:40.946 --> 00:02:43.466
into an existing
Objective-C app.

54
00:02:44.396 --> 00:02:47.006
Then we'll get a little
bit more interesting.

55
00:02:47.006 --> 00:02:48.896
We're going to start
to add some Swift code

56
00:02:48.896 --> 00:02:51.816
to a model-level framework,
which is then embedded

57
00:02:51.816 --> 00:02:54.716
in an Objective-C app and
call that from Objective-C.

58
00:02:56.026 --> 00:02:58.926
We'll talk about how to start
accessing your pure Swift

59
00:02:58.926 --> 00:03:01.546
framework which will
start showing

60
00:02:58.926 --> 00:03:01.546
framework which will
start showing

61
00:03:02.166 --> 00:03:03.506
up from an Objective-C app.

62
00:03:03.506 --> 00:03:07.706
And then we'll talk as we go
along about how to adopt some

63
00:03:07.706 --> 00:03:10.586
of the common, well-established
Cocoa patterns in Swift.

64
00:03:10.976 --> 00:03:12.956
And again Swift is
designed from the ground

65
00:03:12.956 --> 00:03:16.526
up to be a great Cocoa/Cocoa
Touch development language.

66
00:03:16.776 --> 00:03:20.236
And so it has language support
for some of the Cocoa idioms

67
00:03:20.236 --> 00:03:22.186
that we've gotten used to.

68
00:03:22.556 --> 00:03:25.386
So, I could go on here for, you
know, two dozen slides and talk

69
00:03:25.386 --> 00:03:28.116
in detail about how this works,
but I'd rather just give a demo

70
00:03:28.116 --> 00:03:30.236
because that's usually
a bit more clear.

71
00:03:34.126 --> 00:03:37.696
Alright, so I've
got a project here.

72
00:03:37.696 --> 00:03:42.316
It's, it's an iOS app and
it has an embedded framework

73
00:03:42.316 --> 00:03:44.076
so it's decently designed here.

74
00:03:44.076 --> 00:03:47.216
It's got a top layer which is
the actual app with the view

75
00:03:47.216 --> 00:03:49.506
and the controller
layer in our MVC design.

76
00:03:50.706 --> 00:03:53.736
There is a framework
called ListerKit down here,

77
00:03:53.736 --> 00:03:55.206
which contains our
model objects.

78
00:03:55.206 --> 00:03:57.276
And all of this is currently
written in Objective-C.

79
00:03:58.756 --> 00:04:01.456
Just to give a sense of
what this is, let's go ahead

80
00:03:58.756 --> 00:04:01.456
Just to give a sense of
what this is, let's go ahead

81
00:04:01.456 --> 00:04:04.606
and run it in the simulator
and we're gonna go ahead here

82
00:04:04.606 --> 00:04:05.566
and bring up the simulator.

83
00:04:05.656 --> 00:04:08.526
We see that, yeah, it's a
typical list-taking application.

84
00:04:08.526 --> 00:04:11.216
I can go in and add
colored lists here.

85
00:04:11.216 --> 00:04:13.706
I can check off items,
etcetera, edit them.

86
00:04:14.006 --> 00:04:17.156
What I can't do right
now is to add a new list.

87
00:04:17.156 --> 00:04:21.216
This happens to be an iCloud app
so I could do that in my Mac app

88
00:04:21.216 --> 00:04:22.106
and it would show up here...

89
00:04:22.466 --> 00:04:24.926
But, for this example
we're going to use Swift

90
00:04:24.926 --> 00:04:28.156
to add the ability to
add a new list in iOS.

91
00:04:29.096 --> 00:04:31.106
Alright, so I'm going
to go back here

92
00:04:31.106 --> 00:04:33.726
and the first thing I'm
going to do is look down here

93
00:04:33.726 --> 00:04:35.076
to the group ViewControllers.

94
00:04:35.516 --> 00:04:38.636
And here we have some
ViewControllers already written

95
00:04:38.776 --> 00:04:42.186
in objectives [ahem]
in Objective-C.

96
00:04:42.596 --> 00:04:45.716
I go to File, Create New File,
and in this case I'm just going

97
00:04:45.716 --> 00:04:47.496
to create an empty Swift file
because I want to show you how

98
00:04:47.496 --> 00:04:48.596
to get started from scratch.

99
00:04:48.596 --> 00:04:50.556
Xcode has great file
templates and can fill

100
00:04:50.556 --> 00:04:51.666
in a lot of code for you.

101
00:04:51.666 --> 00:04:53.946
And we want to do it
in a basic way here,

102
00:04:53.946 --> 00:04:55.506
to show how it's going to work.

103
00:04:55.956 --> 00:04:59.836
I'm going to call it
NewListController and I'm going

104
00:04:59.836 --> 00:05:02.886
to make sure that
it is going to go

105
00:04:59.836 --> 00:05:02.886
to make sure that
it is going to go

106
00:05:02.886 --> 00:05:04.546
into the application
target here.

107
00:05:04.926 --> 00:05:07.926
We also see that I have
ListerKit, which is my framework

108
00:05:07.926 --> 00:05:09.366
and one of the new
extensions, here,

109
00:05:09.366 --> 00:05:12.816
for showing in the status view.

110
00:05:12.816 --> 00:05:14.276
So, NewListController.

111
00:05:14.956 --> 00:05:18.856
Now as I create this,
my first Swift file,

112
00:05:19.086 --> 00:05:20.686
in a pure Objective-C project...

113
00:05:21.226 --> 00:05:22.386
Xcode will offer to create

114
00:05:22.386 --> 00:05:23.746
for me what's called
a bridging header.

115
00:05:24.506 --> 00:05:27.286
So a bridging header, we'll talk
about that in more detail later,

116
00:05:27.606 --> 00:05:30.196
but basically what it is, is
a way for you to expose some

117
00:05:30.196 --> 00:05:32.916
of your Objective-C
APIs to Swift.

118
00:05:35.216 --> 00:05:37.106
I'm going to go ahead
and create that.

119
00:05:37.716 --> 00:05:38.926
So I get that by default.

120
00:05:40.256 --> 00:05:42.336
Now, import foundation...

121
00:05:42.496 --> 00:05:44.986
actually I'm going to be
needing some UIKit API here.

122
00:05:44.986 --> 00:05:46.836
So I go ahead and
change that to UIKit.

123
00:05:47.546 --> 00:05:51.476
And I know that I will need to
import my own model framework

124
00:05:51.536 --> 00:05:53.966
because we want to obviously
create our model objects

125
00:05:53.966 --> 00:05:55.396
from within the ViewController.

126
00:05:56.966 --> 00:06:01.436
And I'm just going to go ahead
here and say NewListController.

127
00:05:56.966 --> 00:06:01.436
And I'm just going to go ahead
here and say NewListController.

128
00:06:03.196 --> 00:06:07.226
And now, when I complete,
we see that because I said

129
00:06:07.226 --> 00:06:09.186
"import UIKit" there,

130
00:06:09.806 --> 00:06:12.376
Swift pulls in the
Objective-C framework UIKit

131
00:06:12.376 --> 00:06:15.526
and gives me a Swift
view of those symbols.

132
00:06:15.526 --> 00:06:17.946
So I'm going to subclass
from UIController

133
00:06:18.776 --> 00:06:20.016
and just leave it
like that for now.

134
00:06:21.696 --> 00:06:23.826
So we have just a
basic empty class --

135
00:06:24.076 --> 00:06:26.516
a Swift class, subclassing
an Objective-C class --

136
00:06:26.626 --> 00:06:28.506
that we get from UI-
...from Cocoa Touch.

137
00:06:30.356 --> 00:06:32.886
Now we could sit here
and drag out rectangles

138
00:06:32.886 --> 00:06:35.306
and create an API-
...create a UI for this,

139
00:06:35.346 --> 00:06:36.986
but fortunately I happen
to already have one.

140
00:06:37.496 --> 00:06:38.896
How lucky.

141
00:06:39.326 --> 00:06:40.396
It isn't wire up though,

142
00:06:40.466 --> 00:06:41.676
so we're going to
do that right now.

143
00:06:42.846 --> 00:06:44.806
The first thing I'm
going to do here is,

144
00:06:44.946 --> 00:06:48.586
just like with Objective-C,
I need to set what the class

145
00:06:48.586 --> 00:06:49.596
of my UIController is.

146
00:06:49.596 --> 00:06:53.556
So I can go up here and now we
see that the NewListController

147
00:06:53.556 --> 00:06:56.296
that I just created is shown
here among all the ones

148
00:06:56.296 --> 00:06:57.406
implemented in Objective-C.

149
00:06:57.826 --> 00:06:59.336
So when you access your classes

150
00:06:59.336 --> 00:07:01.836
from Swift-...from
Interface Builder, the Swift

151
00:06:59.336 --> 00:07:01.836
from Swift-...from
Interface Builder, the Swift

152
00:07:01.836 --> 00:07:03.796
and Objective-C classes
show up next to each other

153
00:07:03.796 --> 00:07:05.706
and you can work
with them as equals.

154
00:07:07.466 --> 00:07:10.306
Alright, so now the next thing
I want to do after setting that,

155
00:07:10.986 --> 00:07:13.826
I'm going to go ahead and
create a bar button item here.

156
00:07:13.936 --> 00:07:17.326
I'm going to drag that up
into the toolbar, up here,

157
00:07:18.366 --> 00:07:21.986
and I'm going to change
the identifier to be Add,

158
00:07:21.986 --> 00:07:24.006
and that also changes
the visual appearance

159
00:07:24.006 --> 00:07:27.156
to give it a standard Cocoa
Touch "Add button" look.

160
00:07:28.676 --> 00:07:31.086
I'll create a segue, it's
going to be a mobile segue.

161
00:07:31.686 --> 00:07:32.926
This is, after all,
the storyboard

162
00:07:34.166 --> 00:07:38.336
and I'll change the name of
that segue to be New List.

163
00:07:38.336 --> 00:07:41.196
Now that's going to be important
a little bit later on so

164
00:07:41.196 --> 00:07:42.976
that we can access it
from within our code.

165
00:07:44.626 --> 00:07:48.796
Okay. So now, you
may have seen in one

166
00:07:48.796 --> 00:07:51.616
of the other demos how we can
drag from Swift code and connect

167
00:07:51.616 --> 00:07:53.686
to objects inside of IB.

168
00:07:54.336 --> 00:07:56.236
We can do the same thing in
the other direction as well.

169
00:07:56.596 --> 00:07:59.776
If I option-click here
on my Swift class --

170
00:08:01.306 --> 00:08:03.306
my ViewController class
implemented in Swift --

171
00:08:03.836 --> 00:08:05.286
now I can drag the
other direction.

172
00:08:06.106 --> 00:08:09.126
First thing I'm going to do is
I'm going to go ahead and drag

173
00:08:09.126 --> 00:08:12.886
from an outlet and
insert a new outlet here.

174
00:08:13.466 --> 00:08:16.766
And I'm going to call
this "nameField".

175
00:08:17.316 --> 00:08:20.456
And we see that it's a UIText
field and the storage is weak

176
00:08:20.796 --> 00:08:22.796
because we have a
controller class,

177
00:08:23.556 --> 00:08:26.176
the super view- ...the view
hierarchy owns the button,

178
00:08:26.326 --> 00:08:28.846
and the fields and
the buttons in here,

179
00:08:29.246 --> 00:08:31.066
and so we just want a
weak reference to it.

180
00:08:31.066 --> 00:08:33.426
And, in fact, when
we insert this,

181
00:08:35.025 --> 00:08:36.686
Interface Builder knows
it's a Swift file.

182
00:08:36.836 --> 00:08:41.096
So it uses the Swift syntax just
as it would for Objective-C.

183
00:08:42.456 --> 00:08:46.886
And it uses the IBOutlet
property

184
00:08:47.196 --> 00:08:50.056
for the stored property- ...I'm
sorry, the IBOutlet attribute

185
00:08:50.056 --> 00:08:51.216
for the stored property here.

186
00:08:51.766 --> 00:08:54.876
And this is implicitly
weak and also optional

187
00:08:55.286 --> 00:08:57.876
because not all the
outlets may be connected.

188
00:09:00.236 --> 00:09:02.736
Give myself some space
there; I'm going to go ahead

189
00:09:02.736 --> 00:09:06.106
and do the same thing
here for the buttons.

190
00:09:07.016 --> 00:09:10.756
I'm just going to control-drag
these and I'm just going

191
00:09:10.786 --> 00:09:12.796
to fill these in
in the same way.

192
00:09:12.796 --> 00:09:14.386
Now this is a sample app.

193
00:09:14.386 --> 00:09:16.986
Let me go ahead and
adjust the spacing there.

194
00:09:16.986 --> 00:09:20.316
This is a sample app and
so it's not rescalable

195
00:09:20.316 --> 00:09:22.306
to just have six
buttons and six outlets.

196
00:09:22.346 --> 00:09:24.196
But I know that you
all design better,

197
00:09:24.356 --> 00:09:26.796
more maintainable
code than this.

198
00:09:26.886 --> 00:09:29.826
This is for illustrative
purposes only.

199
00:09:29.826 --> 00:09:32.246
You might want something
where you can load colors

200
00:09:32.246 --> 00:09:34.796
from a TableView- ...uh,
from a Plist and show them

201
00:09:34.796 --> 00:09:36.176
in a TableView or
something like that.

202
00:09:36.176 --> 00:09:40.346
I'm going to go ahead and
finish connecting these.

203
00:09:41.536 --> 00:09:45.106
Alright, so now we have our
outlets to the UI components.

204
00:09:45.376 --> 00:09:47.686
We can also create
Actions in this way.

205
00:09:48.276 --> 00:09:51.596
If I choose the Cancel button
down here and I drag in the,

206
00:09:51.596 --> 00:09:54.126
I can create an Action up
at the top here just for-

207
00:09:54.126 --> 00:09:55.216
...just as for Objective-C.

208
00:09:55.686 --> 00:09:57.376
I change the connection
type to Action.

209
00:09:57.656 --> 00:10:00.766
I will type here "cancel" and
we can just leave the type

210
00:09:57.656 --> 00:10:00.766
I will type here "cancel" and
we can just leave the type

211
00:10:00.766 --> 00:10:01.956
of the sender as
any object here.

212
00:10:02.076 --> 00:10:04.426
We don't actually care
because we're not going

213
00:10:04.426 --> 00:10:05.496
to be messaging it.

214
00:10:07.326 --> 00:10:11.536
What we will do, however, is
to invoke some Cocoa Touch API.

215
00:10:11.536 --> 00:10:18.716
I give myself some more room
and I can say "self.dismiss"

216
00:10:18.716 --> 00:10:21.086
and then the code
completion gives me access

217
00:10:21.086 --> 00:10:23.786
to the Cocoa Touch API
that we already know.

218
00:10:24.636 --> 00:10:25.836
I can complete here.

219
00:10:26.176 --> 00:10:27.586
I'm not going to
need a- ...I want it

220
00:10:27.586 --> 00:10:28.976
to be animated, so I put "true".

221
00:10:29.266 --> 00:10:31.496
I don't need a completion
block, so I give it "nil".

222
00:10:32.036 --> 00:10:35.346
Now, in Objective-C we
always have to message "self"

223
00:10:35.606 --> 00:10:36.766
if we want to talk to self.

224
00:10:37.516 --> 00:10:40.416
Swift knows from context when
you are messaging yourself.

225
00:10:40.416 --> 00:10:41.886
So we can actually
leave this out

226
00:10:41.886 --> 00:10:42.976
and make this a little
bit more readable.

227
00:10:43.516 --> 00:10:48.546
[ Applause ]

228
00:10:49.046 --> 00:10:49.606
Excellent.

229
00:10:50.396 --> 00:10:53.996
Alright, so now we will connect
the buttons here as well.

230
00:10:56.116 --> 00:10:58.766
And I'm going to be
calling this "pickColor".

231
00:10:59.546 --> 00:11:01.926
Now in this case
I choose UIButton.

232
00:10:59.546 --> 00:11:01.926
Now in this case
I choose UIButton.

233
00:11:02.566 --> 00:11:05.296
(I'm sorry, I need to
make it an Action.)

234
00:11:06.466 --> 00:11:07.896
I choose UIButton down here

235
00:11:07.896 --> 00:11:10.346
because in this case we
will actually want to talk

236
00:11:10.346 --> 00:11:12.906
to the button, or
compare the button,

237
00:11:12.906 --> 00:11:14.296
so we want to have that type.

238
00:11:14.296 --> 00:11:19.126
And as you can see, Interface
Builder generates the code

239
00:11:19.726 --> 00:11:21.826
and makes the sender
be a UIButton.

240
00:11:22.656 --> 00:11:24.356
Before I forget, I'm
also going to wire

241
00:11:24.356 --> 00:11:27.206
up the other actions
here as well.

242
00:11:27.206 --> 00:11:28.226
Let me see here.

243
00:11:30.516 --> 00:11:32.936
To connect to this one,

244
00:11:32.936 --> 00:11:36.226
give myself a little
bit of space there.

245
00:11:41.996 --> 00:11:44.376
And now they're all wired
up to the same Action.

246
00:11:44.656 --> 00:11:46.036
So they're all wired
up to the same Action.

247
00:11:46.036 --> 00:11:47.436
The sender will be
different depending

248
00:11:47.436 --> 00:11:48.426
on which button we touch.

249
00:11:49.746 --> 00:11:52.556
Now, I want to show
that some of the power

250
00:11:52.556 --> 00:11:56.116
of the Swift select statement
here, the switch statement.

251
00:11:58.486 --> 00:12:00.956
Unlike Objective-C or
other C-based languages,

252
00:11:58.486 --> 00:12:00.956
Unlike Objective-C or
other C-based languages,

253
00:12:01.286 --> 00:12:04.646
I can actually switch
on a wide variety

254
00:12:04.646 --> 00:12:05.806
of different kinds of patterns.

255
00:12:05.806 --> 00:12:07.826
In this case I'm just
switching on what the sender is.

256
00:12:08.366 --> 00:12:13.396
But this is a very rich
construct in the Swift language

257
00:12:13.746 --> 00:12:16.446
and I encourage you to
catch one of the later talks

258
00:12:16.446 --> 00:12:19.656
about advanced Swift to
really get into the depth

259
00:12:19.656 --> 00:12:21.426
of what you can use this for.

260
00:12:22.096 --> 00:12:24.736
For right now, to keep
it simple, I'm just going

261
00:12:24.736 --> 00:12:25.926
to use it to match on a button.

262
00:12:26.946 --> 00:12:28.976
And what I will say is "okay,

263
00:12:28.976 --> 00:12:30.656
now I need to assign
something here."

264
00:12:31.096 --> 00:12:33.196
So I'm going to need to
have a stored property.

265
00:12:34.386 --> 00:12:37.626
I create a stored property
called selectedLabel

266
00:12:37.876 --> 00:12:40.736
because we're actually
choosing labels here represented

267
00:12:40.736 --> 00:12:43.466
as colors on the screen.

268
00:12:43.466 --> 00:12:46.606
And then what I can do
here is I can say this is

269
00:12:46.606 --> 00:12:48.186
an AAPLListLabel.

270
00:12:49.356 --> 00:12:54.386
So this again is an Objective-C
type that has been imported

271
00:12:54.766 --> 00:12:56.826
through my import of
ListerKit up there.

272
00:12:58.266 --> 00:13:00.086
I'm going to start out by saying

273
00:12:58.266 --> 00:13:00.086
I'm going to start out by saying

274
00:13:00.086 --> 00:13:04.096
that that is an
APLListLabel.Gray.

275
00:13:04.766 --> 00:13:06.126
That's the default value of it.

276
00:13:06.766 --> 00:13:09.036
Because I don't put a question
mark, I don't make it optional,

277
00:13:09.036 --> 00:13:10.806
that means that it
has to have a value.

278
00:13:11.176 --> 00:13:13.286
Remember the IB outlets
are implicitly optional.

279
00:13:13.546 --> 00:13:16.966
Now it's kind of ugly to have
to repeat the same thing here.

280
00:13:16.966 --> 00:13:19.796
And, in fact, Swift has great
support for type inference.

281
00:13:19.796 --> 00:13:21.576
And when it knows exactly
what type you mean,

282
00:13:21.956 --> 00:13:23.596
then you can go ahead
and leave out the type.

283
00:13:23.996 --> 00:13:27.246
So from this, Swift can tell
exactly that, "okay this has

284
00:13:27.286 --> 00:13:30.846
to be an AAPLListLabel," because
that's how I'm initializing it,

285
00:13:30.886 --> 00:13:32.516
so I can just leave
out the type.

286
00:13:34.666 --> 00:13:36.396
Now I can complete
my statement here.

287
00:13:36.396 --> 00:13:41.076
I can say "selectedLabel
= .Gray" and, in fact,

288
00:13:41.436 --> 00:13:43.116
I can add to the rest
of them here as well.

289
00:13:43.116 --> 00:13:44.376
I'm a very fast typer.

290
00:13:46.716 --> 00:13:50.556
Now we see here that
Objective-C- ...I mean, sorry,

291
00:13:50.716 --> 00:13:53.136
Xcode, Swift has a
message for us here.

292
00:13:53.526 --> 00:13:56.686
So in Swift, one of the
things to notice is each

293
00:13:56.686 --> 00:13:59.196
of the cases is implicitly ended

294
00:13:59.586 --> 00:14:00.796
at the beginning
of the next case.

295
00:13:59.586 --> 00:14:00.796
at the beginning
of the next case.

296
00:14:00.796 --> 00:14:04.096
So you don't have the case of
C where you implicitly fall

297
00:14:04.096 --> 00:14:05.776
through and that's the
source of a lot of bugs.

298
00:14:06.326 --> 00:14:10.026
In fact, Swift was explicitly
designed to avoid many

299
00:14:10.026 --> 00:14:13.376
of the common pitfalls that are
common in C-based languages.

300
00:14:14.726 --> 00:14:17.476
Now in this case, another thing
about the switch statement is

301
00:14:17.476 --> 00:14:18.576
that it has to be exhaustive.

302
00:14:18.576 --> 00:14:20.776
So you have to say that
you cover all the cases.

303
00:14:21.566 --> 00:14:23.946
In this particular case I'm
just going to add a default

304
00:14:25.016 --> 00:14:27.986
and what I'm going to do
in this case right here is

305
00:14:27.986 --> 00:14:30.236
to use a Swift standard
library function

306
00:14:30.236 --> 00:14:31.436
to just trap into the debugger.

307
00:14:31.726 --> 00:14:33.476
Because I want to make sure
that if I just add new buttons

308
00:14:33.476 --> 00:14:36.106
and hook them up that I actually
have the code for that as well.

309
00:14:38.326 --> 00:14:39.336
So now Xcode is happy.

310
00:14:40.496 --> 00:14:41.106
That's excellent.

311
00:14:41.106 --> 00:14:42.046
We've just set our property.

312
00:14:42.316 --> 00:14:43.336
That's all we've done so far.

313
00:14:44.966 --> 00:14:47.756
But now we can use some
more of the Cocoa Touch API

314
00:14:48.266 --> 00:14:50.986
to actually make the button
show a reflected state-

315
00:14:51.856 --> 00:14:53.706
...show it's selected
state, I should say.

316
00:14:54.656 --> 00:14:58.306
So, we say, in this case
we can say "sender."

317
00:14:58.966 --> 00:15:02.316
and then we can use our code
completion to access the layer.

318
00:14:58.966 --> 00:15:02.316
and then we can use our code
completion to access the layer.

319
00:15:02.316 --> 00:15:06.916
And then we'll set it's
borderWidth to be five.

320
00:15:07.936 --> 00:15:09.636
And then, of course,
we have to initialize

321
00:15:09.676 --> 00:15:11.356
that to be a borderColor
as well.

322
00:15:12.456 --> 00:15:14.806
Now in this case, because
we're accessing the layer --

323
00:15:14.876 --> 00:15:16.346
that's a core graphics API --

324
00:15:16.826 --> 00:15:19.896
we get the CGColor from the
UILabel- ...the UIColor.

325
00:15:21.856 --> 00:15:24.626
And all of these are
standard Cocoa Touch APIs.

326
00:15:24.626 --> 00:15:27.696
So you see that when we access
our own Objective-C APIs

327
00:15:28.086 --> 00:15:30.816
or the Cocoa Touch APIs
it looks all the same.

328
00:15:30.816 --> 00:15:32.946
We still use the same,
nice Swift syntax.

329
00:15:34.216 --> 00:15:36.336
Another thing we can
do here is to just say

330
00:15:36.336 --> 00:15:41.006
that the view's tint color
is going to be the color

331
00:15:41.006 --> 00:15:42.186
that corresponds to the label.

332
00:15:43.116 --> 00:15:48.996
And for this we can call
another one of our functions

333
00:15:48.996 --> 00:15:50.736
that we brought in
from Objective-C.

334
00:15:52.376 --> 00:15:56.326
And we pass it the
selectedLabel.

335
00:15:56.326 --> 00:15:59.296
And, in fact, if we
command-click on this,

336
00:15:59.606 --> 00:16:02.776
we see here that we can get
to a Swift representation

337
00:15:59.606 --> 00:16:02.776
we see here that we can get
to a Swift representation

338
00:16:03.066 --> 00:16:05.076
of our own Objective-C API.

339
00:16:05.986 --> 00:16:08.886
In Navigate we could actually
go back to the header itself

340
00:16:09.116 --> 00:16:09.906
that we declared it from.

341
00:16:11.366 --> 00:16:15.276
Alright, so now those of you

342
00:16:15.276 --> 00:16:17.106
who are following closely here
may have seen a little bit

343
00:16:17.106 --> 00:16:19.136
of a problem: we set
the borderWidth to 5;

344
00:16:19.576 --> 00:16:21.656
we never actually deselect
the previous button.

345
00:16:24.016 --> 00:16:25.526
So what we can do
is to keep track

346
00:16:25.526 --> 00:16:28.656
of the currently
selectedButton and in this case,

347
00:16:28.716 --> 00:16:32.306
I'm going to explicitly say that
it's a weak stored property.

348
00:16:32.426 --> 00:16:36.286
So this is not going to cause,
ah, the- ...extend the lifetime

349
00:16:36.286 --> 00:16:38.056
of that button which
is, after all,

350
00:16:38.056 --> 00:16:39.176
owned by the view hierarchy.

351
00:16:41.546 --> 00:16:42.856
And I'm going to declare

352
00:16:42.856 --> 00:16:45.736
that this is a UIButton
but it's optional.

353
00:16:46.606 --> 00:16:49.616
Because when we first
start out it has no value.

354
00:16:50.406 --> 00:16:51.866
And so, we're going to be able

355
00:16:51.866 --> 00:16:53.716
to check whether it
has a value or not.

356
00:16:55.986 --> 00:17:00.016
We add some code to set the
selectedButton to the sender

357
00:16:55.986 --> 00:17:00.016
We add some code to set the
selectedButton to the sender

358
00:17:00.616 --> 00:17:02.776
at the end of having
assigned it.

359
00:17:02.776 --> 00:17:11.326
And then here we can say "if
selectedButton" then we're going

360
00:17:11.326 --> 00:17:14.136
to go ahead and clear out
the border on that one.

361
00:17:15.056 --> 00:17:18.856
Now this happens to be a object
reference so I could do the same

362
00:17:18.856 --> 00:17:20.326
in Objective-C with a nil value.

363
00:17:20.646 --> 00:17:23.136
But one of the nice things
about optionals in Swift is

364
00:17:23.136 --> 00:17:24.326
that they apply to any type

365
00:17:24.326 --> 00:17:26.726
of value even a Boolean
or a scalar.

366
00:17:27.346 --> 00:17:30.456
So in this particular case,
I'm just going to go ahead

367
00:17:30.456 --> 00:17:33.656
and select the selectedButton's
layer borderWidth to 0.

368
00:17:33.926 --> 00:17:39.106
Now you'll notice the
exclamation mark there.

369
00:17:39.506 --> 00:17:42.566
This is the unwrapping
operator and that says

370
00:17:42.566 --> 00:17:44.096
that if I have an
optional value,

371
00:17:44.096 --> 00:17:45.756
then when I've determined
it has a value,

372
00:17:45.756 --> 00:17:47.466
I get at the actual value.

373
00:17:47.506 --> 00:17:50.096
And if I forgot to check
whether it has a value,

374
00:17:50.096 --> 00:17:51.786
that will cause a
trap if it doesn't.

375
00:17:52.186 --> 00:17:54.776
So this is one of the ways
that Swift makes it safer

376
00:17:55.086 --> 00:17:58.696
to write your apps, because you
can catch these errors earlier

377
00:17:58.696 --> 00:18:02.526
without having to add a lot
of assertions to your code.

378
00:17:58.696 --> 00:18:02.526
without having to add a lot
of assertions to your code.

379
00:18:03.006 --> 00:18:04.556
So I think we're
probably good to go here.

380
00:18:04.556 --> 00:18:06.696
Let's go ahead and take a look

381
00:18:07.046 --> 00:18:09.206
and I'm sure I forgot
something somewhere...

382
00:18:10.326 --> 00:18:11.316
"selectED button"!

383
00:18:11.436 --> 00:18:12.866
And that's because
I mistyped it.

384
00:18:14.136 --> 00:18:15.556
So that shows that
this is live right?

385
00:18:15.556 --> 00:18:16.926
I'm not playing a
QuickTime movie up here.

386
00:18:18.716 --> 00:18:21.276
[Laughter] Okay,
so now we're here.

387
00:18:21.636 --> 00:18:22.796
We have our add button.

388
00:18:23.906 --> 00:18:25.126
We bring up the modal sheet.

389
00:18:26.016 --> 00:18:28.626
As we select the various
buttons we can see

390
00:18:28.626 --> 00:18:31.356
that we have the border and
then we do the, the tint,

391
00:18:31.596 --> 00:18:34.366
we tint the buttons down
here and, of course,

392
00:18:34.496 --> 00:18:36.046
the Save button doesn't
yet work.

393
00:18:36.676 --> 00:18:38.606
Now I'm just a UI guy.

394
00:18:38.606 --> 00:18:40.346
So I just make it look pretty.

395
00:18:40.346 --> 00:18:42.766
But to actually do the model
level work we're going to have

396
00:18:42.766 --> 00:18:44.596
to ask one of my colleagues
to come up here in a moment.

397
00:18:44.596 --> 00:18:47.736
First let's take a look at
what we did in this part.

398
00:18:50.976 --> 00:18:58.556
Okay. So what did we just do?

399
00:18:59.436 --> 00:19:03.376
So first of all, we added some
Swift code to an Objective-C app

400
00:18:59.436 --> 00:19:03.376
So first of all, we added some
Swift code to an Objective-C app

401
00:19:03.596 --> 00:19:05.946
and Xcode offered to
create us a bridging header,

402
00:19:06.396 --> 00:19:08.416
which the next action we'll go
onto some more detail about.

403
00:19:09.686 --> 00:19:12.946
We subclassed the Cocoa class-
...Cocoa Touch class in Swift.

404
00:19:12.946 --> 00:19:15.566
In this case it happened to be
a Cocoa Touch class that's part

405
00:19:15.566 --> 00:19:19.046
of the standard libraries
of Cocoa Touch itself.

406
00:19:19.336 --> 00:19:21.346
But it could also be one
of your Objective-C classes

407
00:19:21.456 --> 00:19:22.056
that you've declared.

408
00:19:23.076 --> 00:19:25.196
We used Swift class in
the Interface Builder

409
00:19:25.196 --> 00:19:27.736
and as I hope you saw,
it's exactly like working

410
00:19:27.736 --> 00:19:28.956
with an Objective-C class.

411
00:19:28.956 --> 00:19:31.356
And that's actually a theme
under here that we wanted

412
00:19:31.356 --> 00:19:34.666
to feel like exactly the same
thing; it's interchangable.

413
00:19:37.096 --> 00:19:41.346
And so now to make this a bit
more real in terms of the model,

414
00:19:41.376 --> 00:19:43.386
I'm going to ask my
colleague Dave to come up

415
00:19:43.386 --> 00:19:46.276
and complete the project
here or work on it further.

416
00:19:47.516 --> 00:19:52.566
[ Applause ]

417
00:19:53.066 --> 00:19:53.216
>> Alright.

418
00:19:53.496 --> 00:19:54.086
Thanks Anders.

419
00:19:54.256 --> 00:19:59.056
What we saw is that you
have access to everything

420
00:19:59.636 --> 00:20:03.466
in Cocoa Touch and the power
that you've got in Xcode

421
00:19:59.636 --> 00:20:03.466
in Cocoa Touch and the power
that you've got in Xcode

422
00:20:03.766 --> 00:20:05.986
from Swift without
really doing anything.

423
00:20:06.466 --> 00:20:07.976
But I'm sure what
you're thinking now is

424
00:20:07.976 --> 00:20:09.246
"what about MY code?

425
00:20:09.646 --> 00:20:11.396
What about the Objective-C
code that I have

426
00:20:11.456 --> 00:20:13.026
in MY target in MY app?"

427
00:20:13.976 --> 00:20:15.106
And that's what I
want to show you.

428
00:20:15.426 --> 00:20:19.466
As Anders said, we could
spend a lot of time in slides

429
00:20:19.466 --> 00:20:21.046
and everything else
and I'm actually going

430
00:20:21.046 --> 00:20:22.176
to cut it a little
shorter than he did

431
00:20:22.286 --> 00:20:23.976
and just go straight
into a demo.

432
00:20:28.346 --> 00:20:30.926
And so we come back right
where we were before

433
00:20:32.206 --> 00:20:34.966
and for our purposes the first
thing we want do here is a

434
00:20:34.966 --> 00:20:37.896
little bit of tidy-up,
and that is

435
00:20:37.896 --> 00:20:39.966
to make our UI text
field behave the way

436
00:20:39.966 --> 00:20:41.386
that we want for our user.

437
00:20:41.576 --> 00:20:43.246
It offers a great deal

438
00:20:43.246 --> 00:20:47.176
of configurability using
the delegate pattern.

439
00:20:47.946 --> 00:20:53.236
And to do that we're going to
make NewListController conform

440
00:20:53.626 --> 00:20:58.976
to UITextFieldDelegate,
which is as easy as...

441
00:21:02.616 --> 00:21:03.376
if I could type...

442
00:21:07.796 --> 00:21:09.956
finding our UITextField...

443
00:21:10.726 --> 00:21:12.166
Man, I'm having some time here.

444
00:21:13.306 --> 00:21:18.756
[laughter] It's a
comedy show, I promise.

445
00:21:19.256 --> 00:21:24.766
[laughter]

446
00:21:25.266 --> 00:21:25.676
There we go.

447
00:21:26.626 --> 00:21:28.976
Alright, something to
call out there is-...

448
00:21:29.516 --> 00:21:32.776
[ Applause ]

449
00:21:33.276 --> 00:21:37.236
Success! And that's the
hardest thing I'm going

450
00:21:37.236 --> 00:21:38.726
to do the whole time
I'm up here.

451
00:21:40.296 --> 00:21:41.656
[laughter] So
UITextFieldDelegate,

452
00:21:42.226 --> 00:21:46.766
all we did here was add the
protocol conformance to the end

453
00:21:46.766 --> 00:21:49.756
of a common separated
list after our class.

454
00:21:50.086 --> 00:21:52.636
In our case it's important
because we're actually,

455
00:21:52.636 --> 00:21:54.386
we actually have a superclass.

456
00:21:54.386 --> 00:21:56.746
The superclass is the
first thing in that list

457
00:21:57.176 --> 00:21:58.626
and then our protocols follow.

458
00:22:00.076 --> 00:22:02.606
Now that I have managed

459
00:22:02.606 --> 00:22:06.626
to declare textual delegate I'm
actually going to take it easy

460
00:22:06.626 --> 00:22:09.856
for the next part
and just bring in...

461
00:22:10.346 --> 00:22:12.396
the implementation of
TextField should return.

462
00:22:13.056 --> 00:22:15.336
And the only thing we're
doing here is resigning first

463
00:22:15.336 --> 00:22:18.696
responder on our
TextField and returning

464
00:22:18.696 --> 00:22:20.156
to make sure the
keyboard dismisses

465
00:22:20.156 --> 00:22:21.166
when the user hits return.

466
00:22:22.146 --> 00:22:28.776
Not particularly interesting,
but it was just as easy

467
00:22:28.896 --> 00:22:31.026
as it would be in
Objective-C to go ahead

468
00:22:31.026 --> 00:22:32.136
and implement this protocol.

469
00:22:33.626 --> 00:22:37.696
Next, as Anders promised, we are
going to look a little bit more

470
00:22:37.876 --> 00:22:41.116
at the interaction with
the model side of things

471
00:22:41.386 --> 00:22:43.896
and actually implement Save.

472
00:22:44.686 --> 00:22:46.356
The first thing I'm
going to do in-

473
00:22:47.566 --> 00:22:48.396
...who caught the error here?

474
00:22:49.506 --> 00:22:53.286
Somebody knows what I
forgot to do, and that is:

475
00:22:54.886 --> 00:22:57.066
manage to declare it as
a UITextFieldDelegate

476
00:22:57.066 --> 00:23:00.326
but we never actually connected
it and that would have made

477
00:22:57.066 --> 00:23:00.326
but we never actually connected
it and that would have made

478
00:23:00.326 --> 00:23:01.266
for an interesting end.

479
00:23:04.646 --> 00:23:10.176
So now that we've got that set
up I will control-drag over,

480
00:23:11.116 --> 00:23:17.806
manage to hit the button, set it
up as an action, call it "Save".

481
00:23:20.026 --> 00:23:25.416
Now, inside here I
actually want to interact

482
00:23:25.416 --> 00:23:31.846
with the representation of
our documents that we see

483
00:23:31.896 --> 00:23:34.256
in the document list
on the main screen.

484
00:23:34.666 --> 00:23:37.546
And that's a part of our app
target, not a part of ListerKit.

485
00:23:38.356 --> 00:23:40.516
And because of that we have
to take a different approach.

486
00:23:40.516 --> 00:23:43.036
We can't just simply
import our framework in.

487
00:23:44.006 --> 00:23:47.316
And this is where we make use of
the Objective-C bridging header

488
00:23:47.946 --> 00:23:49.576
that Xcode offered
to create for us

489
00:23:49.716 --> 00:23:52.026
when we created the first
Swift file in this project.

490
00:23:53.646 --> 00:23:59.776
So we'll navigate over to
that and it gets created

491
00:23:59.776 --> 00:24:03.046
in the same directory -- or in
the same group, I should say --

492
00:23:59.776 --> 00:24:03.046
in the same directory -- or in
the same group, I should say --

493
00:24:03.716 --> 00:24:05.356
as the Swift file
that we created.

494
00:24:07.486 --> 00:24:09.646
It's not overly interesting
at first.

495
00:24:09.646 --> 00:24:12.606
It simply has a comment
that's very instructive.

496
00:24:12.946 --> 00:24:16.826
This is where we put the imports
for the classes in our target

497
00:24:17.136 --> 00:24:18.556
that we want to expose to Swift.

498
00:24:19.556 --> 00:24:24.516
In our case, it's a single class
and that is our ListInfo class.

499
00:24:25.746 --> 00:24:30.666
This is the representation that
backs the TableView that you see

500
00:24:30.666 --> 00:24:31.926
when the app initially comes up.

501
00:24:32.446 --> 00:24:37.896
We save that and head back to...

502
00:24:40.346 --> 00:24:43.716
really don't need the storyboard
anymore, so, I'm gonna go ahead

503
00:24:43.716 --> 00:24:47.986
and collapse things down and let
us actually focus on the code,

504
00:24:47.986 --> 00:24:50.806
because the wrapping really
kind of gets on my nerves.

505
00:24:50.806 --> 00:24:52.106
That's one of the things
that I like about Swift,

506
00:24:52.106 --> 00:24:53.726
is it's a little more succinct.

507
00:24:55.566 --> 00:24:58.216
So just heading back
down to our Save...

508
00:24:59.096 --> 00:25:01.826
Now that we've pulled in
the bridging header - or,

509
00:24:59.096 --> 00:25:01.826
Now that we've pulled in
the bridging header - or,

510
00:25:01.826 --> 00:25:03.626
now that we've added our class
to the bridging header --

511
00:25:03.766 --> 00:25:04.886
we can actually create one.

512
00:25:04.886 --> 00:25:06.336
I'm going to create
it as a "let"

513
00:25:06.466 --> 00:25:07.676
because it's going
to be constant.

514
00:25:07.676 --> 00:25:08.896
I'm only going to
assign it once.

515
00:25:10.936 --> 00:25:16.476
And so my ListInfo
is equal ListInfo...

516
00:25:23.176 --> 00:25:26.796
...and, of course, I
keep saying "ListInfo"

517
00:25:28.206 --> 00:25:29.686
like we instruct you guys to do

518
00:25:29.686 --> 00:25:32.586
when we're writing Objective-C
code we actually use a prefix.

519
00:25:33.086 --> 00:25:34.756
And I've been writing a
lot of Swift code lately,

520
00:25:34.756 --> 00:25:37.016
so it's not on the
forefront of my mind.

521
00:25:37.556 --> 00:25:38.746
So, our ListInfo...

522
00:25:40.106 --> 00:25:41.846
and it offers us
two constructors.

523
00:25:41.846 --> 00:25:43.386
One of them takes URL.

524
00:25:43.386 --> 00:25:44.956
The other takes an
NSMetadataItem

525
00:25:44.956 --> 00:25:46.776
for that iCloud support
we were talking about.

526
00:25:47.296 --> 00:25:48.376
We're going to go
with the URL one.

527
00:25:49.106 --> 00:25:50.836
I could construct
the URL right here.

528
00:25:51.336 --> 00:25:53.206
A little bit of forethought,
thinking forward,

529
00:25:53.206 --> 00:25:54.986
I know that I'm actually
going to want

530
00:25:54.986 --> 00:25:58.266
to revise this a little bit
later and iterate on it.

531
00:25:58.676 --> 00:25:59.496
So I'm going to set

532
00:25:59.496 --> 00:26:02.826
up a computed property
as a convenience.

533
00:25:59.496 --> 00:26:02.826
up a computed property
as a convenience.

534
00:26:03.386 --> 00:26:08.766
Now to declare a computed
property is pretty similar

535
00:26:08.766 --> 00:26:11.716
to the way that we
define a stored property.

536
00:26:12.246 --> 00:26:15.506
And we'll go with var.

537
00:26:15.506 --> 00:26:16.996
I'm going to call it "fileURL".

538
00:26:18.146 --> 00:26:19.666
Now with a computed
property we do have

539
00:26:19.706 --> 00:26:22.676
to be explicit about our type.

540
00:26:23.566 --> 00:26:26.426
I'm going to make it
optional and that's

541
00:26:26.426 --> 00:26:29.036
because if the user actually
hasn't provided us a value

542
00:26:29.036 --> 00:26:32.996
in the TextField yet, I can't
actually construct a valid URL.

543
00:26:34.336 --> 00:26:38.156
I've got an implementation ready
that just happens to make use

544
00:26:38.156 --> 00:26:41.046
of the list coordinator
from down in the ListerKit.

545
00:26:43.426 --> 00:26:47.676
And after defining the computed
property I can come down

546
00:26:47.916 --> 00:26:50.026
and make use of it right away.

547
00:26:50.076 --> 00:26:54.636
And you'll notice as Anders
had mentioned earlier we don't

548
00:26:54.696 --> 00:26:56.896
actually have to
explicitly refer to self

549
00:26:56.956 --> 00:26:58.146
when accessing our property.

550
00:26:59.496 --> 00:27:02.986
We set up a few pieces of
information that we've captured

551
00:26:59.496 --> 00:27:02.986
We set up a few pieces of
information that we've captured

552
00:27:02.986 --> 00:27:10.916
for the user so we'll get the
name from our nameFields.text

553
00:27:12.146 --> 00:27:17.446
and the label is
going to be equal

554
00:27:17.446 --> 00:27:22.606
to our selectedLabel
and that looks good.

555
00:27:24.226 --> 00:27:27.026
So now that we've set it up, we
actually want to save this out

556
00:27:27.396 --> 00:27:33.486
and ListInfo provides us
a convenience for that.

557
00:27:33.736 --> 00:27:39.096
And we will createAndSaveWith
CompletionHandler.

558
00:27:39.096 --> 00:27:41.946
And this CompletionHandler
is actually going to call-

559
00:27:41.946 --> 00:27:43.226
...is going to come back to us

560
00:27:43.756 --> 00:27:47.746
with a Bool letting
us know whether

561
00:27:47.746 --> 00:27:49.276
or not the save was successful.

562
00:27:50.396 --> 00:27:53.826
And I could use what code
completion's suggesting here

563
00:27:54.446 --> 00:27:54.996
and fill

564
00:27:54.996 --> 00:28:01.096
out my completionHandler closure
inside of the parentheses.

565
00:27:54.996 --> 00:28:01.096
out my completionHandler closure
inside of the parentheses.

566
00:28:01.096 --> 00:28:04.096
But because it's the
last argument in the call

567
00:28:04.246 --> 00:28:10.206
and because it's a closure and
it's going to be a little long,

568
00:28:10.206 --> 00:28:12.196
I'm actually going to make use

569
00:28:12.196 --> 00:28:14.736
of Swift's trailing
closure syntax.

570
00:28:16.046 --> 00:28:18.246
And in this case I don't
even have to put the parens

571
00:28:18.246 --> 00:28:22.176
after the method call
because our createAndSaveWith

572
00:28:22.176 --> 00:28:23.666
CompletionHandler
actually doesn't take any

573
00:28:23.666 --> 00:28:24.886
other arguments.

574
00:28:26.036 --> 00:28:32.046
So inside of here I will note
the variable name that's being

575
00:28:32.046 --> 00:28:33.336
passed in, which is success.

576
00:28:35.846 --> 00:28:37.146
...having more typing problems

577
00:28:37.146 --> 00:28:38.446
so that you guys can
get a good laugh.

578
00:28:38.756 --> 00:28:42.346
And I'll just check the value
and for now I'm just going

579
00:28:42.376 --> 00:28:45.126
to print a little debug message

580
00:28:45.126 --> 00:28:46.836
to let me know that
it was saved.

581
00:28:50.686 --> 00:28:56.496
And just like Cancel, we want to
get out of the user's way now,

582
00:28:56.496 --> 00:28:58.016
so we'll go ahead and dismiss.

583
00:29:01.176 --> 00:29:05.476
So let's build and run, see

584
00:29:05.476 --> 00:29:07.066
that everything is doing
what we want it to do,

585
00:29:07.066 --> 00:29:09.096
make sure that everything
is good to go.

586
00:29:12.666 --> 00:29:15.396
Bring it up...

587
00:29:15.926 --> 00:29:16.676
Let's see, I need to go

588
00:29:16.676 --> 00:29:18.286
to the hardware store
a little bit later.

589
00:29:20.026 --> 00:29:23.126
And so we'll name our
list hardware, hit return.

590
00:29:23.266 --> 00:29:24.766
Keyboard goes away;
that's a good sign.

591
00:29:25.846 --> 00:29:29.236
The hardware store I
frequent actually uses orange

592
00:29:29.236 --> 00:29:31.096
in the logo rather
heavily, so that's going

593
00:29:31.096 --> 00:29:32.456
to help me remember
what's going on there.

594
00:29:33.186 --> 00:29:34.686
And I'll go ahead and
hit the Save button.

595
00:29:36.836 --> 00:29:39.296
That's not really
what we wanted.

596
00:29:39.296 --> 00:29:42.206
I really wanted to see my
hardware list show up here.

597
00:29:43.076 --> 00:29:44.566
Did it actually save?

598
00:29:44.826 --> 00:29:46.546
I'll go over and check
the debug console.

599
00:29:47.896 --> 00:29:54.266
Indeed it did save and just
for fun I'll actually stop

600
00:29:54.266 --> 00:29:55.486
and run the app again.

601
00:29:56.026 --> 00:29:58.296
And you'll see that it actually
did save and get created.

602
00:29:58.376 --> 00:30:01.436
But we never passed anything
back to our document list

603
00:29:58.376 --> 00:30:01.436
But we never passed anything
back to our document list

604
00:30:02.296 --> 00:30:06.256
to let it know that we created
anything new and we kind

605
00:30:06.256 --> 00:30:08.076
of wanted this to
not be sitting there

606
00:30:08.076 --> 00:30:11.576
and polling the file system
over and over and over again,

607
00:30:11.576 --> 00:30:13.306
just looking for new
files that might show up.

608
00:30:14.526 --> 00:30:16.536
So for our purposes,
we're going to take a page

609
00:30:16.536 --> 00:30:19.196
out of UITextField's book
and we're actually going

610
00:30:19.196 --> 00:30:22.516
to use Delegation to
pass information back

611
00:30:22.516 --> 00:30:23.976
to the ViewController
that presented us.

612
00:30:25.166 --> 00:30:28.896
The first step there is
usually to define a protocol

613
00:30:29.746 --> 00:30:31.476
that we expect our
delegate to conform to.

614
00:30:32.416 --> 00:30:37.816
And in Swift we can do that just
as easily as declaring a class

615
00:30:37.816 --> 00:30:39.086
or a struct or anything else.

616
00:30:39.516 --> 00:30:40.566
We'll just start with the

617
00:30:40.566 --> 00:30:44.896
"protocol" keyword (that I
actually spelled correctly)

618
00:30:46.236 --> 00:30:49.726
and NewListControllerDelegate.

619
00:30:53.096 --> 00:30:57.886
And I already have a method that
I want my delegate to conform

620
00:30:57.886 --> 00:31:00.946
to that I've prepared that
just takes a new ListController

621
00:30:57.886 --> 00:31:00.946
to that I've prepared that
just takes a new ListController

622
00:31:01.326 --> 00:31:05.376
and a ListInfo letting it
know what's been created

623
00:31:05.376 --> 00:31:06.006
and done over here.

624
00:31:06.666 --> 00:31:10.226
Now at this point this protocol
is visible to my Swift code

625
00:31:11.026 --> 00:31:13.856
but I want to make sure that
my Objective-C code can see it

626
00:31:13.856 --> 00:31:14.296
as well.

627
00:31:15.676 --> 00:31:23.386
To do that it's as simple as
adding an attribute at Obj-C

628
00:31:23.386 --> 00:31:25.326
and this is going
to go ahead and say,

629
00:31:25.326 --> 00:31:27.076
"even though this
is all Swift here,

630
00:31:27.406 --> 00:31:29.146
we do want to make
this available

631
00:31:30.346 --> 00:31:32.306
to Objective-C a
little bit later on."

632
00:31:33.856 --> 00:31:38.066
So now that I have a delegate
protocol I'll actually define a

633
00:31:38.066 --> 00:31:42.046
delegate and we'll make it weak

634
00:31:42.346 --> 00:31:45.136
because we don't
really want to own it.

635
00:31:45.136 --> 00:31:46.536
We don't want to
extend its lifetime.

636
00:31:48.776 --> 00:31:54.036
And I can declare
it as being just

637
00:31:54.036 --> 00:31:55.756
of the NewListControllerDelegate
type.

638
00:31:55.826 --> 00:32:00.306
I don't have to do something
like ID and angle brackets

639
00:31:55.826 --> 00:32:00.306
I don't have to do something
like ID and angle brackets

640
00:32:00.306 --> 00:32:02.336
around my protocol to
indicate what's going on here.

641
00:32:02.426 --> 00:32:06.846
I can simply have a property
that is of this delegate type.

642
00:32:07.676 --> 00:32:08.886
It's going to be optional

643
00:32:08.886 --> 00:32:11.206
because I may not
have a delegate.

644
00:32:13.356 --> 00:32:16.986
So now that we've defined a
delegate property I think maybe

645
00:32:16.986 --> 00:32:18.636
we ought to do something
a little more useful

646
00:32:18.946 --> 00:32:20.776
than printing a debug
statement down here.

647
00:32:20.776 --> 00:32:24.326
And for that we're going to
reach out to our delegate

648
00:32:26.096 --> 00:32:30.806
and I'm going to make use
of another Swift feature,

649
00:32:31.376 --> 00:32:33.096
which is optional chaining.

650
00:32:33.596 --> 00:32:34.986
So the delegate is an optional.

651
00:32:35.566 --> 00:32:37.436
It may or may not have a value.

652
00:32:39.376 --> 00:32:42.216
By adding a question mark
here before actually calling

653
00:32:42.216 --> 00:32:46.116
out to the method that we want
to invoke, I'm going to be able

654
00:32:46.116 --> 00:32:48.126
to say, "IF I have a delegate --

655
00:32:48.226 --> 00:32:51.186
if there is a value
there -- make this call.

656
00:32:52.146 --> 00:32:54.076
If there's not, don't
do anything."

657
00:32:56.516 --> 00:33:01.846
[ Applause ]

658
00:32:56.516 --> 00:33:01.846
[ Applause ]

659
00:33:02.346 --> 00:33:04.566
And now I'm trying to remember
what the name of it was.

660
00:33:04.626 --> 00:33:05.186
Ah, there we go.

661
00:33:06.586 --> 00:33:12.376
Pass my self and the
ListInfo that we just created.

662
00:33:15.786 --> 00:33:18.016
(REALLY not much of a typist,
in case you can't tell.)

663
00:33:18.546 --> 00:33:24.016
And at this point we've wrapped
up the Swift implementation

664
00:33:24.486 --> 00:33:26.696
of this, but we've
defined this delegate.

665
00:33:26.736 --> 00:33:29.826
Now we actually need our
Objective-C code to be able

666
00:33:29.826 --> 00:33:31.866
to see the Swift code
we've just put together

667
00:33:33.026 --> 00:33:33.906
and interact with it.

668
00:33:35.086 --> 00:33:39.006
To do that I'm going to head
back over to the document-

669
00:33:39.556 --> 00:33:42.006
...the, the controller
for the document list,

670
00:33:43.336 --> 00:33:49.276
and inside of here we're
brought to- ...I mean,

671
00:33:49.276 --> 00:33:50.986
what comes to your
mind is the fact

672
00:33:50.986 --> 00:33:55.136
that the way I make one object
in Objective-C available

673
00:33:55.136 --> 00:33:57.716
and visible to another object
is by importing its header.

674
00:33:58.676 --> 00:34:01.196
Well, with Swift we
don't have headers.

675
00:33:58.676 --> 00:34:01.196
Well, with Swift we
don't have headers.

676
00:34:02.106 --> 00:34:05.306
We think that's a good thing
within Swift, but we've got

677
00:34:05.306 --> 00:34:09.626
to find a way to bridge the
gap back to Objective-C.

678
00:34:10.376 --> 00:34:14.176
And so in that case Xcode's
got our back and is going

679
00:34:14.176 --> 00:34:17.426
to provide us with
a generated header

680
00:34:18.585 --> 00:34:21.815
that contains the entirety
of our Swift interface.

681
00:34:24.476 --> 00:34:26.376
Being generated,
obviously it has

682
00:34:26.376 --> 00:34:30.476
to have a well-constructed
naming scheme, and that's going

683
00:34:30.516 --> 00:34:32.216
to be our product name --

684
00:34:33.216 --> 00:34:38.656
which in this case
is "Lister-Swift.h".

685
00:34:39.996 --> 00:34:42.456
And so this is a generated
header, so I'm going to go ahead

686
00:34:42.456 --> 00:34:44.096
and take the time to
build, to make sure

687
00:34:44.096 --> 00:34:48.856
that we've got the most
up-to-date items in it.

688
00:34:49.446 --> 00:34:55.146
And after importing that we will
come over here and we're going

689
00:34:55.146 --> 00:34:56.946
to go through basically
the same process

690
00:34:56.946 --> 00:35:00.746
that you would ordinarily to
implement any of the Cocoa

691
00:34:56.946 --> 00:35:00.746
that you would ordinarily to
implement any of the Cocoa

692
00:35:00.746 --> 00:35:03.376
or Cocoa Touch delegates
on your own class.

693
00:35:03.876 --> 00:35:10.946
We'll add our protocol
conformance and we can pull

694
00:35:10.946 --> 00:35:12.296
in our
NewListControllerDelegate.

695
00:35:13.906 --> 00:35:18.616
I'm going to choose to
use the jump bar to head

696
00:35:18.616 --> 00:35:20.846
down to an appropriate
place I feel

697
00:35:20.946 --> 00:35:22.476
to go ahead and implement this.

698
00:35:25.086 --> 00:35:28.486
And as I code complete here

699
00:35:30.896 --> 00:35:34.396
with the NewListController
didCreateListInfo, you'll notice

700
00:35:34.396 --> 00:35:37.616
that even though we declared
this completely in within Swift,

701
00:35:37.616 --> 00:35:42.396
what we get is a syntax
that matches what I'd expect

702
00:35:42.396 --> 00:35:45.636
from Objective-C so that
everything still feels natural;

703
00:35:45.636 --> 00:35:48.596
everything feels like a first
class citizen in its place.

704
00:35:51.286 --> 00:35:53.336
Happen to have the
implementation...

705
00:35:56.406 --> 00:35:57.806
Wellllll...

706
00:35:58.156 --> 00:36:00.616
The implementation of
the last thing ready.

707
00:35:58.156 --> 00:36:00.616
The implementation of
the last thing ready.

708
00:36:01.566 --> 00:36:03.956
In this case what we're really
doing is just updating our data

709
00:36:03.956 --> 00:36:05.916
source and then refreshing
the TableView

710
00:36:05.916 --> 00:36:07.226
with a little bit
of new information.

711
00:36:09.736 --> 00:36:13.226
And the very last thing
here, or the final step,

712
00:36:13.326 --> 00:36:15.596
is that we actually
need this ViewController

713
00:36:15.596 --> 00:36:19.686
to make itself the delegate
for our new ListController.

714
00:36:21.146 --> 00:36:22.616
We're using a modal segue,

715
00:36:22.976 --> 00:36:25.016
so why not do it
in prepareForSegue?

716
00:36:26.456 --> 00:36:28.726
Down here we'll just
check to make sure

717
00:36:28.726 --> 00:36:29.856
that it's the right segue.

718
00:36:30.336 --> 00:36:34.136
We'll grab the newListController
and we'll set ourselves --

719
00:36:34.276 --> 00:36:36.356
in this case our
ListDocumentsViewController --

720
00:36:36.906 --> 00:36:37.606
as the delegate.

721
00:36:39.536 --> 00:36:46.936
At this point I fully expect
things to do what I want.

722
00:36:51.586 --> 00:37:01.366
And... Coming up with another
list, "WWDC Must Haves".

723
00:36:51.586 --> 00:37:01.366
And... Coming up with another
list, "WWDC Must Haves".

724
00:37:03.336 --> 00:37:04.646
Not really sure what
those are yet,

725
00:37:04.676 --> 00:37:06.426
but I'm pretty sure I'm
going to think something up.

726
00:37:07.876 --> 00:37:11.056
And this time it
actually comes through,

727
00:37:11.436 --> 00:37:13.326
shows up in our
DocumentViewController

728
00:37:13.326 --> 00:37:16.986
and just for, you know,
proof's sake I can come into it;

729
00:37:16.986 --> 00:37:17.916
I can change it around.

730
00:37:17.916 --> 00:37:19.756
I really like this salmon
color that they're using

731
00:37:19.756 --> 00:37:21.106
for the Apple badges this year.

732
00:37:21.106 --> 00:37:22.976
So I'm going to actually
pick that

733
00:37:23.776 --> 00:37:28.976
and that's integrating our code.

734
00:37:29.516 --> 00:37:36.586
[ Applause ]

735
00:37:37.086 --> 00:37:39.506
And just to head back to
the slides for a second,

736
00:37:41.106 --> 00:37:44.786
what we've just seen here
is that it's very easy

737
00:37:44.786 --> 00:37:47.326
to expose our Objective-C
code to Swift.

738
00:37:47.626 --> 00:37:49.766
Simply import whatever
headers you want

739
00:37:50.156 --> 00:37:52.736
into the bridging header and
they'll be made available

740
00:37:52.736 --> 00:37:53.986
to the Swift in your target.

741
00:37:55.696 --> 00:37:59.106
We defined a protocol in
Swift which was as easy

742
00:37:59.106 --> 00:38:00.736
as defining a protocol
in Objective-C.

743
00:37:59.106 --> 00:38:00.736
as defining a protocol
in Objective-C.

744
00:38:02.146 --> 00:38:06.646
And finally, we've exposed
that protocol and the class

745
00:38:06.646 --> 00:38:08.846
that we just created
in Swift back

746
00:38:08.846 --> 00:38:10.456
to the Objective-C
code in our target.

747
00:38:10.456 --> 00:38:13.206
And we actually didn't
have to do anything there.

748
00:38:13.316 --> 00:38:16.256
Xcode did the generation
of the header

749
00:38:16.626 --> 00:38:17.936
that provided that interface.

750
00:38:19.216 --> 00:38:25.176
So just to reiterate a little
bit more when we want to go

751
00:38:25.176 --> 00:38:27.326
from our Objective-C headers

752
00:38:27.676 --> 00:38:31.636
and make our Objective-C objects
available to Swift we're going

753
00:38:31.636 --> 00:38:32.466
through the bridging header.

754
00:38:33.676 --> 00:38:36.156
This is going to be
created- ...Xcode will offer

755
00:38:36.156 --> 00:38:37.656
to create this for
you automatically

756
00:38:37.696 --> 00:38:40.896
when you add a Swift file to
an existing Objective-C target

757
00:38:41.506 --> 00:38:44.186
or an Objective-C file to
an existing Swift target.

758
00:38:46.166 --> 00:38:52.686
When we want to get our
Swift interface exposed

759
00:38:52.686 --> 00:38:54.426
to our Objective-C
implementation,

760
00:38:55.036 --> 00:38:56.966
there we're looking at
the generated header

761
00:38:56.966 --> 00:38:59.456
that Xcode provides and
this is going to be named

762
00:38:59.456 --> 00:39:02.926
after our product
and it's going to be

763
00:38:59.456 --> 00:39:02.926
after our product
and it's going to be

764
00:39:02.926 --> 00:39:05.576
"our product name
dash Swift dot h".

765
00:39:07.076 --> 00:39:09.256
One last thing to
remember about these,

766
00:39:12.316 --> 00:39:17.696
is that the bridging header
is created for you by Xcode

767
00:39:18.116 --> 00:39:20.346
but you own it from
that point forward.

768
00:39:20.526 --> 00:39:21.916
So it should be something
you check

769
00:39:21.916 --> 00:39:23.366
into your source control system.

770
00:39:23.826 --> 00:39:28.636
It should be something that
you maintain, you manage

771
00:39:28.976 --> 00:39:31.866
and it's there so
that you only expose

772
00:39:31.866 --> 00:39:34.186
to Swift what you want
to expose to Swift.

773
00:39:35.096 --> 00:39:37.206
In the case of the generated
header, it's just that.

774
00:39:37.386 --> 00:39:39.466
It's generated as part
of the build process.

775
00:39:39.466 --> 00:39:42.966
It's going to contain your
com- ...the complete interface

776
00:39:43.656 --> 00:39:46.306
for the Swift files
within your target.

777
00:39:46.736 --> 00:39:48.186
And those are going to
be readily available

778
00:39:48.186 --> 00:39:50.346
to Objective-C simply by
importing that header.

779
00:39:51.896 --> 00:39:55.076
So at this point to talk
with you a little bit more

780
00:39:55.106 --> 00:39:59.226
about what you can do with
frameworks in your product-

781
00:39:59.526 --> 00:40:02.276
...in your projects, I'd like to
invite my colleague Jordan up.

782
00:39:59.526 --> 00:40:02.276
...in your projects, I'd like to
invite my colleague Jordan up.

783
00:40:03.516 --> 00:40:06.126
[ Applause ]

784
00:40:06.626 --> 00:40:07.076
>> Thanks Dave.

785
00:40:09.246 --> 00:40:11.746
Alright, so we've seen
how easy it is to deal

786
00:40:11.746 --> 00:40:13.756
with integrating your Swift code

787
00:40:13.756 --> 00:40:15.786
into an existing
Objective-C app.

788
00:40:16.776 --> 00:40:19.046
And Xcode pretty much takes
care of all the details for you.

789
00:40:19.046 --> 00:40:20.426
It's available in
Interface Builder.

790
00:40:20.426 --> 00:40:21.906
It's going to show
up in the simulator.

791
00:40:21.906 --> 00:40:23.856
Everything works just fine.

792
00:40:24.046 --> 00:40:25.696
So I'd like to move a
step down in the hierarchy

793
00:40:25.696 --> 00:40:26.706
and look at the framework.

794
00:40:31.706 --> 00:40:34.306
So at this point we've been
working pretty much the entire

795
00:40:34.306 --> 00:40:36.866
time up in this Lister
part of the application,

796
00:40:37.066 --> 00:40:38.596
which is the actual
application target.

797
00:40:39.206 --> 00:40:41.226
Now we're going to
move down to ListerKit

798
00:40:41.226 --> 00:40:44.206
which handles the model and the
object graph for this target.

799
00:40:44.716 --> 00:40:47.036
And specifically we're going
to add a new functionality:

800
00:40:47.266 --> 00:40:50.356
the ability to add
attachments to every list item,

801
00:40:50.676 --> 00:40:54.646
something like, oh, a
photo or a voice recording.

802
00:40:54.646 --> 00:40:58.266
To do this in Objective-C
you would create a new class,

803
00:40:58.606 --> 00:41:01.226
add it to your object graph
by adding a new property

804
00:40:58.606 --> 00:41:01.226
add it to your object graph
by adding a new property

805
00:41:01.346 --> 00:41:04.056
and then setting up an interface
to mange it and we're going

806
00:41:04.056 --> 00:41:06.156
to do the exact same
thing but using Swift.

807
00:41:06.156 --> 00:41:10.076
So I'll start here by
going to File, New File

808
00:41:10.076 --> 00:41:13.546
and this time let's use the
Cocoa Touch class template.

809
00:41:13.546 --> 00:41:17.346
I can name this
APLListItemAttachment.

810
00:41:18.226 --> 00:41:21.096
Subclass of NSObject and the
language, of course, is Swift.

811
00:41:22.786 --> 00:41:23.426
I make sure that it's

812
00:41:23.426 --> 00:41:25.506
in the ListerKit
target and click Create.

813
00:41:25.506 --> 00:41:29.826
You notice here that
Xcode did not offer

814
00:41:29.826 --> 00:41:31.446
to create a bridging
header for us.

815
00:41:31.956 --> 00:41:34.666
This is because we're working
with a framework target.

816
00:41:35.286 --> 00:41:37.576
In a framework you
already have a header

817
00:41:37.576 --> 00:41:39.826
that specifies the entire
contents of the framework.

818
00:41:40.336 --> 00:41:41.416
That's your umbrella header.

819
00:41:42.236 --> 00:41:43.986
So when you're working
with a framework target

820
00:41:43.986 --> 00:41:46.536
in Swift everything
that's available

821
00:41:46.536 --> 00:41:49.116
in your umbrella header will
automatically be visible

822
00:41:49.116 --> 00:41:51.586
to the Swift code,
no work required.

823
00:41:54.616 --> 00:41:56.676
So we're going to want
attachment objects to persist.

824
00:41:56.826 --> 00:41:59.396
So the very first thing I'm
going to do is add a conformance

825
00:41:59.396 --> 00:42:02.376
to a standard Cocoa
Touch protocol, NSCoding.

826
00:41:59.396 --> 00:42:02.376
to a standard Cocoa
Touch protocol, NSCoding.

827
00:42:03.906 --> 00:42:05.516
Attachments are made
up of two things:

828
00:42:05.836 --> 00:42:08.686
their data (which will I
represent using NSData)

829
00:42:08.906 --> 00:42:09.506
and their type.

830
00:42:10.056 --> 00:42:12.306
For types of data
Cocoa Touch likes

831
00:42:12.346 --> 00:42:16.066
to use uniform type identifiers,
which are a very general way

832
00:42:16.066 --> 00:42:17.696
to represent file and data types

833
00:42:17.696 --> 00:42:19.996
that the user just
stored as Strings.

834
00:42:21.646 --> 00:42:24.486
The next thing to do here
is to declare an initializer

835
00:42:24.696 --> 00:42:27.746
and that just takes the
data and type from outside

836
00:42:27.746 --> 00:42:30.166
and will assign them
into our own fields.

837
00:42:30.396 --> 00:42:32.816
But we do need to be
careful because the data

838
00:42:32.816 --> 00:42:36.056
that we are given might
be an NS mutable data

839
00:42:36.056 --> 00:42:38.086
and somebody might
try to change it

840
00:42:38.086 --> 00:42:39.676
after they've created
our attachment.

841
00:42:40.306 --> 00:42:43.556
So in order to work around this,
we need to call the copy method.

842
00:42:44.786 --> 00:42:49.006
However, copy returns
ID in Objective-C

843
00:42:49.246 --> 00:42:50.496
and in Swift that's
going to come

844
00:42:50.546 --> 00:42:52.406
through as the Any object type.

845
00:42:53.276 --> 00:42:57.686
We can't go directly from any
object to NSData in Swift,

846
00:42:58.096 --> 00:42:59.776
because that's not
guaranteed to be safe.

847
00:43:00.306 --> 00:43:00.996
So instead, we have

848
00:43:00.996 --> 00:43:03.966
to explicitly tell the
compiler to do a cast here.

849
00:43:03.966 --> 00:43:07.426
And this is important, because
if anybody ever implements the

850
00:43:07.426 --> 00:43:09.006
copy method incorrectly

851
00:43:09.706 --> 00:43:12.676
and doesn't return an NSData
we would much rather find

852
00:43:12.676 --> 00:43:15.766
out about it right here in the
initializer than crash somewhere

853
00:43:15.766 --> 00:43:17.296
down the line when
we try to use it.

854
00:43:18.696 --> 00:43:21.656
On the other hand, we can
just assign the type directly

855
00:43:21.906 --> 00:43:25.456
and this is because
strings in Swift are values.

856
00:43:26.336 --> 00:43:29.046
Unlike NSString, every
Swift string has an

857
00:43:29.046 --> 00:43:30.226
independent existence.

858
00:43:30.496 --> 00:43:33.356
And when you assign across
using the equal operator you get

859
00:43:33.356 --> 00:43:34.506
independent strings.

860
00:43:34.826 --> 00:43:36.406
So, whatever somebody
does over here

861
00:43:36.406 --> 00:43:39.666
to their string won't affect
your string over here.

862
00:43:40.516 --> 00:43:44.596
[ Applause ]

863
00:43:45.096 --> 00:43:47.456
So next I need to implement
the NSCoding protocol.

864
00:43:47.516 --> 00:43:48.906
(Let's close this
for a bit more room.)

865
00:43:49.906 --> 00:43:51.576
And here we can co- (ah!)

866
00:43:52.186 --> 00:43:55.026
...code complete here, no
code completion, awesome.

867
00:43:57.036 --> 00:44:01.596
So here I'm implementing
the NSCoder initializer

868
00:43:57.036 --> 00:44:01.596
So here I'm implementing
the NSCoder initializer

869
00:44:01.926 --> 00:44:03.706
and you'll notice something
a little funny here.

870
00:44:04.006 --> 00:44:08.596
In Objective-C we'd have the
method named initWithCoder.

871
00:44:08.906 --> 00:44:11.296
But in Swift we have an
initializer that's just

872
00:44:11.296 --> 00:44:12.286
init coder.

873
00:44:13.236 --> 00:44:16.096
So in order for more
consistency in the Swift world,

874
00:44:16.556 --> 00:44:19.316
where object creation syntax
is a little different,

875
00:44:19.936 --> 00:44:23.246
an init method from
Objective-C that starts with

876
00:44:23.246 --> 00:44:27.936
"initWith" will come into
Swift with the "With" dropped.

877
00:44:28.166 --> 00:44:30.836
This ensures a consistent
world with Objective-C.

878
00:44:33.956 --> 00:44:36.086
Sure, the implementation of
this is pretty much the same

879
00:44:36.086 --> 00:44:37.066
as what you'd expect.

880
00:44:37.486 --> 00:44:39.326
Just call decodeObjectForKey

881
00:44:39.616 --> 00:44:42.436
and again explicitly
downcasting to the type we want.

882
00:44:42.786 --> 00:44:44.986
If somebody hands us a
bad archive we'll find

883
00:44:44.986 --> 00:44:48.266
out about it now rather
than crashing later on.

884
00:44:50.166 --> 00:44:51.106
Finally, the last thing

885
00:44:51.106 --> 00:44:54.086
to do here is implement
the encodeWithCoder method

886
00:44:54.686 --> 00:44:57.716
and this one does not
get any name changes

887
00:44:57.756 --> 00:45:00.746
because that is limited
specifically to initializers.

888
00:44:57.756 --> 00:45:00.746
because that is limited
specifically to initializers.

889
00:45:01.496 --> 00:45:03.816
And the implementation of
this, again, is very simple.

890
00:45:03.856 --> 00:45:07.666
We call encodeObjectForKey with
both the data and the type.

891
00:45:09.316 --> 00:45:12.316
And that's it; this is an
entire Swift model object

892
00:45:12.316 --> 00:45:13.956
and it fits on one slide.

893
00:45:13.956 --> 00:45:17.536
I didn't do anything crazy
or confusing here beyond some

894
00:45:17.536 --> 00:45:20.856
of the things you need to do to
be a good Cocoa Touch citizen.

895
00:45:22.516 --> 00:45:27.586
[ Applause ]

896
00:45:28.086 --> 00:45:30.396
The next step, of course, is to
add this into our object graph.

897
00:45:30.736 --> 00:45:32.276
So I go back to our
Objective-C header

898
00:45:32.276 --> 00:45:34.026
and now we have a
bit of a problem.

899
00:45:34.296 --> 00:45:36.976
Because last time that we
wanted to access Swift code

900
00:45:36.976 --> 00:45:40.836
from Objective-C what we did
is import the generated header

901
00:45:40.836 --> 00:45:43.266
into the Objective-C file.

902
00:45:43.266 --> 00:45:45.086
But we can't do that here

903
00:45:45.086 --> 00:45:47.346
because the generated
header depends on the Swift.

904
00:45:47.786 --> 00:45:50.816
And the Swift reads the
entire public contents

905
00:45:50.816 --> 00:45:52.796
of our framework (via
the umbrella header)

906
00:45:53.136 --> 00:45:54.976
and that includes this
header right here.

907
00:45:55.946 --> 00:45:58.376
So instead, I use
exactly the same mechanism

908
00:45:58.376 --> 00:45:59.816
that I have in Objective-C.

909
00:46:00.306 --> 00:46:01.696
This is what we use
to break cycles.

910
00:46:01.696 --> 00:46:04.326
It's a forward declaration
using @class

911
00:46:05.196 --> 00:46:07.546
and I can forward-declare
the Swift class just

912
00:46:07.546 --> 00:46:09.206
like I would any
Objective-C class.

913
00:46:09.806 --> 00:46:11.786
And now I am perfectly able

914
00:46:11.786 --> 00:46:14.596
to create a property here
using the attachment.

915
00:46:16.806 --> 00:46:19.816
The last thing to do, of course,
is to update the implementation

916
00:46:19.816 --> 00:46:23.416
of the list item to actually
handle the attachment and for

917
00:46:23.416 --> 00:46:25.556
that I'm going to import
the generated header now

918
00:46:25.556 --> 00:46:27.136
that we're in a .m file.

919
00:46:27.866 --> 00:46:30.936
And because this is a framework,
and the generated header is part

920
00:46:30.936 --> 00:46:33.256
of our public interface,
we are going

921
00:46:33.256 --> 00:46:35.086
to use framework
syntax to import it.

922
00:46:36.826 --> 00:46:39.466
All that's left to do here now
is to update the implementation

923
00:46:39.466 --> 00:46:41.866
of this class so that
we actually handle this

924
00:46:41.896 --> 00:46:42.596
new property.

925
00:46:42.766 --> 00:46:45.866
So that means having an
extra key for encoding here.

926
00:46:48.446 --> 00:46:51.446
Setting the attachment
explicitly to nil,

927
00:46:54.236 --> 00:46:56.466
making sure that we can
encode and decode it.

928
00:46:56.466 --> 00:46:59.486
And while I'm doing this
I'd like you all to note

929
00:46:59.486 --> 00:47:01.436
that this is exactly
what you'd be doing

930
00:46:59.486 --> 00:47:01.436
that this is exactly
what you'd be doing

931
00:47:01.436 --> 00:47:04.266
if we had implemented the
attachment class in Objective-C.

932
00:47:04.576 --> 00:47:06.356
There's nothing surprising
going on here.

933
00:47:06.356 --> 00:47:08.526
It's exactly what you
would have done before.

934
00:47:11.366 --> 00:47:14.226
Finally we do need to make sure
that we update the copy method

935
00:47:14.226 --> 00:47:15.866
so that when we copy
a list item,

936
00:47:16.146 --> 00:47:18.826
that we actually do get a copy
of the attachment as well.

937
00:47:20.456 --> 00:47:21.206
(Square bracket.)

938
00:47:22.186 --> 00:47:25.846
And since we made our
attachments immutable using that

939
00:47:25.846 --> 00:47:27.796
"let" keyword to
define the properties,

940
00:47:28.366 --> 00:47:30.526
we can just assign
this across directly.

941
00:47:30.526 --> 00:47:32.516
We don't need to do any
special copying to ensure

942
00:47:32.516 --> 00:47:35.466
that they are independent and
not going to change on us.

943
00:47:36.836 --> 00:47:38.256
So that's it; that's
the entire model.

944
00:47:38.256 --> 00:47:41.016
And now you're probably
thinking, "Oh great,

945
00:47:41.016 --> 00:47:43.336
here we go again, back
to Interface Builder

946
00:47:43.336 --> 00:47:46.556
to define a new layout, a new
ViewController and add a bunch

947
00:47:46.556 --> 00:47:49.036
of outlets and actions and hook
everything up all over again.

948
00:47:49.036 --> 00:47:50.026
We already saw that!"

949
00:47:51.486 --> 00:47:52.106
And you'd be right...

950
00:47:52.106 --> 00:47:54.876
except that, we're
actually really lucky here.

951
00:47:55.266 --> 00:47:57.356
The three of us work in
a department with lots

952
00:47:57.356 --> 00:47:59.456
of other great people and
another team is working

953
00:47:59.456 --> 00:48:01.366
on a very similar app
that needs to deal

954
00:47:59.456 --> 00:48:01.366
on a very similar app
that needs to deal

955
00:48:01.366 --> 00:48:02.486
with these kind of attachments.

956
00:48:03.306 --> 00:48:04.796
And because their app is new,

957
00:48:04.796 --> 00:48:06.316
they've written it
entirely in Swift.

958
00:48:06.856 --> 00:48:10.736
But they've also factored out
their attachment ViewController

959
00:48:11.076 --> 00:48:14.856
into a separate framework,
which is a new feature of iOS 8.

960
00:48:15.176 --> 00:48:17.556
So we're going to use their
framework, written entirely

961
00:48:17.556 --> 00:48:19.956
in Swift, to implement
the interface that deals

962
00:48:19.956 --> 00:48:21.006
with this model object.

963
00:48:24.396 --> 00:48:26.606
To start off here I'm going
to go to the bottom here

964
00:48:26.606 --> 00:48:28.506
and check the plus,
yet another way

965
00:48:28.506 --> 00:48:29.996
to add new files to our target.

966
00:48:31.476 --> 00:48:34.946
Choose "Add Files Here" and I'm
going to the media view folder

967
00:48:34.946 --> 00:48:37.596
to select their project,
mediaviewer.xcodeproj.

968
00:48:39.056 --> 00:48:42.236
Once I have this in my project
then I can just add this

969
00:48:42.236 --> 00:48:46.936
to our target by going to our
own project, selecting the list

970
00:48:46.936 --> 00:48:50.336
or target and in the embedded
binary section clicking

971
00:48:50.336 --> 00:48:50.806
the plus.

972
00:48:51.246 --> 00:48:53.256
This lets us add the
framework directly.

973
00:48:54.496 --> 00:48:55.556
Notice what we just did there.

974
00:48:55.556 --> 00:48:59.966
This is a new feature of iOS 8
to allow embedded frameworks.

975
00:49:00.106 --> 00:49:02.426
Of course, if you're a Mac
programmer you're probably used

976
00:49:02.426 --> 00:49:03.136
to this by now.

977
00:49:04.566 --> 00:49:06.846
These embedded frameworks
need to be made available

978
00:49:06.846 --> 00:49:09.806
to Interface Builder, to
other classes in your project,

979
00:49:10.996 --> 00:49:13.866
linked into your binary so
that you can actually run it,

980
00:49:14.196 --> 00:49:15.846
and copied into the app so that

981
00:49:15.846 --> 00:49:17.306
when other people
download it they don't need

982
00:49:17.306 --> 00:49:18.756
to download the framework
separately.

983
00:49:19.536 --> 00:49:22.506
And Xcode 6 did all of
that for us without asking

984
00:49:22.506 --> 00:49:25.366
if the framework was written
in Objective-C or Swift

985
00:49:25.716 --> 00:49:27.046
or a mixture of the both.

986
00:49:28.516 --> 00:49:33.176
[ Applause ]

987
00:49:33.676 --> 00:49:34.906
So in our storyboard now.

988
00:49:34.906 --> 00:49:36.886
We can zoom out, and...

989
00:49:36.886 --> 00:49:39.266
let's bring up the
library here to bring

990
00:49:39.266 --> 00:49:40.666
out a new ViewController.

991
00:49:41.316 --> 00:49:43.546
And in this case I'm
going to set the class

992
00:49:43.546 --> 00:49:46.096
of that ViewController to
be the media ViewController

993
00:49:46.096 --> 00:49:46.926
from the other framework.

994
00:49:47.136 --> 00:49:49.516
And you'll see the module
field here populates as well;

995
00:49:49.516 --> 00:49:50.666
this is that feature of Swift

996
00:49:50.666 --> 00:49:53.486
that keeps different
framework classes from stepping

997
00:49:53.486 --> 00:49:55.466
on each other at runtime,
even without a prefix.

998
00:49:57.476 --> 00:49:59.476
We don't need the view that
Interface Builder provides

999
00:49:59.476 --> 00:50:01.986
for us, because it already
has one in its own framework.

1000
00:49:59.476 --> 00:50:01.986
for us, because it already
has one in its own framework.

1001
00:50:02.026 --> 00:50:03.116
So I can just delete that.

1002
00:50:03.816 --> 00:50:05.826
And now, to make sure that
we can actually get to this,

1003
00:50:06.076 --> 00:50:10.366
I'll select the tables out here
and drag over- ...control-drag,

1004
00:50:10.366 --> 00:50:11.206
to create a new segue.

1005
00:50:11.206 --> 00:50:17.906
Make that a push segue and we'll
give that a name: "attachment".

1006
00:50:19.576 --> 00:50:21.106
Now we've set up
Interface Builder.

1007
00:50:21.266 --> 00:50:23.346
We've set up the interface
and the model object.

1008
00:50:23.346 --> 00:50:23.946
It's time to put them together.

1009
00:50:24.086 --> 00:50:27.346
And once again we're going
to use a delegate for that.

1010
00:50:28.636 --> 00:50:30.156
So let's go to our
Objective-C code.

1011
00:50:30.156 --> 00:50:32.306
This is the code that
displays the lists.

1012
00:50:32.356 --> 00:50:36.056
At the top here we have
the NotificationCenter

1013
00:50:36.686 --> 00:50:39.766
which is a system framework
and the import for ListerKit,

1014
00:50:39.816 --> 00:50:42.296
which is our own model
framework within this project.

1015
00:50:42.726 --> 00:50:45.006
I can add a third
import for MediaViewer,

1016
00:50:45.196 --> 00:50:46.966
which is the framework
in the other project.

1017
00:50:47.946 --> 00:50:49.646
I'm going to hit Build
again, to make sure

1018
00:50:49.646 --> 00:50:51.276
that everything is
compiled and up to date.

1019
00:50:51.786 --> 00:50:53.336
And now I get code completion

1020
00:50:53.546 --> 00:50:55.186
for the MediaViewerDelegate
protocol.

1021
00:50:57.866 --> 00:51:00.246
Just like before I'm going
to jump down to a nice,

1022
00:50:57.866 --> 00:51:00.246
Just like before I'm going
to jump down to a nice,

1023
00:51:00.296 --> 00:51:02.496
convenient place in the
application to implement this.

1024
00:51:02.556 --> 00:51:03.386
And the first thing I'm going

1025
00:51:03.386 --> 00:51:05.826
to do is implement a
little helper method here

1026
00:51:05.826 --> 00:51:07.386
that just returns
the selectedItem.

1027
00:51:08.436 --> 00:51:11.186
Again, even though this is
sort of details of, like,

1028
00:51:11.186 --> 00:51:13.966
how the application currently
works, I want you to remember

1029
00:51:13.966 --> 00:51:16.576
that everything we're doing
here is exactly what you do

1030
00:51:16.576 --> 00:51:17.556
in Objective-C.

1031
00:51:17.776 --> 00:51:20.676
From the perspective of this
code you can't really tell

1032
00:51:20.676 --> 00:51:22.836
that the entire framework
was written in Swift.

1033
00:51:24.406 --> 00:51:26.556
We even get code completion
for the delegate method here.

1034
00:51:26.556 --> 00:51:29.406
MediaViewController
didChooseNewMedia, type.

1035
00:51:30.196 --> 00:51:32.796
And now that we have all of
this set up it's really easy

1036
00:51:32.796 --> 00:51:35.296
to add an attachment to the
currently selected item.

1037
00:51:37.536 --> 00:51:39.906
So here we say that
its attachment is going

1038
00:51:39.906 --> 00:51:41.886
to be a new attachment
that we create now

1039
00:51:42.536 --> 00:51:44.846
by calling alloc initWithData.

1040
00:51:45.796 --> 00:51:46.566
Wait a second!

1041
00:51:46.636 --> 00:51:48.376
We designed this
attachment class in Swift,

1042
00:51:48.376 --> 00:51:51.556
and it had an initializer
named "initData, type".

1043
00:51:52.296 --> 00:51:56.286
But in Objective-C it's showing
up as "initWITHData, type".

1044
00:51:56.326 --> 00:51:59.226
So you see that this name
translation works both ways

1045
00:51:59.226 --> 00:52:00.586
so that you have
a consistent world

1046
00:51:59.226 --> 00:52:00.586
so that you have
a consistent world

1047
00:52:00.586 --> 00:52:02.806
in Swift and in Objective-C.

1048
00:52:03.516 --> 00:52:08.656
[ Applause ]

1049
00:52:09.156 --> 00:52:10.816
I'll do a bit of
housekeeping here to make sure

1050
00:52:10.816 --> 00:52:12.396
that we update our backing store

1051
00:52:12.856 --> 00:52:15.206
and now we have everything
set up here.

1052
00:52:15.316 --> 00:52:18.466
All that's left to do, just
like Dave did, is set ourselves

1053
00:52:18.466 --> 00:52:20.996
as the delegate for the
MediaViewController.

1054
00:52:21.536 --> 00:52:23.966
So this starts off the same,
where we set the attachment

1055
00:52:24.326 --> 00:52:26.016
and we set ourselves
as the delegate.

1056
00:52:26.016 --> 00:52:29.986
And then we can also set the
title of the NewViewController

1057
00:52:30.396 --> 00:52:33.036
and make sure that it's showing
the attachment that's actually

1058
00:52:33.036 --> 00:52:34.206
on the selected item.

1059
00:52:35.016 --> 00:52:37.266
Or if the selected item
does not have an attachment,

1060
00:52:37.366 --> 00:52:39.466
make sure that the controller
isn't showing anything.

1061
00:52:40.766 --> 00:52:42.256
So with that, everything
should be working.

1062
00:52:42.256 --> 00:52:42.976
Let's build and run.

1063
00:52:49.046 --> 00:52:50.696
Let's go into the
tech toys section here

1064
00:52:50.696 --> 00:52:52.936
and you see now we have
these disclosure indicators

1065
00:52:52.936 --> 00:52:54.396
on each of the items.

1066
00:52:55.066 --> 00:52:56.346
We'll go into Thunderbolt
this way.

1067
00:52:56.346 --> 00:52:58.826
Then I can see it
says No Attachment.

1068
00:52:59.546 --> 00:53:02.286
But I can click this Edit
button using the ViewController

1069
00:52:59.546 --> 00:53:02.286
But I can click this Edit
button using the ViewController

1070
00:53:02.286 --> 00:53:03.436
from the media views framework.

1071
00:53:03.806 --> 00:53:05.866
That brings up a
standard iOS control.

1072
00:53:05.866 --> 00:53:09.306
Making sure that our privacy
is protected, and, ah...

1073
00:53:09.796 --> 00:53:12.046
This kid looks like he'd really
enjoy a Thunderbolt display.

1074
00:53:13.816 --> 00:53:17.126
[Laughter] Okay, we can go back
to another one of these here;

1075
00:53:18.376 --> 00:53:20.056
managed to get myself
stuck editing.

1076
00:53:20.056 --> 00:53:20.786
There we go.

1077
00:53:21.426 --> 00:53:23.576
And you can see that the
image actually does persist

1078
00:53:23.576 --> 00:53:25.216
in the Thunderbolt
display section.

1079
00:53:25.756 --> 00:53:26.976
So it looks like
everything's working.

1080
00:53:33.076 --> 00:53:35.036
So you saw how easy it
was, to not just deal

1081
00:53:35.036 --> 00:53:38.246
with a new model object- ...or,
sorry, not just a new object

1082
00:53:38.246 --> 00:53:39.496
in your application target,

1083
00:53:39.656 --> 00:53:42.736
but also a new model
object in your framework.

1084
00:53:44.656 --> 00:53:47.576
Additionally, this is not
related to Swift at all.

1085
00:53:47.576 --> 00:53:50.226
But in iOS 8 we now have
embedded frameworks.

1086
00:53:50.546 --> 00:53:52.946
And Xcode 6 will handle all
the details of that for you.

1087
00:53:52.946 --> 00:53:53.686
Yes, clap!

1088
00:53:54.516 --> 00:53:58.566
[ Applause ]

1089
00:53:59.066 --> 00:54:01.606
Finally, once again, we
updated our interface

1090
00:53:59.066 --> 00:54:01.606
Finally, once again, we
updated our interface

1091
00:54:01.606 --> 00:54:04.156
and added a delegate-
...adopted a delegate protocol.

1092
00:54:04.716 --> 00:54:07.526
And once again I want
to impress on you

1093
00:54:07.526 --> 00:54:10.926
that it's exactly what we would
have done had the delegate

1094
00:54:10.926 --> 00:54:14.656
protocol and the ViewController
been implemented in Objective-C.

1095
00:54:14.756 --> 00:54:17.266
We didn't have to do
anything unusual or different

1096
00:54:17.266 --> 00:54:18.886
because it was implemented
in Swift.

1097
00:54:20.546 --> 00:54:24.016
So you see how easy it is with
Xcode 6 to use user frameworks.

1098
00:54:24.116 --> 00:54:26.516
And in general we want you
to be treating those the same

1099
00:54:26.516 --> 00:54:27.896
as we do system frameworks.

1100
00:54:28.416 --> 00:54:31.786
So that means in Swift you'll
be using "import MyFramework"

1101
00:54:31.786 --> 00:54:34.986
and in Objective-C
you'll be using

1102
00:54:35.186 --> 00:54:38.296
"@import MyFramework;
(semicolon)".

1103
00:54:40.446 --> 00:54:41.866
In general we do want you

1104
00:54:41.866 --> 00:54:44.466
to be using @import
instead of #import.

1105
00:54:45.036 --> 00:54:47.376
For Swift- ...for frameworks
containing Swift code this is

1106
00:54:47.376 --> 00:54:48.636
absolutely required.

1107
00:54:48.996 --> 00:54:50.966
But even for other frameworks,
if they've been built

1108
00:54:50.966 --> 00:54:53.996
with Xcode 6 and have the
defined module build setting

1109
00:54:53.996 --> 00:54:56.186
turned on -- which
is on, by default --

1110
00:54:57.206 --> 00:55:00.066
then you have- ...then you'll
have a framework ready for use

1111
00:54:57.206 --> 00:55:00.066
then you have- ...then you'll
have a framework ready for use

1112
00:55:00.066 --> 00:55:01.786
in Objective-C or Swift.

1113
00:55:01.786 --> 00:55:05.376
The only reasons now to use
#import are if you are working

1114
00:55:05.376 --> 00:55:07.696
with an older framework that
has not yet been rebuilt

1115
00:55:07.696 --> 00:55:11.326
with Xcode 6 in a defined module
setting or if you're working

1116
00:55:11.326 --> 00:55:12.876
with C++, which does not

1117
00:55:12.876 --> 00:55:15.296
yet support the modules
feature we introduced last year.

1118
00:55:16.806 --> 00:55:18.486
So with that, everything
seems to be working

1119
00:55:18.486 --> 00:55:19.136
and our walkthrough is complete.

1120
00:55:19.136 --> 00:55:19.976
I'd like to hand
it back to Anders.

1121
00:55:20.516 --> 00:55:28.546
[ Applause ]

1122
00:55:29.046 --> 00:55:29.506
>> Thank you Jordan.

1123
00:55:30.706 --> 00:55:35.236
So, over the past hour we've
seen several different ways

1124
00:55:35.236 --> 00:55:37.336
of mixing Swift and Objective-C.

1125
00:55:38.426 --> 00:55:41.696
Swift is a better, safer
way to do Cocoa development.

1126
00:55:41.696 --> 00:55:45.796
It was designed to support
the Cocoa frameworks,

1127
00:55:45.856 --> 00:55:49.576
the Cocoa Touch idioms
and the common patterns

1128
00:55:49.576 --> 00:55:50.316
that we already know.

1129
00:55:51.606 --> 00:55:55.036
It's still Cocoa and
Cocoa Touch on iOS.

1130
00:55:55.106 --> 00:55:57.286
So that means that the
knowledge and experience

1131
00:55:57.376 --> 00:55:58.866
that you've gained
over the years

1132
00:55:58.906 --> 00:56:01.446
and the code you have
applies to Swift as well.

1133
00:55:58.906 --> 00:56:01.446
and the code you have
applies to Swift as well.

1134
00:56:01.506 --> 00:56:04.476
And as we've seen
some of the patterns

1135
00:56:04.476 --> 00:56:08.376
such as optionally calling a
delegate method are much easier

1136
00:56:08.376 --> 00:56:10.146
in Swift and much more succinct.

1137
00:56:10.816 --> 00:56:14.676
And in other cases you've seen
how Swift makes us define our

1138
00:56:14.676 --> 00:56:17.886
intentions much more clearly,
which can help save us later

1139
00:56:17.886 --> 00:56:20.536
on so we don't just
accidentally message nil

1140
00:56:20.536 --> 00:56:22.046
or message an object
of the wrong type.

1141
00:56:24.576 --> 00:56:27.546
And another thing that I hope
you've seen here is we've put a

1142
00:56:27.546 --> 00:56:29.846
lot of effort into making
sure that Xcode takes care

1143
00:56:29.846 --> 00:56:31.536
of the details so that

1144
00:56:31.536 --> 00:56:35.536
when you're using Objective-C
your Swift code looks

1145
00:56:35.536 --> 00:56:38.926
like Objective-C and when you're
using Swift the Objective-C code

1146
00:56:38.926 --> 00:56:39.586
looks like Swift.

1147
00:56:40.486 --> 00:56:44.316
And you saw some examples of
subclassing Cocoa Touch classes,

1148
00:56:44.706 --> 00:56:47.056
but that equally applies to
your own classes as well.

1149
00:56:48.806 --> 00:56:51.976
So for more information about
this there is, of course,

1150
00:56:51.976 --> 00:56:54.646
the Swift book in
the iBooks Bookstore,

1151
00:56:55.156 --> 00:56:57.146
but I'd also especially
like to call your attention

1152
00:56:57.146 --> 00:56:59.916
to the Using Swift with Cocoa
and Objective-C document

1153
00:56:59.916 --> 00:57:01.796
that we have on
developer.apple.com.

1154
00:56:59.916 --> 00:57:01.796
that we have on
developer.apple.com.

1155
00:57:01.906 --> 00:57:04.976
It's available as a PDF file
that you can download and read

1156
00:57:04.976 --> 00:57:08.336
on your favorite iOS
device and it goes

1157
00:57:08.336 --> 00:57:10.326
into a lot more details
about this.

1158
00:57:10.326 --> 00:57:12.986
There are several
related sessions.

1159
00:57:13.106 --> 00:57:16.136
One of them has already
been but it's on video.

1160
00:57:16.196 --> 00:57:18.266
It's the Introduction
to Swift, of course.

1161
00:57:18.626 --> 00:57:20.256
Later on today there's
going to be a session

1162
00:57:20.256 --> 00:57:24.266
on Swift Interoperability in
Depth and that goes into more

1163
00:57:24.266 --> 00:57:27.896
of the language details of how
to mix Objective-C with Swift.

1164
00:57:29.056 --> 00:57:30.036
There's a great session

1165
00:57:30.036 --> 00:57:33.086
on Creating Modern Cocoa Apps
coming up and another one

1166
00:57:33.086 --> 00:57:35.546
on Building Modern Frameworks
so that you can make sure

1167
00:57:35.546 --> 00:57:38.486
that you make your
frameworks embeddable on iOS

1168
00:57:38.486 --> 00:57:40.156
and useable from Swift.

1169
00:57:41.706 --> 00:57:43.976
Thanks and enjoy the
rest of the week.

1170
00:57:44.508 --> 00:57:46.508
[ Applause]
